/* Zookeeper client only configuration.
 */
import java.io.File;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.UUID;

import com.bigdata.util.NV;
import com.bigdata.util.config.NicUtil;
import com.bigdata.journal.Options;
import com.bigdata.journal.BufferMode;
import com.bigdata.journal.jini.ha.HAJournal;
import com.bigdata.jini.lookup.entry.*;
import com.bigdata.service.IBigdataClient;
import com.bigdata.service.AbstractTransactionService;
import com.bigdata.service.jini.*;
import com.bigdata.service.jini.lookup.DataServiceFilter;
import com.bigdata.service.jini.master.ServicesTemplate;
import com.bigdata.jini.start.config.*;
import com.bigdata.jini.util.ConfigMath;

import org.apache.zookeeper.ZooDefs;
import org.apache.zookeeper.data.ACL;
import org.apache.zookeeper.data.Id;

/*
 * Globals.
 */
bigdata {

   private static fedname = "benchmark";

   // The #of services in the write pipeline.
   private static replicationFactor = 3;

   /* The logical service identifier shared by all members of the quorum.
    *
    * Note: The test fixture ignores this value.  For the avoidance of 
    * doubt, the value is commented out.
    */
   //private static logicalServiceId = "CI-HAJournal-1";
   
   // zookeeper
   static private sessionTimeout = (int)ConfigMath.s2ms(20); 

}

/*
 * Zookeeper client configuration.
 */
org.apache.zookeeper.ZooKeeper {

    /* Root znode for the federation instance. */
    zroot = "/" + bigdata.fedname;

    /* A comma separated list of host:port pairs, where the port is
     * the CLIENT port for the zookeeper server instance.
     */
    // standalone.
    servers = "localhost:2081";
    // ensemble
//  servers =   bigdata.zoo1+":2181"
//             + ","+bigdata.zoo2+":2181"
//        + ","+bigdata.zoo3+":2181"
//       ;

    /* Session timeout (optional). */
    sessionTimeout = bigdata.sessionTimeout;

    /* 
     * ACL for the zookeeper nodes created by the bigdata federation.
     *
     * Note: zookeeper ACLs are not transmitted over secure channels
     * and are placed into plain text Configuration files by the
     * ServicesManagerServer.
     */
    acl = new ACL[] {

       new ACL(ZooDefs.Perms.ALL, new Id("world", "anyone"))

    };

   /*
    * Note: Normally on the HAJournalServer component. Hacked in the test
    * suite setup to look at the ZooKeeper component instead.
    */

   logicalServiceId = bigdata.logicalServiceId;

   replicationFactor = bigdata.replicationFactor;
}
