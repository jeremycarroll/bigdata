/*
 * A configuration file used by some unit tests.
 */

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import java.io.File;

import com.bigdata.util.NV;

import com.bigdata.service.IBigdataClient;
import com.bigdata.service.jini.*;

/*
 * Service configuration defaults.  These can also be specified on a
 * per service-type basis.  When the property is an array type, the
 * value here is concatenated with the optional array value on the per
 * service-type configuration.  Otherwise it is used iff no value is
 * specified for the service-type configuration.
 *
 * @todo add option for JAVA_HOME and PATH?
 */
com.bigdata.jini.start.ServiceConfiguration {

    // Optional command line arguments.
    //args=new String[]{};

    /* 
     * Default java command line arguments that will be used for all
     * java-based services
     *
     * Note: [-Dcom.sun.jini.jeri.tcp.useNIO=true] enables NIO.
     */
    defaultJavaArgs = new String[]{
	"-server",
	"-ea",
	"-Dcom.sun.jini.jeri.tcp.useNIO=true"
    };

    // Optional classpath components.
    //classpath=new String[]{};

    /* Default path for service instances and their persistent
     * data. This may be overriden on a per service-type basis. 
     *
     * Note: For logical services that support failover, the concrete
     * service directory is assigned dynamically when a physical
     * service instance is created.
     */
    serviceDir = new File("test-fed");
    //serviceDir = new File("/var/bigdata");
 
    /* Default Entry[] for jini services.
     *
     * Note: A Name attribute will be added automatically using the
     * service type and the znode of the service instance.  That Name
     * will be canonical.  It is best if additional service names are
     * NOT specified as that might confuse somethings :-)
     *
     * Note: A Hostname attribute will be added dynamically.
     */
    entries = new Entry[] {
	new Comment("sample federation"),
    };

    /**
     * A String[] whose values are the group(s) to be used for discovery
     * (no default). Note that multicast discovery is always used if
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>) is specified.
     *
     * Note: This field is referenced below so that you can setup the
     * jini client configuration in one place.
     */
    groups = LookupDiscovery.ALL_GROUPS;
    //groups = new String[]{"bigdata"};

    /**
     * One or more unicast URIs of the form <code>jini://host/</code>
     * or <code>jini://host:port/</code> (no default). This MAY be an
     * empty array if you want to use multicast discovery
     * <strong>and</strong> you have specified the groups as
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>).
     */
    locators = new LookupLocator[] {
	//new LookupLocator("jini://localhost/")
    };

    // passed through to the ConfigurationProvider via the cmd line.
    // jiniOptions=new String[]{};

    // bigdata services default logging configuration (value is a URI!)
    log4j="file:src/resources/logging/log4j.properties";

}

/*
 * Zookeeper client configuration.
 */
com.bigdata.zookeeper {

    /* Root znode for the federation instance. */
    zroot = "/bigdata";

    /* A comma separated list of host:port pairs, where the port is
     * the CLIENT port for the zookeeper server instance.
     */
    servers="localhost:2181";

    /* Session timeout (optional). */
    //sessionTimeout=xxxx;

}

/*
 * Jini client configuration for the ServicesManager.
 * 
 * Note: You MUST keep this synchronized with the jini configuration
 * for the other services.
 */
AdvertDescription {

    /**
     * A String[] whose values are the group(s) to be used for discovery
     * (no default). Note that multicast discovery is always used if
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>) is specified.
     *
     * Note: This field is referenced below so that you can setup the
     * jini client configuration in one place.
     */
    groups = LookupDiscovery.ALL_GROUPS;
    //groups = new String[]{"bigdata"};

    /**
     * One or more unicast URIs of the form <code>jini://host/</code>
     * or <code>jini://host:port/</code> (no default). This MAY be an
     * empty array if you want to use multicast discovery
     * <strong>and</strong> you have specified the groups as
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>).
     */
    locators = new LookupLocator[] {
	//new LookupLocator("jini://localhost/")
    };

}

/**
 * Initial configuration for new instances of the transaction server.
 */
com.bigdata.service.jini.TransactionServer {

    // optional command line arguments.
    args = new String[]{"-Xmx:1G", "-server"};

    options = new String[]{"foo=bar"};

}

com.bigdata.service.jini.MetadataServer {

}

com.bigdata.service.jini.DataServer {

    serviceCount = 2;

    // you can override this property on a per-service type basis.
    //servicesDir = new File("/var/bigdata/...");

    /*
     * Note: the [dataDir] will be filled in when a new service
     * instance is created based on the [servicesDir].
     */
    params = new NV[]{

    };

}
