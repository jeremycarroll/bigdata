/*
 * This is a sample configuration file for a bigdata federation using
 * jini and zookeeper.
 * 
 * Note: This file uses the jini configuration mechanisms, which allow
 * the specification of the configuration using a mixture of Java and
 * grouping the properties for different components within a
 * namespaces for each component.
 *
 * See the net.jini.config.ConfigurationFile javadoc for more
 * information.
 */

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import java.io.File;

import com.bigdata.util.NV;

import com.bigdata.service.IBigdataClient;
import com.bigdata.service.jini.*;

import org.apache.zookeeper.ZooDefs;
import org.apache.zookeeper.data.ACL;
import org.apache.zookeeper.data.Id;

/**
 * Options for the bigdata services manager, including where to find
 * stuff.
 */
com.bigdata.jini.start {

    // The jini executable.
    jini=new File("C:\Program Files\jini2_1\installverify\support\launch-all.exe");

    // Java command line arguments that will be used for all services.
    jvmargs=new String[]{"-server","-ea"};

    // ACLs for the federation zroot (see zookeeper client config below).
    acl = new ACL[] {
	new ACL(ZooDefs.Perms.ALL, new Id("world", "anyone"))
    };

}

/**
 * Zookeeper configuration.
 *
 * You MUST specify at least the clientPort.  You SHOULD specify the
 * full list of servers that are available to the federation.  An
 * instance of zookeeper will start on each host corresponding to one
 * of the server properties.
 *
 * Note: zookeeper interprets NO entries as the localhost with default
 * peer and leader ports. This will work as long as the localhost is
 * already running zookeeper, zookeeper WILL NOT automatically start
 * zookeeper if you do not specify the server properties.  You can
 * also explicitly specify "localhost" as the hostname, but that only
 * works for a single machine.
 */
org.apache.zookeeper {

    dataDir=new File("zookeeper");

    /* Note: A dedicated log device is highly recommended! */
    //dataLogDir=new File("/var/zookeeper-log");

    clientPort=2181;

    tickTime=2000;

    initLimit=5;

    syncLimit=2;

    /* jini can not handle the zookeeper [server.#] properties since
     * the property name is not a legal java identifier. Therefore we
     * use a meta-property "servers" whose value is the list of the
     * individual server properties.  The syntax is obvious, if ugly.
     */
    servers="1=localhost:2888:3888";

    //servers="1=zoo1:2888:3888; 2=zoo2:2888:3888; 3=zoo3:2888:3888";

    // @todo is 1.2.15 required?
    classpath
	= "lib/apache/zookeeper-3.0.1.jar" + File.pathSeparator
	+ "../bigdata/lib/apache/log4j-1.2.15.jar" + File.pathSeparator
	;

    /* Optional command line arguments for the JVM used to execute
     * zookeeper.
     *
     * Note: swapping for zookeeper is especially bad since the
     * operations are serialized, so if anything hits then disk then
     * all operations in the queue will have that latency as well.
     */
    //args=new String[]{"-Xmx:2G"};

    // logging configuration (value is a URI!)
    log4j="file:src/resources/logging/log4j.properties";

}

/*
 * Zookeeper client configuration.
 */
com.bigdata.zookeeper {

    /* Root znode for the federation instance. */
    zroot = "/bigdata";

    /* A comma separated list of host:port pairs, where the port is
     * the CLIENT port for the zookeeper server instance.
     */
    servers="localhost:2181";

    /* Session timeout (optional). */
    //sessionTimeout=xxxx;

}

/*
 * Jini client configuration.
 *
 * This section declares how the client will discover the Jini service
 * registrar.  Once the client has access to the registrar it will
 * resolve services in the federation using the provided group(s). All
 * bigdata services are "clients" in this sense, and both services and
 * normal clients should use exactly the same configuration.
 *
 * Each bigdata federation can use its own group for ease of
 * management.  In that case, each client must limit its discovery to
 * the group corresponding to the federation(s) to which it will
 * connect.  Further, multicast is only available when ALL_GROUPS is
 * specified, so if you are using groups then you also must configure
 * a list of the LookupLocators - these will be used to locate the
 * jini registrars.
 *
 * @todo when generating the configuration for the individual services
 * the Entry[] also needs to be generated and placed within this
 * section.
 */
AdvertDescription {

    /*
     * Note: multicast discovery is always used if
     * LookupDiscovery.ALL_GROUPS is specified.
     */
//    groups = LookupDiscovery.ALL_GROUPS;
    groups = new String[]{"bigdata"};

    /*
     * One or more unicast URIs of the form jini://host/ or
     * jini://host:port/.  This MAY be an empty array if you want to
     * use multicast discovery _and_ you have specified
     * LookupDiscovery.ALL_GROUPS above.
     */
    unicastLocators = new LookupLocator[] { // empty
    	new LookupLocator("jini://localhost/")
    };

}

/**
 * Initial configuration for new instances of the transaction server.
 */
TransactionServer {

    count = 1;

    // optional command line arguments.
    args = new String[]{"-Xmx:2G", "-server"};

    // server configuration properties.
    params = new NV[]{
	
	new NV(TransactionServer.DATA_DIR, ""),

    };

}

MetadataServer {

    count = 1;

    params = new NV[]{
	
	new NV(MetadataServer.DATA_DIR, ""),

    };

}

DataServer {

    count = 2;

    params = new NV[]{
	
	new NV(DataServer.DATA_DIR, ""),

    };

}
