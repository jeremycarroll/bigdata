/*
 * This is a sample configuration file for a bigdata federation using
 * jini and zookeeper.
 * 
 * Note: This file uses the jini configuration mechanisms, which allow
 * the specification of the configuration using a mixture of Java and
 * grouping the properties for different components within a
 * namespaces for each component.
 *
 * See the net.jini.config.ConfigurationFile javadoc for more
 * information.
 */

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import java.io.File;

import com.bigdata.util.NV;

import com.bigdata.service.IBigdataClient;
import com.bigdata.service.jini.*;

import org.apache.zookeeper.ZooDefs;
import org.apache.zookeeper.data.ACL;
import org.apache.zookeeper.data.Id;

/*
 * Service configuration defaults.  These can also be specified on a
 * per service-type basis.  When the property is an array type, the
 * value here is concatenated with the optional array value on the per
 * service-type configuration.  Otherwise it is used iff no value is
 * specified for the service-type configuration.
 */
com.bigdata.jini.start.ServiceConfiguration {

    /* 
     * Default java command line arguments that will be used for all
     * java-based services
     *
     * Note: [-Dcom.sun.jini.jeri.tcp.useNIO=true] enables NIO.
     */
    defaultJavaArgs = new String[]{
	"-server",
	"-ea",
	"-Dcom.sun.jini.jeri.tcp.useNIO=true",
	"-Djava.security.policy=policy.all"
    };

    // Optional classpath components.
    //classpath=new String[]{};

    /* Default path for service instances and their persistent
     * data. This may be overriden on a per service-type basis. 
     *
     * Note: For logical services that support failover, the concrete
     * service directory is assigned dynamically when a physical
     * service instance is created.
     */
    serviceDir = new File("test-fed");
    //serviceDir = new File("/var/bigdata");
 
    /* Default Entry[] for jini services.
     *
     * Note: A Name attribute will be added automatically using the
     * service type and the znode of the service instance.  That Name
     * will be canonical.  It is best if additional service names are
     * NOT specified as that might confuse somethings :-)
     *
     * Note: A Hostname attribute will be added dynamically.
     */
    entries = new Entry[] {
	new Comment("sample federation"),
    };

    /**
     * A String[] whose values are the group(s) to be used for discovery
     * (no default). Note that multicast discovery is always used if
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>) is specified.
     *
     * Note: This field is referenced below so that you can setup the
     * jini client configuration in one place.
     */
    groups = LookupDiscovery.ALL_GROUPS;
    //groups = new String[]{"bigdata"};

    /**
     * One or more unicast URIs of the form <code>jini://host/</code>
     * or <code>jini://host:port/</code> (no default). This MAY be an
     * empty array if you want to use multicast discovery
     * <strong>and</strong> you have specified the groups as
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>).
     */
    locators = new LookupLocator[] {
	//new LookupLocator("jini://localhost/")
    };

    // passed through to the ConfigurationProvider via the cmd line.
    // jiniOptions=new String[]{};

    // bigdata services default logging configuration (value is a URI!)
    log4j="file:src/resources/logging/log4j.properties";

}

/**
 * Zookeeper server configuration.
 */
org.apache.zookeeper.server.quorum.QuorumPeerMain {

    /* Directory for zookeeper's persistent state.
     */
    dataDir = new File("test-fed/zookeeper");
    //dataDir = new File("/var/zookeeper");

    /* Optional directory for the zookeeper log files.
     * 
     * Note: A dedicated log device is highly recommended!
     */
    //dataLogDir=new File("/var/zookeeper-log");

    // required.
    clientPort=2181;

    tickTime=2000;

    initLimit=5;

    syncLimit=2;

    /* A comma delimited list of the known zookeeper servers together
     * with their assigned "myid".
     *
     * Note: You SHOULD specify the full list of servers that are
     * available to the federation. An instance of zookeeper will be
     * started automatically on each host running ServicesManager that
     * is present in the [servers] list IF no instance is found
     * running on that host at the specified [clientPort].
     * 
     * Note: zookeeper interprets NO entries as the localhost with
     * default peer and leader ports. This will work as long as the
     * localhost is already running zookeeper.  However, zookeeper
     * WILL NOT automatically start zookeeper if you do not specify
     * the [servers] property.  You can also explicitly specify
     * "localhost" as the hostname, but that only works for a single
     * machine.
     *
     * Note: jini can not handle the zookeeper [server.#] properties
     * since the property name is not a legal java
     * identifier. Therefore we use a meta-property "servers" whose
     * value is the list of the individual server properties.  The
     * syntax is obvious, if ugly.
     */
    // standalone
    servers="1=localhost:2888:3888";
    // ensemble
    //servers="1=zoo1:2888:3888, 2=zoo2:2888:3888, 3=zoo3:2888:3888";

    classpath = new String[] {
    	"lib/apache/zookeeper-3.0.1.jar",
	"../bigdata/lib/apache/log4j-1.2.15.jar"
    };

    /* Optional command line arguments for the JVM used to execute
     * zookeeper.
     *
     * Note: swapping for zookeeper is especially bad since the
     * operations are serialized, so if anything hits then disk then
     * all operations in the queue will have that latency as well.
     */
    //args=new String[]{"-Xmx2G"};

    // zookeeper server logging configuration (value is a URI!)
    log4j="file:src/resources/logging/log4j.properties";

}

/*
 * Zookeeper client configuration.
 */
com.bigdata.zookeeper {

    /* Root znode for the federation instance. */
    zroot = "/bigdata";

    /* A comma separated list of host:port pairs, where the port is
     * the CLIENT port for the zookeeper server instance.
     */
    servers="localhost:2181";

    /* Session timeout (optional). */
    //sessionTimeout=xxxx;

}

/**
 * Options for the bigdata services manager.
 */
com.bigdata.jini.start.ServicesManagerServer {

    /* ACLs for the federation zroot (see zookeeper client config
     * below).
     * 
     * @todo move into the zookeeper client section?
     */
    acl = new ACL[] {
	new ACL(ZooDefs.Perms.ALL, new Id("world", "anyone"))
    };

    // The jini executable @todo move to the service config for starting jini.
    jini=new File("C:\Program Files\jini2_1\installverify\support\launch-all.exe");
    entries = new Entry[] {

	new Comment("ServicesManager")

    };

}

/*
 * Jini client configuration for the ServicesManager.
 * 
 * Note: You MUST keep this synchronized with the jini configuration
 * for the other services.
 */
AdvertDescription {

    /**
     * A String[] whose values are the group(s) to be used for discovery
     * (no default). Note that multicast discovery is always used if
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>) is specified.
     *
     * Note: This field is referenced below so that you can setup the
     * jini client configuration in one place.
     */
    groups = LookupDiscovery.ALL_GROUPS;
    //groups = new String[]{"bigdata"};

    /**
     * One or more unicast URIs of the form <code>jini://host/</code>
     * or <code>jini://host:port/</code> (no default). This MAY be an
     * empty array if you want to use multicast discovery
     * <strong>and</strong> you have specified the groups as
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>).
     */
    locators = new LookupLocator[] {
	//new LookupLocator("jini://localhost/")
    };

}

/*
 * Jini service configuration for the ServicesManager.
 */
ServiceDescription {

    /*
     * This object is used to export the service proxy.  The choice
     * here effects the protocol that will be used for communications
     * between the clients and the service.
     *
     * Note: specify the JVM property
     * [-Dcom.sun.jini.jeri.tcp.useNIO=true] to enable NIO.
     */
    exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                     new BasicILFactory()); 

    /*                                          
     * The file on which the serviceID will be written.
     */
    serviceIdFile = new File("test-fed/ServicesManager/service.id"); 

}

/**
 * Initial configuration for new instances of the transaction server.
 */
com.bigdata.service.jini.TransactionServer {

    // optional command line arguments.
    args = new String[]{"-Xmx1G", "-server"};

}

com.bigdata.service.jini.MetadataServer {

}

com.bigdata.service.jini.DataServer {

    serviceCount = 2;

    // you can override this property on a per-service type basis.
    //servicesDir = new File("/var/bigdata/...");

    /*
     * Note: the [dataDir] will be filled in when a new service
     * instance is created based on the [servicesDir].
     */
    params = new NV[]{

    };

}
