<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bigdata</groupId>
    <artifactId>bigdata-core</artifactId>
    <packaging>jar</packaging>

    <parent>
        <groupId>com.bigdata</groupId>
        <artifactId>bigdata</artifactId>
        <version>0.83.2-SNAPSHOT</version>
        <relativePath>../</relativePath>
    </parent>

    <name>Bigdata Core</name>
    <url>http://www.bigdata.com</url>
    <description>The Bigdata Core</description>

    <properties>
        <!-- group ID for non-public bigdata dependencies. -->
        <thirdParty.groupId>com.bigdata.thirdparty</thirdParty.groupId>

        <!--
            These properties are used to set system properties that are required by the unit tests. See the surefire plugin configuration below. Any of these can be overridden on the command-line by
            adding -D<property-name>=<propert-value>.
        -->

        <!--
            This directory is created when the deployment tarball is created during the 'package' phase by the maven assembly plugin. If the naming convention as defined in
            src/main/assembly/deploy.xml changes, this property needs to change as well.
            
            TODO: May want to see if these can be promoted to the parent POM and shared with the bigdata-integ module
        -->
        <deploy.root.dir>${project.build.directory}/${project.artifactId}-${project.version}-deploy</deploy.root.dir>

        <deploy.dir>${deploy.root.dir}/${project.artifactId}-${project.version}</deploy.dir>
        <app.home>${deploy.dir}</app.home>
        <test.dir>${deploy.dir}/testing</test.dir>
        <test.conf.dir>${test.dir}/conf</test.conf.dir>
        <deploy.lib>${deploy.dir}/lib</deploy.lib>
        <test.codebase.dir>${deploy.lib.dl}</test.codebase.dir>
        <test.codebase.port>23333</test.codebase.port>
        <java.security.policy>${test.conf.dir}/policy.all</java.security.policy>
        <log4j.configuration>${test.conf.dir}/log4j.properties</log4j.configuration>
        <java.net.preferIPv4Stack>true</java.net.preferIPv4Stack>
        <default.nic>eth0</default.nic>

        <!--  Set to empty string to indicate "unset." Application code will set a reasonable default -->
        <federation.name></federation.name>
    </properties>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <compilerArguments>
                        <!--
                            Apparently Javac may compile java source files inside jars put on the classpath. Weird. Zookeeper 3.2.1 jar contained classes and sources, and under some circumstances, the
                            java files were getting recompiled and put into the bigdata jar. This setting forces javac to only look for source in the current maven source directory.
                        -->
                        <sourcepath>${project.build.sourceDirectory}</sourcepath>
                        <!-- <Xlint></Xlint> -->
                        <!-- <Xlint:unchecked></Xlint:unchecked> -->
                    </compilerArguments>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- build the main bigdata jar. -->
                        <id>jar-main-jar</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                    <execution>
                        <!-- build a jar for all the test code, will be named ****-tests.jar -->
                        <id>jar-test-jar</id>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                    <execution>
                        <!-- build an executable jar for launching the bigdata / JINI lookup service, will be named ****-lookupstarter.jar -->
                        <id>jar-lookupstarter-jar</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>lookupstarter</classifier>
                            <includes>
                                <include>**/LookupStarter*.class</include>
                                <include>**/LogUtil.class</include>
                                <include>**/NicUtil.class</include>
                                <include>**/ConfigurationUtil.class</include>
                                <include>**/log4j.properties</include>
                            </includes>
                            <archive>
                                <manifest>
                                    <addClasspath>false</addClasspath>
                                    <mainClass>com.bigdata.service.jini.util.LookupStarter</mainClass>
                                </manifest>
                                <manifestEntries><!-- Not the normal way to do this, but cleaner than using maven classpath -->
                                    <Class-Path>log4j.jar jsk-platform.jar jsk-lib.jar start.jar ${project.artifactId}.jar</Class-Path>
                                </manifestEntries>
                            </archive>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                Configure the surefire plugin to run in the 'integration-test' phase rather than the 'test' phase. This allows us to run the unit tests after packaging has been done, but before the
                build artifacts are installed during the 'install' phase
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
                <executions>
                    <execution>
                        <id>unit-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <testFailureIgnore>true</testFailureIgnore>
                            <skip>false</skip>
                            <!-- Run only the top-level suite which in turn runs the other suites and tests -->
                            <includes>
                                <include>com/bigdata/TestAll.java</include>
                            </includes>
                            
                            <forkMode>pertest</forkMode>

                            <!-- These system properties are required by the unit tests. -->
                            <systemPropertyVariables>
                                <java.security.policy>${java.security.policy}</java.security.policy>
                                <java.net.preferIPv4Stack>{java.net.preferIPv4Stack}</java.net.preferIPv4Stack>
                                <log4j.configuration>${log4j.configuration}</log4j.configuration>

                                <app.home>${app.home}</app.home> <!-- This is the deployment directory, easily accessed by the DataFinder class. -->
                                <log4j.path>${log4j.configuration}</log4j.path>
                                <default.nic>${default.nic}</default.nic>
                                <federation.name>${federation.name}</federation.name>

                                <classserver.jar>${deploy.lib}/classserver.jar</classserver.jar>
                                <colt.jar>${deploy.lib}/colt.jar</colt.jar>
                                <ctc_utils.jar>${deploy.lib}/ctc_utils.jar</ctc_utils.jar>
                                <cweb-commons.jar>${deploy.lib}/cweb-commons.jar</cweb-commons.jar>
                                <cweb-extser.jar>${deploy.lib}/cweb-extser.jar</cweb-extser.jar>
                                <highscalelib.jar>${deploy.lib}/highscalelib.jar</highscalelib.jar>
                                <dsiutils.jar>${deploy.lib}/dsiutils.jar</dsiutils.jar>
                                <lgplutils.jar>${deploy.lib}/lgplutils.jar</lgplutils.jar>
                                <fastutil.jar>${deploy.lib}/fastutil.jar</fastutil.jar>
                                <icu4j.jar>${deploy.lib}/icu4j.jar</icu4j.jar>
                                <jsk-lib.jar>${deploy.lib}/jsk-lib.jar</jsk-lib.jar>
                                <jsk-platform.jar>${deploy.lib}/jsk-platform.jar</jsk-platform.jar>
                                <log4j.jar>${deploy.lib}/log4j.jar</log4j.jar>
                                <iris.jar>${deploy.lib}/iris.jar</iris.jar>
                                <jgrapht.jar>${deploy.lib}/jgrapht.jar</jgrapht.jar>
                                <openrdf-sesame.jar>${deploy.lib}/openrdf-sesame.jar</openrdf-sesame.jar>
                                <slf4j.jar>${deploy.lib}/slf4j.jar</slf4j.jar>
                                <nxparser.jar>${deploy.lib}/nxparser.jar</nxparser.jar>
                                <zookeeper.jar>${deploy.lib}/zookeeper.jar</zookeeper.jar>



				<basedir>${deploy.dir}/testing</basedir>



                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- Workaround assembly issue for nicely organized libs in the deployment tarball. For more info see src/main/assemblies/deploy.xml -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-runtime-jars</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeScope>runtime</includeScope>
                            <excludeClassifiers>dl</excludeClassifiers>
                            <stripVersion>true</stripVersion>
                            <outputDirectory>${project.build.directory}/dependencies/lib</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-dl-jars</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeScope>provided</includeScope>
                            <includeClassifiers>dl</includeClassifiers>
                            <stripVersion>true</stripVersion>
                            <outputDirectory>${project.build.directory}/dependencies/lib-dl</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-test-jars</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <excludeScope>runtime</excludeScope>
                            <excludeClassifiers>dl</excludeClassifiers><!-- TODO: figure out why this doesn't exclude the dl jars -->
                            <stripVersion>true</stripVersion>
                            <outputDirectory>${project.build.directory}/dependencies/lib-test</outputDirectory>
                        </configuration>
                    </execution>
                </executions>

            </plugin>


            <plugin>
                <!-- Builds the deployment tarball. -->
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptors>
                        <descriptor>src/main/assembly/deploy.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-deployment</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>



        <!-- ************************ Start of non-public dependencies ************************ -->
        <!-- ************************ Start of non-public dependencies ************************ -->
        <!-- ************************ Start of non-public dependencies ************************ -->

        <!-- TODO: look at maven-bundle-plugin from felix to provide osgi support. bndlib version 0.0.357 in central. -->

        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>cweb-extser</artifactId>
            <version>0.1.0-b2-dev</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>cweb-commons</artifactId>
            <version>1.1.0-b2-dev</version>
        </dependency>

        <dependency>
            <groupId>${thirdParty.groupId}</groupId> <!-- TODO: An older version (5.0.9) is available in central. -->
            <artifactId>unimi-fastutil</artifactId>
            <version>5.1.5</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>lgpl-utils</artifactId>
            <version>1.0.6</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>ctc-utils</artifactId>
            <version>5-4-2005</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>dsi-utils</artifactId>
            <version>1.0.6-020610</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>high-scale-lib</artifactId>
            <version>1.1.2</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>iris</artifactId>
            <version>0.58</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>nxparser</artifactId>
            <version>6-22-2010</version>
        </dependency>

        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>zookeeper</artifactId>
            <version>[3.2.1,3.3)</version>  <!-- TODO: This artifact is older, but the new 3.3.1 artifact in central is incompatible -->
        </dependency>

        <!-- Apache River -->
        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>tools</artifactId>
            <version>2.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>start</artifactId>
            <version>2.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>jsk-lib</artifactId>
            <version>2.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>jsk-platform</artifactId>
            <version>2.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>jsk-resources</artifactId>
            <version>2.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>reggie</artifactId>
            <version>2.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>classserver</artifactId>
            <version>2.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>browser</artifactId>
            <version>2.1</version>
        </dependency>

        <!-- Note that these are dl jars, so they are provided and have a dl classifier. -->
        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>browser</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
            <classifier>dl</classifier>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>jsk</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
            <classifier>dl</classifier>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>reggie</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
            <classifier>dl</classifier>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>sdm</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
            <classifier>dl</classifier>
        </dependency>
        <!-- ************************ End of non-public dependencies ************************ -->
        <!-- ************************ End of non-public dependencies ************************ -->
        <!-- ************************ End of non-public dependencies ************************ -->

        <!-- icu4j -->
        <dependency>
            <groupId>com.ibm.icu</groupId>
            <artifactId>icu4j</artifactId>
            <version>3.6.1</version>
        </dependency>

        <dependency> <!-- TODO: need to verify this public artifact is equivalent to private colt 1.2.0 jar, contents are different -->
            <groupId>colt</groupId>
            <artifactId>colt</artifactId>
            <version>1.2.0</version>
        </dependency>

        <dependency>
            <groupId>org.jgrapht</groupId>
            <artifactId>jgrapht-jdk1.5</artifactId>
            <version>0.7.3</version><!-- TODO: verify this public dep is good, previous dependency on 0.7.1 -->
        </dependency>


        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>


        <!-- slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.6.1</version>
            <scope>test</scope>
        </dependency>


        <!-- Log4J: not optional because source code has direct references -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.15</version>
            <!--
                These exclusions are to address the fact that 1.2.15 added new features that depends on Sun specific jars, but these jars cannot be made available due to Sun's click-through
                requirement on them. We aren't using the new features anyway, so they are safe to exclude. log4j should have made these optional in their POM.
            -->
            <exclusions>
                <exclusion>
                    <groupId>javax.mail</groupId>
                    <artifactId>mail</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.jms</groupId>
                    <artifactId>jms</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.sun.jdmk</groupId>
                    <artifactId>jmxtools</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.sun.jmx</groupId>
                    <artifactId>jmxri</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Sesame -->

        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-sparql-testsuite</artifactId>
            <version>2.3.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-store-testsuite</artifactId>
            <version>2.3.0</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-model</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-query</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-rio-api</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryalgebra-model</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryalgebra-evaluation</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-sail-api</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryparser-api</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryparser-sparql</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-repository-api</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-repository-sail</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryresultio-sparqlxml</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-rio-rdfxml</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryresultio-api</artifactId>
            <version>2.3.0</version>
        </dependency>

        <!-- Aduna -->
        <dependency>
            <groupId>info.aduna.commons</groupId>
            <artifactId>aduna-commons-xml</artifactId>
            <version>2.5.0</version>
        </dependency>
        <dependency>
            <groupId>info.aduna.commons</groupId>
            <artifactId>aduna-commons-iteration</artifactId>
            <version>2.6.0</version>
        </dependency>
        <dependency>
            <groupId>info.aduna.commons</groupId>
            <artifactId>aduna-commons-net</artifactId>
            <version>2.5.0</version>
        </dependency>
        <dependency>
            <groupId>info.aduna.commons</groupId>
            <artifactId>aduna-commons-text</artifactId>
            <version>2.5.0</version>
        </dependency>

        <!-- Lucene -->
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers</artifactId>
            <version>3.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!-- Jetty -->
        <dependency>
            <groupId>org.mortbay.jetty</groupId> <!-- TODO: verify if this is the best way to pick up the javax.servlet dependency -->
            <artifactId>servlet-api-2.5</artifactId>
            <version>6.1.14</version>
        </dependency>

        <!-- HttpClient -->
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>3.1</version>
        </dependency>

    </dependencies>

    <reporting>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>report-only</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <configLocation>${basedir}/src/main/config/checkstyle.xml</configLocation>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>2.3</version>
            </plugin>

        </plugins>
    </reporting>

    <profiles>
        <profile>
            <id>bigdata-clover</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.atlassian.maven.plugins</groupId>
                        <artifactId>maven-clover2-plugin</artifactId>
                        <configuration>
                            <!-- Details on configuring clover are in the parent pom. -->
                            <excludes><!-- These are stuffed into the lookup starter jar, which uses a stripped classpath without clover. -->
                                <exclude>**/LookupStarter*.java</exclude>
                                <exclude>**/LogUtil.java</exclude>
                                <exclude>**/NicUtil.java</exclude>
                                <exclude>**/ConfigurationUtil.java</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


</project>
