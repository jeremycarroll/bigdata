<project name="bigdata" default="jar" basedir=".">

	<property file="build.properties" />

	<path id="build.classpath">
		<fileset dir="${bigdata.dir}/lib" >
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="runtime.classpath">
		<pathelement location="${build.dir}" />
		<path refid="build.classpath" />
	</path>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="prepare">
		<mkdir dir="${build.dir}" />
	</target>

	<target name="compile" depends="prepare">
		<mkdir dir="${build.dir}" />
		<javac destdir="${build.dir}" classpathref="build.classpath" debug="on">
			<src path="${bigdata.dir}/src/java" />
			<!-- @todo do not bundle the tests in the jar. -->
			<src path="${bigdata.dir}/src/test" />
		</javac>
	</target>

	<!-- build the main jar.
	
		 Note: clients share much of the bigadata java code since they require
		 access to local temporary stores and btrees for some operations. Also,
		 servers require client code (including the bulky ICU package) when they
		 run remote jobs on the behalf of clients.  Therefore, there is no point
		 to creating both a "client" and a "server" JAR.
		 -->
	<target name="jar" depends="compile">
		<jar destfile="${jar.name}">
			<fileset dir="${build.dir}" />
			<fileset dir="${bigdata.dir}/src">
				<include name="resources/config/**"/>
				</fileset>
			<manifest>
				<!-- @todo could be main routine for services startup, or perhaps
				     a standalone instance startup. -->
				<attribute name="Main-Class" value="com/bigdata/service/TestServiceDiscovery" />
			</manifest>
		</jar>
	</target>

	<!-- The following are somewhat dated notes on using jini with downloadable
	     code.
	
	You need to copy downloadable code to an HTTP server so that the classes can
	be resolved for activatable services, e.g.,
	
	assuming:
	
	codebase=http://proto.cognitiveweb.org/maven-repository/bigdata/jars/

	do:

	scp ant-deploy/* bryan@proto.cognitiveweb.org:/home/groups/c/cw/cweb/maven-repository/bigdata/jars
	
	then verfify that you can see the resources in a web browser at that codebase
	URL (e.g., the files all have the right permissions on the server).  You MUST
	then unarchive bigdata.jar into this directory so that the actual class files
	themselves are available for download (only .class files are downloaded, NOT
	JARs).

		cd /home/groups/c/cw/cweb/maven-repository/bigdata/jars
			
		/usr/java/j2sdk1.4.2_05/bin/jar xf bigdata.jar
	
	Finally, the code that will expose services with downloadable code MUST set
	
	-Djava.rmi.server.codebase=http://.../
	
	where "..." is your host and path
	
	in order for the correct codebase property to be communicated to clients that
	will then download code from that HTTP server.  Note: the trailing '/' is
	REQUIRED in your codebase or the generated URLs will NOT resolve correctly.
	
	See http://java.sun.com/j2se/1.4.2/docs/guide/rmi/javarmiproperties.html for
	some guidence.  Among other things, it suggests:
	
		-Djava.rmi.server.logCalls=true
		
	as an aid to debuging.  Also try setting
		
		-Dcom.sun.jini.reggie.proxy.debug=1
		
	for the client, e.g., the service browser. Also see:
	
		http://www.adtmag.com/java/articleold.aspx?id=1159
		
	for some (very good) guidence in debugging jini services.

	Note: You may have to restart jini locally in order to force download of 
	updated classes from the codebase!

	See http://archives.java.sun.com/cgi-bin/wa?A2=ind0512&L=jini-users&P=R391&I=-3
	for instructions on setting up an "download jar" (dljar) ANT task that can make
	life much simpler (one supposes).

    See http://archives.java.sun.com/cgi-bin/wa?A2=ind0311&L=jini-users&F=&S=&P=7182
        for a description of policy files and
        http://www.dancres.org/cottage/jini-start-examples-2_1.zip for the
        policy files described.
	
	See http://jan.newmarch.name/java/jini/tutorial/Ant.xml for a description of
	one (simple) approach to using ant for jini projects (it does not use the
	dljar ant task but explicitly enumerates what goes where).
	
	See http://jan.newmarch.name/java/jini/tutorial/TroubleShooting.xml#RMI%20Stubs
	for common errors when using RMI stubs.
	
	See https://java.sun.com/products/jini/2.1/doc/api/com/sun/jini/example/browser/package-summary.html
	for the dirty on the jini Service Browser.
	
	@todo you need to install the client and server deployments on machines
	that will run clients or servers respectively. -->

	<!-- @todo sign jars? version code -->
	<!-- drop unit tests from the jar (except for testing); -->
	<!-- @todo break into client deploy (minimum startup for clients) and server
		 deploy (minimum startup for servers) plus a deployment for downloadedable
		 code for activatable services (which is how the services will actually
		 run).  Note that (ICU is only required for clients). -->
	<!--
	write a test to validate the pre- and post- conditions for deployment. -->
	<!-- add properties to build.properties for the http server location,
		 failover sites, network for service discovery, jeri protocol settings,
		 etc. -->
	
	<!-- builds the basic bigdata deployment.
	
		 Note: clients require access to the ICU libraries for encoding unicode
		 keys.  However, a server can operate as a client when running submitted
		 jobs, so these libraries need to be deployed to server machines as well.
		 
		 @todo include an ant/shell/bat script for starting bigdata services or
		 just a README?
	-->
	<target name="deploy" depends="jar">
		<copy toDir="${deploy.dir}">
			<fileset dir="${bigdata.dir}/lib">
				<!-- review necessar jini dependencies for deployment. -->
			    <exclude name="reggie.jar" />
				<exclude name="sun-util.jar" />
				<exclude name="jini-core.jar" />
				<exclude name="jini-ext.jar" />
				<!-- ICU4JNI is not a supported configuration at this time. -->
				<exclude name="**/icu4jni.jar" />
				<exclude name="**/icu*.dll" />
				<exclude name="**/ICU*.dll" />
				<!-- The BytesUtil JNI class is not recommended at this time. -->
				<exclude name="**/*BytesUtil*" />
			</fileset>
			<fileset dir="${bigdata.dir}/LEGAL">
				<!-- Not required in the distribution. -->
				<exclude name="README.txt" />
			</fileset>
			<fileset file="${jar.name}/">
			</fileset>
		</copy>
	</target>

</project>
