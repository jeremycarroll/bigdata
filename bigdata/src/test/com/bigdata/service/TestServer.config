import java.io.*;

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.core.discovery.LookupLocator;
import net.jini.discovery.LookupDiscovery;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import java.io.File;
import com.sun.jini.config.ConfigUtil;

import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.start.NonActivatableServiceDescriptor;

/*
 * Declares how the service will provision itself.
 */
ServiceDescription {

	/*
	 * This object is used to export the service proxy.  The choice here effects
	 * the protocol that will be used for communications between the clients and
	 * the service.
	 *
	 * @todo Explore JERI nio option and customization support for serialization.
	 */
    exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                     new BasicILFactory()); 
                                     
	/*
	 * Code base for downloadable code exposed by this service.
	 */
    private static codebase =    
        "http://proto.cognitiveweb.org/maven-repository/bigdata/jars/";
        
    /* @todo restrict the policy to what is actually required by the service.
     * Among other things, we only need access to a temporary directory and
     * to the directory in which the journals and index segments will be 
     * stored, not general read/write on the disk.
     */
    private static policy = "policy.all";

	/*
	 * The directory containing the various JARs.
	 */
	private static libdir = "ant-deploy"+File.separator;

    /*
     * Declare dependencies for the server here.
     */
    private static classpath = 
   	  // jini
      libdir+"reggie.jar"+File.pathSeparator+
      libdir+"jini-core.jar"+File.pathSeparator+
      libdir+"jini-ext.jar"+File.pathSeparator+
      libdir+"sun-util.jar"+File.pathSeparator+
      // utility JARs.
	  libdir+"log4j-1.2.8.jar"+File.pathSeparator+
	  libdir+"ctc_utils-5-4-2005.jar"+File.pathSeparator+
	  libdir+"lgpl-utils-1.0-b1-dev.jar"+File.pathSeparator+
	  libdir+"cweb-extser-0.1-b2-dev.jar"+File.pathSeparator+
	  // ICU (unicode support).
	  libdir+"icu4j-3_6.jar"+File.pathSeparator+
	  // test suites only!
	  libdir+"junit-3.8.1.jar"+File.pathSeparator+
	  libdir+"cweb-junit-ext-1.1-b2-dev.jar"+File.pathSeparator+
	  // main bigdata JAR.
      libdir+"bigdata.jar"
	  ;

	/*    
	 * The name of the property file containing the configuration information for
	 * the service itself (where it will locate its files, etc).
	 */
    propertyFile = new File("src/test/com/bigdata/service/TestService.properties");

    static serviceDescriptors = new ServiceDescriptor[] {
                new NonActivatableServiceDescriptor(
                        codebase, policy, classpath,
                        "config.FileClassifierServerConfig",
                         new String[] { propertyFile})
    };

}

/*
 * Declares how the service will advertise itself.
 */
AdvertDescription {

	/*
	 * Entry attributes used to describe the service.
	 */
    entries = new Entry[] {
                new Comment("Test service"), // human facing comment.
                new Name("Test service"), // human facing name.
                new Location("floor","room","building"),
                new Address("street", "organization", "organizationalUnit",
                        "locality", "stateOrProvince", "postalCode",
                        "country"),
                new ServiceInfo("bigdata", // product or package name
                        "SYSTAP,LLC", // manufacturer
                        "SYSTAP,LLC", // vendor
                        "0.1-beta", // version
                        "bigdata", // model
                        "serial#" // serialNumber
                ) };

	/*
	 * Note: multicast discovery is always used if LookupDiscovery.ALL_GROUPS is
	 * specified.
	 */
//    groups = LookupDiscovery.ALL_GROUPS;
    groups = new String[]{"bigdata"};

	/*
	 * One or more unicast URIs of the form jini://host/ or jini://host:port/.
	 * This MAY be an empty array if you want to use multicast discovery _and_
	 * you have specified LookupDiscovery.ALL_GROUPS above.
	 */
    unicastLocators = new LookupLocator[] { // empty
    	new LookupLocator("jini://localhost/")
//    	new LookupLocator("jini://SYSTAP-BBT.systap.com/")
                                          };    

	/*                                          
	 * The file on which the serviceID will be written.
	 */
    serviceIdFile = new File("TestService.id"); 

}
