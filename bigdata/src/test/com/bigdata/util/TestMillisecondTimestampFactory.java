/**

The Notice below must appear in each file of the Source Code of any
copy you distribute of the Licensed Product.  Contributors to any
Modifications may add their own copyright notices to identify their
own contributions.

License:

The contents of this file are subject to the CognitiveWeb Open Source
License Version 1.1 (the License).  You may not copy or use this file,
in either source code or executable form, except in compliance with
the License.  You may obtain a copy of the License from

  http://www.CognitiveWeb.org/legal/license/

Software distributed under the License is distributed on an AS IS
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
the License for the specific language governing rights and limitations
under the License.

Copyrights:

Portions created by or assigned to CognitiveWeb are Copyright
(c) 2003-2003 CognitiveWeb.  All Rights Reserved.  Contact
information for CognitiveWeb is available at

  http://www.CognitiveWeb.org

Portions Copyright (c) 2002-2003 Bryan Thompson.

Acknowledgements:

Special thanks to the developers of the Jabber Open Source License 1.0
(JOSL), from which this License was derived.  This License contains
terms that differ from JOSL.

Special thanks to the CognitiveWeb Open Source Contributors for their
suggestions and support of the Cognitive Web.

Modifications:

*/
/*
 * Created on Oct 26, 2006
 */

package com.bigdata.util;

import junit.framework.TestCase;

/**
 * Test suite for {@link MillisecondTimestampFactory}.
 * 
 * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
 * @version $Id$
 */
public class TestMillisecondTimestampFactory extends TestCase {

    public TestMillisecondTimestampFactory() {
        
    }

    public TestMillisecondTimestampFactory(String arg0) {

        super(arg0);
        
    }

    /**
     * Test determines whether or not millisecond timestamps are always distinct
     * from the last generated timestamp (as assigned by
     * {@link System#currentTimeMillis()}.
     * <p>
     * Note: This test is NOT designed to pass/fail but simply to test determine
     * a characteristic of the platform on which it is executing.
     */
    public void test_nextTimestamp1() {

        final int limit = 3000;
        
        long lastTimestamp = System.currentTimeMillis();
        long timestamp;
        long minDiff = Long.MAX_VALUE;
        
        for( int i=0; i<limit; i++ ) {

            timestamp = System.currentTimeMillis();
            
            if( timestamp == lastTimestamp ) {
                
                System.err
                        .println("This platform can generate identical timestamps with millisecond resolution");

                return;
                
            }

            long diff = timestamp - lastTimestamp;
            
            if( diff < 0 ) diff = -diff;
            
            if( diff < minDiff ) minDiff = diff;
            
            lastTimestamp = timestamp;
            
        }
        
        System.err.println("Millisecond times appear to be distinct on this platorm.");

        System.err.println("The minimum difference in milliseconds is "
                + minDiff + " over " + limit + " trials");
        
    }
    
    /**
     * Test verifies that timestamps are always distinct from the last generated
     * timestamp as generated by
     * {@link MillisecondTimestampFactory#nextMillis()}.
     */
    public void test_nextTimestamp2() {

        final MillisecondTimestampFactory timestampFactory = new MillisecondTimestampFactory();
        
        final int limit = 1000;
        
        long lastTimestamp = System.currentTimeMillis() - 1;
        final long begin = lastTimestamp;
        long timestamp;
        long minDiff = Long.MAX_VALUE;
        
        for( int i=0; i<limit; i++ ) {

            timestamp = timestampFactory.nextMillis();
            
            if( timestamp == lastTimestamp ) fail("Same timestamp?");

            if( timestamp < lastTimestamp ) fail("Time goes backwards?");

            long diff = timestamp - lastTimestamp;
            
            if( diff < 0 ) diff = -diff;
            
            if( diff < minDiff ) minDiff = diff;
            
            lastTimestamp = timestamp;
            
        }
        
        long elapsed = lastTimestamp - begin;
        
        System.err.println("Minimum time difference is " + minDiff
                + " milliseconds over " + limit + " trials and "+elapsed+" milliseconds");
        
    }
    
}
