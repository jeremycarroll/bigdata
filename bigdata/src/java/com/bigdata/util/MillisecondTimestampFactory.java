/**

Copyright (C) SYSTAP, LLC 2006-2007.  All rights reserved.

Contact:
     SYSTAP, LLC
     4501 Tower Road
     Greensboro, NC 27410
     licenses@bigdata.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
/*
 * Created on Oct 26, 2006
 */

package com.bigdata.util;

/**
 * Timestamp factory class with no more than millisecond resolution.
 * 
 * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
 * @version $Id$
 */
public class MillisecondTimestampFactory {

    private long lastTimestamp = System.currentTimeMillis();

    public MillisecondTimestampFactory() {
        
    }
    
    /**
     * Generates a timestamp with no more than millisecond resolution that is
     * guarenteed to be distinct from the last timestamp generated by this
     * method assuming that your clock is not reset.
     * <p>
     * Note: This method is synchronized in order to make sure that concurrent
     * callers receive distinct timestamps.
     * 
     * @return A timestamp with no more millisecond resolution.
     * 
     * @see System#currentTimeMillis()
     */
    synchronized public long nextMillis() {

//        final long lastTimestamp = lastTimestamp;
        
        // current time.
        long timestamp = System.currentTimeMillis();;

//        // spin looking for a distinct timestamp.
//        for(int i=0; i<1000 && timestamp == lastMillisTime; i++) {
//
//            timestamp = System.currentTimeMillis();
//
//        }
        
        // if not distinct, then sleep waiting for a distinct timestamp.
        while (timestamp == lastTimestamp) {

            try {

                Thread.sleep(0,1);

            } catch (InterruptedException ex) {

                // ignore.

            }

            timestamp = System.currentTimeMillis();
            
        }

        if (timestamp < lastTimestamp) {

            throw new AssertionError(
                    "Milliseconds go backward: lastTimestamp="
                            + lastTimestamp + ", millisTime=" + timestamp);

        }

        lastTimestamp = timestamp;

        return timestamp;

    }

}
