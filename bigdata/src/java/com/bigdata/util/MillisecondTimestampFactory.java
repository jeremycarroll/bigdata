/**

The Notice below must appear in each file of the Source Code of any
copy you distribute of the Licensed Product.  Contributors to any
Modifications may add their own copyright notices to identify their
own contributions.

License:

The contents of this file are subject to the CognitiveWeb Open Source
License Version 1.1 (the License).  You may not copy or use this file,
in either source code or executable form, except in compliance with
the License.  You may obtain a copy of the License from

  http://www.CognitiveWeb.org/legal/license/

Software distributed under the License is distributed on an AS IS
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
the License for the specific language governing rights and limitations
under the License.

Copyrights:

Portions created by or assigned to CognitiveWeb are Copyright
(c) 2003-2003 CognitiveWeb.  All Rights Reserved.  Contact
information for CognitiveWeb is available at

  http://www.CognitiveWeb.org

Portions Copyright (c) 2002-2003 Bryan Thompson.

Acknowledgements:

Special thanks to the developers of the Jabber Open Source License 1.0
(JOSL), from which this License was derived.  This License contains
terms that differ from JOSL.

Special thanks to the CognitiveWeb Open Source Contributors for their
suggestions and support of the Cognitive Web.

Modifications:

*/
/*
 * Created on Oct 26, 2006
 */

package com.bigdata.util;

/**
 * Timestamp factory class with no more than millisecond resolution.
 * 
 * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
 * @version $Id$
 */
public class MillisecondTimestampFactory {

    private long lastTimestamp = System.currentTimeMillis();

    public MillisecondTimestampFactory() {
        
    }
    
    /**
     * Generates a timestamp with no more than millisecond resolution that is
     * guarenteed to be distinct from the last timestamp generated by this
     * method assuming that your clock is not reset.
     * <p>
     * Note: This method is synchronized in order to make sure that concurrent
     * callers receive distinct timestamps.
     * 
     * @return A timestamp with no more millisecond resolution.
     * 
     * @see System#currentTimeMillis()
     */
    synchronized public long nextMillis() {

//        final long lastTimestamp = lastTimestamp;
        
        // current time.
        long timestamp = System.currentTimeMillis();;

//        // spin looking for a distinct timestamp.
//        for(int i=0; i<1000 && timestamp == lastMillisTime; i++) {
//
//            timestamp = System.currentTimeMillis();
//
//        }
        
        // if not distinct, then sleep waiting for a distinct timestamp.
        while (timestamp == lastTimestamp) {

            try {

                Thread.sleep(0,1);

            } catch (InterruptedException ex) {

                // ignore.

            }

            timestamp = System.currentTimeMillis();
            
        }

        if (timestamp < lastTimestamp) {

            throw new AssertionError(
                    "Milliseconds go backward: lastTimestamp="
                            + lastTimestamp + ", millisTime=" + timestamp);

        }

        lastTimestamp = timestamp;

        return timestamp;

    }

}
