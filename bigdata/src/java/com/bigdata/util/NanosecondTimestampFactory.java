/**

The Notice below must appear in each file of the Source Code of any
copy you distribute of the Licensed Product.  Contributors to any
Modifications may add their own copyright notices to identify their
own contributions.

License:

The contents of this file are subject to the CognitiveWeb Open Source
License Version 1.1 (the License).  You may not copy or use this file,
in either source code or executable form, except in compliance with
the License.  You may obtain a copy of the License from

  http://www.CognitiveWeb.org/legal/license/

Software distributed under the License is distributed on an AS IS
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
the License for the specific language governing rights and limitations
under the License.

Copyrights:

Portions created by or assigned to CognitiveWeb are Copyright
(c) 2003-2003 CognitiveWeb.  All Rights Reserved.  Contact
information for CognitiveWeb is available at

  http://www.CognitiveWeb.org

Portions Copyright (c) 2002-2003 Bryan Thompson.

Acknowledgements:

Special thanks to the developers of the Jabber Open Source License 1.0
(JOSL), from which this License was derived.  This License contains
terms that differ from JOSL.

Special thanks to the CognitiveWeb Open Source Contributors for their
suggestions and support of the Cognitive Web.

Modifications:

*/
/*
 * Created on Oct 26, 2006
 */

package com.bigdata.util;

/**
 * Timestamp factory class with no more than nanosecond resolution - values
 * produced by this class MUST NOT be persisted.
 * <p>
 * Note: There are several problems with {@link System#nanoTime()} to date and
 * the values MUST NOT be persisted. The underlying problem is that the epoch
 * MAY (and in practice does) change from VM instance to VM instance, often when
 * the machine is rebooted. For this reason, nano time can appear to "go
 * backward" rendering it unsuitable for placing timestamps on commit records.
 * This means that we do not have access to time-based method with more than
 * millisecond resolution of creating "distinctions" for transaction
 * identifiers.
 * <p>
 * Note: Nano time could be made to work in a robust nano time service as long
 * as the base time for the service is adjusted on service start or rollover to
 * never go backward.
 * 
 * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
 * @version $Id$
 */
public class NanosecondTimestampFactory {

    static long lastNanoTime = System.nanoTime();

    /**
     * Generates a timestamp with nanosecond precision that is guarenteed to be
     * distinct from the last timestamp generated by this method within the same
     * VM instance.
     * 
     * @return A timestamp with nanosecond precision that MUST NOT be persisted.
     */
    public static long nextNanoTime() {

        final int limit = 1000;

        int i = 0;
        
        long nanoTime;
        
        do {
            
            nanoTime = System.nanoTime();
            
            if( i++ >= limit ) throw new AssertionError();
            
        } while( nanoTime == lastNanoTime );
        
        if(nanoTime<lastNanoTime) {

            throw new AssertionError("Nano time goes backward: lastNanoTime="
                    + lastNanoTime + ", nanoTime=" + nanoTime);
            
        }
        
        lastNanoTime = nanoTime;
        
        return nanoTime;
    
    }

}
