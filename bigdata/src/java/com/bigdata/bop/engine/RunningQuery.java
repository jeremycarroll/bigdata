/*

Copyright (C) SYSTAP, LLC 2006-2008.  All rights reserved.

Contact:
     SYSTAP, LLC
     4501 Tower Road
     Greensboro, NC 27410
     licenses@bigdata.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 */
/*
 * Created on Aug 31, 2010
 */
package com.bigdata.bop.engine;

import java.util.Iterator;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.log4j.Logger;

import com.bigdata.bop.BOp;
import com.bigdata.bop.BOpContext;
import com.bigdata.bop.BOpEvaluationContext;
import com.bigdata.bop.BOpUtility;
import com.bigdata.bop.IBindingSet;
import com.bigdata.bop.NoSuchBOpException;
import com.bigdata.bop.PipelineOp;
import com.bigdata.bop.solutions.SliceOp;
import com.bigdata.journal.IIndexManager;
import com.bigdata.journal.ITx;
import com.bigdata.relation.accesspath.BlockingBuffer;
import com.bigdata.relation.accesspath.IAsynchronousIterator;
import com.bigdata.relation.accesspath.IBlockingBuffer;
import com.bigdata.service.IBigdataFederation;
import com.bigdata.striterator.ICloseableIterator;
import com.bigdata.util.concurrent.Haltable;

/**
 * Metadata about running queries.
 */
public class RunningQuery implements Future<Void>, IRunningQuery {

    private final static transient Logger log = Logger
            .getLogger(RunningQuery.class);

    /**
     * Logger for the {@link ChunkTask}.
     */
    private final static Logger chunkTaskLog = Logger
            .getLogger(ChunkTask.class);

    /**
     * Error message used when an operation which must be performed on the query
     * controller is attempted on some other {@link IQueryPeer}.
     */
    static protected final String ERR_NOT_CONTROLLER = "Operator only permitted on the query controller";
    
    /**
     * The class executing the query on this node.
     */
    final private QueryEngine queryEngine;

    /** The unique identifier for this query. */
    final private UUID queryId;

    /**
     * The query deadline. The value is the system clock time in milliseconds
     * when the query is due and {@link Long#MAX_VALUE} if there is no deadline.
     * In order to have a guarantee of a consistent clock, the deadline is
     * interpreted by the query controller.
     */
    final private AtomicLong deadline = new AtomicLong(Long.MAX_VALUE);

    /**
     * <code>true</code> iff the outer {@link QueryEngine} is the controller for
     * this query.
     */
    final private boolean controller;

    /**
     * The client executing this query (aka the query controller).
     * <p>
     * Note: The proxy is primarily for light weight RMI messages used to
     * coordinate the distributed query evaluation. Ideally, all large objects
     * will be transfered among the nodes of the cluster using NIO buffers.
     */
    final private IQueryClient clientProxy;

    /** The query. */
    final private PipelineOp query;

    /**
     * An index from the {@link BOp.Annotations#BOP_ID} to the {@link BOp}. This
     * index is generated by the constructor. It is immutable and thread-safe.
     */
    protected final Map<Integer, BOp> bopIndex;

    /**
     * The run state of the query and the result of the computation iff it
     * completes execution normally (without being interrupted, cancelled, etc).
     */
    final private Haltable<Void> future = new Haltable<Void>();

    /**
     * A collection of {@link Future}s for currently executing operators for
     * this query.
     */
    private final ConcurrentHashMap<BSBundle, Future<?>> operatorFutures = new ConcurrentHashMap<BSBundle, Future<?>>();

    /**
     * The runtime statistics for each {@link BOp} in the query and
     * <code>null</code> unless this is the query controller.
     */
    final private ConcurrentHashMap<Integer/* bopId */, BOpStats> statsMap;

    /**
     * The buffer used for the overall output of the query pipeline.
     * <p>
     * Note: This only exists on the query controller, and then only when the
     * top-level operator is not a mutation. In order to ensure that the results
     * are transferred to the query controller in scale-out, the top-level
     * operator in the query plan must specify
     * {@link BOpEvaluationContext#CONTROLLER}. For example, {@link SliceOp}
     * uses this {@link BOpEvaluationContext}.
     */
    final private IBlockingBuffer<IBindingSet[]> queryBuffer;

    /**
     * The iterator draining the {@link #queryBuffer} and <code>null</code> iff
     * the {@link #queryBuffer} is <code>null</code>.
     */
    final private IAsynchronousIterator<IBindingSet[]> queryIterator;

    /**
     * A lock guarding various state changes. This guards changes to the
     * internal state of the {@link #runState} object. It is also used to
     * serialize requests to {@link #acceptChunk(IChunkMessage)} and
     * {@link #cancel(boolean)}.
     * 
     * @see RunState
     */
    private final ReentrantLock lock = new ReentrantLock();

    /**
     * The run state of this query and <code>null</code> unless this is the
     * query controller.
     */
    final private RunState runState;

    /**
     * Flag used to prevent retriggering of {@link #lifeCycleTearDownQuery()}.
     */
    final AtomicBoolean didQueryTearDown = new AtomicBoolean(false);

    /**
     * The chunks available for immediate processing (they must have been
     * materialized).
     * <p>
     * Note: This is package private so it will be visible to the
     * {@link QueryEngine}.
     */
    final/* private */BlockingQueue<IChunkMessage<IBindingSet>> chunksIn = new LinkedBlockingDeque<IChunkMessage<IBindingSet>>();

    /**
     * Set the query deadline. The query will be cancelled when the deadline is
     * passed. If the deadline is passed, the query is immediately cancelled.
     * 
     * @param deadline
     *            The deadline.
     * @throws IllegalArgumentException
     *             if the deadline is non-positive.
     * @throws IllegalStateException
     *             if the deadline was already set.
     * @throws UnsupportedOperationException
     *             unless node is the query controller.
     */
    public void setDeadline(final long deadline) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (deadline <= 0)
            throw new IllegalArgumentException();

        // set the deadline.
        if (!this.deadline
                .compareAndSet(Long.MAX_VALUE/* expect */, deadline/* update */)) {

            // the deadline is already set.
            throw new IllegalStateException();

        }

        if (deadline < System.currentTimeMillis()) {

            // deadline has already expired.
            halt(new TimeoutException());

        }

    }

    /**
     * Return the query deadline (the time at which it will terminate regardless
     * of its run state).
     * 
     * @return The query deadline (milliseconds since the epoch) and
     *         {@link Long#MAX_VALUE} if no explicit deadline was specified.
     */
    public long getDeadline() {

        return deadline.get();

    }

    /**
     * The class executing the query on this node.
     */
    public QueryEngine getQueryEngine() {

        return queryEngine;

    }

    /**
     * The client executing this query (aka the query controller).
     * <p>
     * Note: The proxy is primarily for light weight RMI messages used to
     * coordinate the distributed query evaluation. Ideally, all large objects
     * will be transfered among the nodes of the cluster using NIO buffers.
     */
    public IQueryClient getQueryController() {

        return clientProxy;

    }

    /**
     * The unique identifier for this query.
     */
    public UUID getQueryId() {

        return queryId;

    }

    /**
     * Return the operator tree for this query.
     */
    public PipelineOp getQuery() {

        return query;

    }

    /**
     * Return <code>true</code> iff this is the query controller.
     */
    public boolean isController() {

        return controller;

    }

    /**
     * Return the current statistics for the query and <code>null</code> unless
     * this is the query controller. There will be a single entry in the map for
     * each distinct {@link PipelineOp}. The map entries are inserted when we
     * first begin to run an instance of that operator on some
     * {@link IChunkMessage}.
     */
    public Map<Integer/* bopId */, BOpStats> getStats() {

        return statsMap;

    }

    /**
     * @param queryEngine
     *            The {@link QueryEngine} on which the query is running. In
     *            scale-out, a query is typically instantiated on many
     *            {@link QueryEngine}s.
     * @param queryId
     *            The identifier for that query.
     * @param controller
     *            <code>true</code> iff the {@link QueryEngine} is the query
     *            controller for this query (the {@link QueryEngine} which will
     *            coordinate the query evaluation).
     * @param clientProxy
     *            The query controller. In standalone, this is the same as the
     *            <i>queryEngine</i>. In scale-out, this is a proxy for the
     *            query controller whenever the query is instantiated on a node
     *            other than the query controller itself.
     * @param query
     *            The query.
     * 
     * @throws IllegalArgumentException
     *             if any argument is <code>null</code>.
     * @throws IllegalArgumentException
     *             if the <i>readTimestamp</i> is {@link ITx#UNISOLATED}
     *             (queries may not read on the unisolated indices).
     * @throws IllegalArgumentException
     *             if the <i>writeTimestamp</i> is neither
     *             {@link ITx#UNISOLATED} nor a read-write transaction
     *             identifier.
     */
    public RunningQuery(final QueryEngine queryEngine, final UUID queryId,
            final boolean controller, final IQueryClient clientProxy,
            final PipelineOp query) {

        if (queryEngine == null)
            throw new IllegalArgumentException();

        if (queryId == null)
            throw new IllegalArgumentException();

        if (clientProxy == null)
            throw new IllegalArgumentException();

        if (query == null)
            throw new IllegalArgumentException();

        this.queryEngine = queryEngine;

        this.queryId = queryId;

        this.controller = controller;

        this.clientProxy = clientProxy;

        this.query = query;

        this.bopIndex = BOpUtility.getIndex(query);

        /*
         * Setup the BOpStats object for each pipeline operator in the query.
         */
        if (controller) {
            
            runState = new RunState(this);

            statsMap = createStatsMap(bopIndex);

            if (!query.isMutation()) {

                final BOpStats queryStats = statsMap.get(query.getId());

                queryBuffer = query.newBuffer(queryStats);

                queryIterator = new QueryResultIterator<IBindingSet[]>(this,
                        queryBuffer.iterator());

            } else {

                // Note: Not used for mutation queries.
                queryBuffer = null;
                queryIterator = null;

            }

        } else {

            runState = null; // Note: only on the query controller.
            statsMap = null; // Note: only on the query controller.
            queryBuffer = null; // Note: only on the query controller.
            queryIterator = null; // Note: only when queryBuffer is defined.
            
        }

    }

    /**
     * Pre-populate a map with {@link BOpStats} objects for a query.
     * 
     * @param bopIndex
     *            A map of the operators in the query which have assigned
     *            bopIds.
     * 
     * @return A new map with an entry for each operator with a bopId which
     *         associates that operator with its {@link BOpStats} object.
     */
    static private ConcurrentHashMap<Integer, BOpStats> createStatsMap(
            final Map<Integer, BOp> bopIndex) {

        ConcurrentHashMap<Integer, BOpStats> statsMap = new ConcurrentHashMap<Integer, BOpStats>();

        for (Map.Entry<Integer, BOp> e : bopIndex.entrySet()) {

            final int bopId = e.getKey();

            final BOp tmp = e.getValue();

            if ((tmp instanceof PipelineOp)) {

                final PipelineOp bop = (PipelineOp) tmp;

                statsMap.put(bopId, bop.newStats());

            }

        }

        return statsMap;

    }
    
    /**
     * Take a chunk generated by some pass over an operator and make it
     * available to the target operator. How this is done depends on whether the
     * query is running against a standalone database or the scale-out database.
     * <p>
     * Note: The return value is used as part of the termination criteria for
     * the query.
     * <p>
     * The default implementation supports a standalone database. The generated
     * chunk is left on the Java heap and handed off synchronously using
     * {@link QueryEngine#acceptChunk(IChunkMessage)}. That method will queue
     * the chunk for asynchronous processing.
     * 
     * @param bop
     *            The operator which wrote on the sink.
     * @param sinkId
     *            The identifier of the target operator.
     * @param sink
     *            The intermediate results to be passed to that target operator.
     * 
     * @return The #of {@link IChunkMessage} sent. This will always be ONE (1)
     *         for scale-up. For scale-out, there will be at least one
     *         {@link IChunkMessage} per index partition over which the
     *         intermediate results were mapped.
     */
    protected <E> int handleOutputChunk(final BOp bop, final int sinkId,
            final IBlockingBuffer<IBindingSet[]> sink) {

        if (bop == null)
            throw new IllegalArgumentException();

        if (sink == null)
            throw new IllegalArgumentException();

        /*
         * Note: The partitionId will always be -1 in scale-up.
         */
        final int partitionId = -1;

        final boolean oneMessagePerChunk = bop.getProperty(
                QueryEngineTestAnnotations.ONE_MESSAGE_PER_CHUNK,
                QueryEngineTestAnnotations.DEFAULT_ONE_MESSAGE_PER_CHUNK);

        if (oneMessagePerChunk) {

            final IAsynchronousIterator<IBindingSet[]> itr = sink.iterator();

            int nchunks = 0;

            while (itr.hasNext()) {

                final IBlockingBuffer<IBindingSet[]> tmp = new BlockingBuffer<IBindingSet[]>(
                        1);

                tmp.add(itr.next());

                tmp.close();

                final LocalChunkMessage<IBindingSet> chunk = new LocalChunkMessage<IBindingSet>(
                        clientProxy, queryId, sinkId, partitionId, tmp
                                .iterator());

                queryEngine.acceptChunk(chunk);

                nchunks++;

            }

            return nchunks;

        }

        final LocalChunkMessage<IBindingSet> chunk = new LocalChunkMessage<IBindingSet>(
                clientProxy, queryId, sinkId, partitionId, sink.iterator());

        queryEngine.acceptChunk(chunk);

        return 1;

    }

    /**
     * Make a chunk of binding sets available for consumption by the query.
     * <p>
     * Note: this is invoked by {@link QueryEngine#acceptChunk(IChunkMessage)}
     * 
     * @param msg
     *            The chunk.
     */
    protected void acceptChunk(final IChunkMessage<IBindingSet> msg) {

        if (msg == null)
            throw new IllegalArgumentException();

        if (!msg.isMaterialized())
            throw new IllegalStateException();

        lock.lock();
        
        try {

            // verify still running.
            if (future.isDone()) {
                throw new RuntimeException("Query is done", future.getCause());
            }

            // add chunk to be consumed.
            chunksIn.add(msg);

            if (log.isDebugEnabled())
                log
                        .debug("chunksIn.size()=" + chunksIn.size() + ", msg="
                                + msg);
        } finally {

            lock.unlock();

        }

    }

    /**
     * Invoked once by the query controller with the initial
     * {@link IChunkMessage} which gets the query moving.
     */
    void startQuery(final IChunkMessage<IBindingSet> msg) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (msg == null)
            throw new IllegalArgumentException();

        if (!queryId.equals(msg.getQueryId()))
            throw new IllegalArgumentException();

        lock.lock();

        try {

            lifeCycleSetUpQuery();

            runState.startQuery(msg);

        } catch (TimeoutException ex) {

            halt(ex);

        } finally {

            lock.unlock();

        }

    }

    /**
     * Message provides notice that the operator has started execution and will
     * consume some specific number of binding set chunks.
     * 
     * @param msg
     *            The {@link StartOpMessage}.
     * 
     * @throws UnsupportedOperationException
     *             If this node is not the query coordinator.
     */
    public void startOp(final StartOpMessage msg) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (msg == null)
            throw new IllegalArgumentException();
        
        if (!queryId.equals(msg.queryId))
            throw new IllegalArgumentException();

        lock.lock();

        try {

            if (runState.startOp(msg))
                lifeCycleSetUpOperator(msg.bopId);

        } catch (TimeoutException ex) {

            halt(ex);

        } finally {

            lock.unlock();

        }

    }

    /**
     * Message provides notice that the operator has ended execution. The
     * termination conditions for the query are checked. (For scale-out, the
     * node node controlling the query needs to be involved for each operator
     * start/stop in order to make the termination decision atomic).
     * 
     * @param msg
     *            The {@link HaltOpMessage}
     * 
     * @throws UnsupportedOperationException
     *             If this node is not the query coordinator.
     */
    public void haltOp(final HaltOpMessage msg) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (msg == null)
            throw new IllegalArgumentException();
        
        if (!queryId.equals(msg.queryId))
            throw new IllegalArgumentException();

        lock.lock();

        try {

            // update per-operator statistics.
            final BOpStats tmp = statsMap.putIfAbsent(msg.bopId, msg.taskStats);

            // combine stats, but do not combine a stats object with itself.
            if (tmp != null && tmp != msg.taskStats) {
                tmp.add(msg.taskStats);
            }

            if (runState.haltOp(msg)) {

                /*
                 * No more chunks can appear for this operator so invoke its end
                 * of life cycle hook.
                 */

                lifeCycleTearDownOperator(msg.bopId);

                if (runState.isAllDone()) {

                    // Normal termination.
                    halt();

                }

            }

        } catch (Throwable t) {

            halt(t);

        } finally {

            lock.unlock();

        }

    }

    /**
     * Hook invoked the first time the given operator is evaluated for the
     * query. This may be used to set up life cycle resources for the operator,
     * such as a distributed hash table on a set of nodes identified by
     * annotations of the operator.
     * 
     * @param bopId
     *            The operator identifier.
     */
    protected void lifeCycleSetUpOperator(final int bopId) {

        if (log.isTraceEnabled())
            log.trace("queryId=" + queryId + ", bopId=" + bopId);

    }

    /**
     * Hook invoked the after the given operator has been evaluated for the
     * query for what is known to be the last time. This may be used to tear
     * down life cycle resources for the operator, such as a distributed hash
     * table on a set of nodes identified by annotations of the operator.
     * 
     * @param bopId
     *            The operator identifier.
     */
    protected void lifeCycleTearDownOperator(final int bopId) {

        if (log.isTraceEnabled())
            log.trace("queryId=" + queryId + ", bopId=" + bopId);

    }

    /**
     * Hook invoked the before any operator is evaluated for the query. This may
     * be used to set up life cycle resources for the query.
     */
    protected void lifeCycleSetUpQuery() {

        if (log.isTraceEnabled())
            log.trace("queryId=" + queryId);

    }

    /**
     * Hook invoked when the query terminates. This may be used to tear down
     * life cycle resources for the query.
     */
    protected void lifeCycleTearDownQuery() {

        if (log.isTraceEnabled())
            log.trace("queryId=" + queryId);

    }

    /**
     * Return a {@link FutureTask} which will consume the binding set chunk. The
     * caller must run the {@link FutureTask}.
     * 
     * @param chunk
     *            A chunk to be consumed.
     */
    @SuppressWarnings("unchecked")
    protected FutureTask<Void> newChunkTask(
            final IChunkMessage<IBindingSet> chunk) {

        // create runnable to evaluate a chunk for an operator and partition.
        final ChunkTask chunkTask = new ChunkTask(chunk);

        // wrap runnable.
        final FutureTask<Void> f2 = new FutureTask(chunkTask, null/* result */);

        final BSBundle bundle = new BSBundle(chunk.getBOpId(), chunk
                .getPartitionId());
        
        // add to list of active futures for this query.
        if (operatorFutures.put(bundle, f2) != null) {
            /*
             * FIXME This indicates that we have more than one future for the
             * same (bopId,shardId). When this is true we are losing track of
             * with the consequence that we can not properly cancel them.
             * Instead of losing track like this, we should be targeting the
             * running operator instance with the new chunk. This needs to be
             * done atomically.
             */
//            throw new AssertionError();
        }

        // return : caller will execute.
        return f2;

    }

    /*
     * @todo Possible class to give us more information about a running operator
     * so we can attach a new chunk to the source for a running instance. An
     * alternative is to attach the same sinks to each instance of the operator,
     * but then we get into trouble with the operator implementations which will
     * close their sinks when they get to the bottom of their processing loop.
     */
//    private static class RunningFutureContext {
//
//        private final Future<Void> f;
//        private final BOpContext<IBindingSet> context;
//        private final ChunkTask chunkTask;
//
//        public RunningFutureContext(final Future<Void> f,
//                final BOpContext<IBindingSet> context, final ChunkTask chunkTask) {
//            this.f = f;
//            this.context = context;
//            this.chunkTask = chunkTask;
//        }
//        
//        public void addMessage(final IChunkMessage<IBindingSet> msg) {
//            context.getSource();
//            throw new UnsupportedOperationException();
//        }
//        
//    }
    
    /**
     * Runnable evaluates an operator for some chunk of inputs. In scale-out,
     * the operator may be evaluated against some partition of a scale-out
     * index.
     */
    private class ChunkTask implements Runnable {

        /** Alias for the {@link ChunkTask}'s logger. */
        private final Logger log = chunkTaskLog;

        /**
         * The message with the materialized chunk to be consumed by the
         * operator.
         */
        final IChunkMessage<IBindingSet> msg;

        /** The index of the bop which is being evaluated. */
        private final int bopId;

        /**
         * The index partition against which the operator is being evaluated and
         * <code>-1</code> if the operator is not being evaluated against a
         * shard.
         */
        private final int partitionId;

        /** The operator which is being evaluated. */
        private final BOp bop;

        /**
         * The index of the operator which is the default sink for outputs
         * generated by this evaluation. This is the
         * {@link BOp.Annotations#BOP_ID} of the parent of this operator. This
         * will be <code>null</code> if the operator does not have a parent and
         * is not a query since no outputs will be generated in that case.
         */
        private final Integer sinkId;

        /**
         * The index of the operator which is the alternative sink for outputs
         * generated by this evaluation. This is <code>null</code> unless the
         * operator explicitly specifies an alternative sink using
         * {@link PipelineOp.Annotations#ALT_SINK_REF}.
         */
        private final Integer altSinkId;

        /**
         * The sink on which outputs destined for the {@link #sinkId} operator
         * will be written and <code>null</code> if {@link #sinkId} is
         * <code>null</code>.
         */
        private final IBlockingBuffer<IBindingSet[]> sink;

        /**
         * The sink on which outputs destined for the {@link #altSinkId}
         * operator will be written and <code>null</code> if {@link #altSinkId}
         * is <code>null</code>.
         */
        private final IBlockingBuffer<IBindingSet[]> altSink;

        /**
         * The evaluation context for this operator.
         */
        private final BOpContext<IBindingSet> context;

        /**
         * {@link FutureTask} which evaluates the operator (evaluation is
         * delegated to this {@link FutureTask}).
         */
        private final FutureTask<Void> ft;

        /**
         * Create a task to consume a chunk. This looks up the {@link BOp} which
         * is the target for the message in the {@link RunningQuery#bopIndex},
         * creates the sink(s) for the {@link BOp}, creates the
         * {@link BOpContext} for that {@link BOp}, and wraps the value returned
         * by {@link PipelineOp#eval(BOpContext)} in order to handle
         * the outputs written on those sinks.
         * 
         * @param msg
         *            A message containing the materialized chunk and metadata
         *            about the operator which will consume that chunk.
         * 
         * @throws IllegalStateException
         *             unless {@link IChunkMessage#isMaterialized()} is
         *             <code>true</code>.
         */
        public ChunkTask(final IChunkMessage<IBindingSet> msg) {

            if (msg == null)
                throw new IllegalArgumentException();
            
            if (!msg.isMaterialized())
                throw new IllegalStateException();
            
            this.msg = msg;
            
            bopId = msg.getBOpId();
            
            partitionId = msg.getPartitionId();
            
            bop = bopIndex.get(bopId);
            
            if (bop == null)
                throw new NoSuchBOpException(bopId);
            
            if (!(bop instanceof PipelineOp))
                throw new UnsupportedOperationException(bop.getClass()
                        .getName());

            // self
            final PipelineOp op = ((PipelineOp) bop);

            // parent (null if this is the root of the operator tree).
            final BOp p = BOpUtility.getParent(query, op);

            /*
             * The sink is the parent. The parent MUST have an id so we can
             * target it with a message. (The sink will be null iff there is no
             * parent for this operator.)
             */
            sinkId = getEffectiveDefaultSink(bop, p);

            // altSink (null when not specified).
            altSinkId = (Integer) op
                    .getProperty(PipelineOp.Annotations.ALT_SINK_REF);

            if (altSinkId != null && !bopIndex.containsKey(altSinkId))
                throw new NoSuchBOpException(altSinkId);

            if (altSinkId != null && sinkId == null) {
                throw new RuntimeException(
                        "The primary sink must be defined if the altSink is defined: "
                                + bop);
            }

//            if (sinkId != null && altSinkId != null
//                    && sinkId.intValue() == altSinkId.intValue()) {
//                throw new RuntimeException(
//                        "The primary and alternative sink may not be the same operator: "
//                                + bop);
//            }

            /*
             * Setup the BOpStats object. For some operators, e.g., SliceOp,
             * this MUST be the same object across all invocations of that
             * instance of that operator for this query. This is marked by the
             * PipelineOp#isSharedState() method and is handled by a
             * putIfAbsent() pattern when that method returns true.
             * 
             * Note: RunState#haltOp() avoids adding a BOpStats object to itself
             * since that would cause double counting when the same object is
             * used for each invocation of the operator.
             * 
             * @todo If we always pass in a shared stats object then we will
             * have live reporting on all instances of the task evaluating each
             * operator in the query but there could be more contention for the
             * counters. However, if we chain the operators together then we are
             * likely to run one task instance per operator, at least in
             * standalone.  Try it w/ always shared and see if there is a hot
             * spot?
             */
            final BOpStats stats;
            if (((PipelineOp) bop).isSharedState()) {
//                final BOpStats foo = op.newStats();
//                final BOpStats bar = statsMap.putIfAbsent(bopId, foo);
//                stats = (bar == null ? foo : bar);
                stats = statsMap.get(bopId);
            } else {
                stats = op.newStats();
            }
            assert stats != null;

            sink = (p == null ? queryBuffer : op.newBuffer(stats));

            altSink = altSinkId == null ? null
                    : altSinkId.equals(sinkId) ? sink : op.newBuffer(stats);

            // context : @todo pass in IChunkMessage or IChunkAccessor
            context = new BOpContext<IBindingSet>(RunningQuery.this,
                    partitionId, stats, msg.getChunkAccessor().iterator(),
                    sink, altSink);

            // FutureTask for operator execution (not running yet).
            if ((ft = op.eval(context)) == null)
                throw new RuntimeException("No future: " + op);

        }

        /**
         * Return the effective default sink.
         * 
         * @param bop
         *            The operator.
         * @param p
         *            The parent of that operator, if any.
         */
        private Integer getEffectiveDefaultSink(final BOp bop, final BOp p) {

            if (bop == null)
                throw new IllegalArgumentException();

            Integer sink;

            // Explicitly specified sink?
            sink = (Integer) bop.getProperty(PipelineOp.Annotations.SINK_REF);

            if (sink == null) {
                if (p == null) {
                    // No parent, so no sink.
                    return null;
                }
                // The parent is the sink.
                sink = (Integer) p
                        .getRequiredProperty(BOp.Annotations.BOP_ID);
            }

            return sink;

        }
        
        /**
         * Evaluate the {@link IChunkMessage}.
         */
        public void run() {
            final UUID serviceId = queryEngine.getServiceUUID();
            final int messagesIn = 1; // accepted one IChunkMessage.
            int sinkMessagesOut = 0; // #of chunk messages out to sink.
            int altSinkMessagesOut = 0; // #of chunk messages out to altSink.
            try {
                clientProxy.startOp(new StartOpMessage(queryId, bopId,
                        partitionId, serviceId, messagesIn));
                if (log.isDebugEnabled())
                    log.debug("Running chunk: " + msg);
                ft.run(); // run
                ft.get(); // verify success
                if (sink != null && sink != queryBuffer && !sink.isEmpty()) {
                    if (sinkId == null)
                        throw new RuntimeException("sinkId not defined: bopId="
                                + bopId + ", query="
                                + BOpUtility.toString(query));
                    /*
                     * Handle sink output, sending appropriate chunk message(s).
                     * 
                     * Note: This maps output over shards/nodes in s/o.
                     */
                    sinkMessagesOut += handleOutputChunk(bop, sinkId, sink);
                }
                if (altSink != null && altSink != queryBuffer
                        && !altSink.isEmpty()) {
                    if (altSinkId == null)
                        throw new RuntimeException(
                                "altSinkId not defined: bopId=" + bopId
                                        + ", query="
                                        + BOpUtility.toString(query));
                    /*
                     * Handle alt sink output, sending appropriate chunk
                     * message(s).
                     * 
                     * Note: This maps output over shards/nodes in s/o.
                     */
                    altSinkMessagesOut += handleOutputChunk(bop, altSinkId,
                            altSink);
                }
                // Send message to controller.
                try {
                    final HaltOpMessage msg = new HaltOpMessage(queryId, bopId,
                            partitionId, serviceId, null/* cause */, sinkId,
                            sinkMessagesOut, altSinkId, altSinkMessagesOut,
                            context.getStats());
                    context.getExecutorService().execute(
                            new SendHaltMessageTask(clientProxy, msg,
                                    RunningQuery.this));
                } catch (RejectedExecutionException ex) {
                    // e.g., service is shutting down.
                    log.error("Could not send message: " + msg, ex);
                }
            } catch (Throwable t) {

                // Log an error.
                log.error("queryId=" + queryId + ", bopId=" + bopId, t);

                /*
                 * Mark the query as halted on this node regardless of whether
                 * we are able to communicate with the query controller.
                 * 
                 * Note: Invoking halt(t) here will log an error. This logged
                 * error message is necessary in order to catch errors in
                 * clientProxy.haltOp() (above and below).
                 */
                final Throwable firstCause = halt(t);

                try {
                    /*
                     * Queue a task to send the halt message to the query
                     * controller.
                     */
                    final HaltOpMessage msg = new HaltOpMessage(queryId, bopId,
                            partitionId, serviceId, firstCause, sinkId,
                            sinkMessagesOut, altSinkId, altSinkMessagesOut,
                            context.getStats());
                    context.getExecutorService().execute(
                            new SendHaltMessageTask(clientProxy, msg,
                                    RunningQuery.this));
                } catch (RejectedExecutionException ex) {
                    // e.g., service is shutting down.
                    log.error("Could not send message: " + msg, ex);
                } catch (Throwable ex) {
                    log.error("Could not send message: " + msg + " : "
                                    + ex, ex);
                }
            
            }

        } // run()

    } // class ChunkTask

    /**
     * {@link Runnable} sends the {@link IQueryClient} a message indicating that
     * some query has halted on some node. This is used to send such messages
     * asynchronously
     * 
     * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan
     *         Thompson</a>
     * @version $Id$
     */
    private static class SendHaltMessageTask implements Runnable {

        private final IQueryClient clientProxy;

        private final HaltOpMessage msg;

        private final RunningQuery q;

        public SendHaltMessageTask(final IQueryClient clientProxy,
                final HaltOpMessage msg, final RunningQuery q) {

            if (clientProxy == null)
                throw new IllegalArgumentException();

            if (msg == null)
                throw new IllegalArgumentException();

            if (q == null)
                throw new IllegalArgumentException();

            this.clientProxy = clientProxy;

            this.msg = msg;

            this.q = q;

        }

        public void run() {
            try {
                clientProxy.haltOp(msg);
            } catch (Throwable e) {
                log.error("Could not notify query controller: " + e, e);
                q.cancel(true/* mayInterruptIfRunning */);
            }
        }

    }

    /**
     * Return an iterator which will drain the solutions from the query. The
     * query will be cancelled if the iterator is
     * {@link ICloseableIterator#close() closed}.
     * 
     * @throws UnsupportedOperationException
     *             if this is not the query controller.
     */
    public IAsynchronousIterator<IBindingSet[]> iterator() {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (queryIterator == null)
            throw new UnsupportedOperationException();

        return queryIterator;

    }

    public void halt() {

        lock.lock();

        try {

            // signal normal completion.
            future.halt((Void) null);

            // interrupt anything which is running.
            cancel(true/* mayInterruptIfRunning */);

        } finally {

            lock.unlock();

        }

    }

    /**
     * Cancel the query (abnormal termination).
     * 
     * @param t
     *            The cause.
     *            
     * @return The first cause.
     * 
     * @throws IllegalArgumentException
     *             if the argument is <code>null</code>.
     */
    public Throwable halt(final Throwable t) {

        if (t == null)
            throw new IllegalArgumentException();

        lock.lock();

        try {

            log.error(toString(), t);

            try {

                // signal error condition.
                return future.halt(t);

            } finally {
                
                // interrupt anything which is running.
                cancel(true/* mayInterruptIfRunning */);

            }

        } finally {

            lock.unlock();

        }

    }

    /**
     * {@inheritDoc}
     * <p>
     * Cancelled queries :
     * <ul>
     * <li>must reject new chunks</li>
     * <li>must cancel any running operators</li>
     * <li>must not begin to evaluate operators</li>
     * <li>must release all of their resources</li>
     * <li>must not cause the solutions to be discarded before the client can
     * consume them.</li>
     * </ul>
     */
    final public boolean cancel(final boolean mayInterruptIfRunning) {
        lock.lock();
        try {
            // halt the query.
            boolean cancelled = future.cancel(mayInterruptIfRunning);
            if (didQueryTearDown
                    .compareAndSet(false/* expect */, true/* update */)) {
                /*
                 * Do additional cleanup exactly once.
                 */
                // cancel any running operators for this query on this node.
                cancelled |= cancelRunningOperators(mayInterruptIfRunning);
                if (controller) {
                    // cancel query on other peers.
                    cancelled |= cancelQueryOnPeers(future.getCause());
                }
                if (queryBuffer != null) {
                    /*
                     * Close the query buffer so the iterator draining the query
                     * results will recognize that no new results will become
                     * available.
                     */
                    queryBuffer.close();
                }
                // life cycle hook for the end of the query.
                lifeCycleTearDownQuery();
            }
            // remove from the collection of running queries.
            queryEngine.halt(this);
            // true iff we cancelled something.
            return cancelled;
        } finally {
            lock.unlock();
        }
    }

    /**
     * Cancel any running operators for this query on this node.
     * <p>
     * Note: This will wind up invoking the tear down methods for each operator
     * which was running or which could have been re-triggered.
     * 
     * @return <code>true</code> if any operators were cancelled.
     */
    private boolean cancelRunningOperators(final boolean mayInterruptIfRunning) {
        
        boolean cancelled = false;
        
        final Iterator<Future<?>> fitr = operatorFutures.values().iterator();
        
        while (fitr.hasNext()) {
        
            final Future<?> f = fitr.next();
            
            try {
            
                if (f.cancel(mayInterruptIfRunning))
                    cancelled = true;

            } finally {
                
                fitr.remove();
                
            }

        }
     
        return cancelled;
        
    }

    /**
     * Cancel the query on each node where it is known to be running.
     * <p>
     * Note: The default implementation verifies that the caller is holding the
     * {@link #lock} but is otherwise a NOP. This is overridden for scale-out.
     * 
     * @param cause
     *            When non-<code>null</code>, the cause.
     * 
     * @return <code>true</code> iff something was cancelled.
     * 
     * @throws IllegalMonitorStateException
     *             unless the {@link #lock} is held by the current thread.
     * @throws UnsupportedOperationException
     *             unless this is the query controller.
     */
    protected boolean cancelQueryOnPeers(final Throwable cause) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);
        
        if (!lock.isHeldByCurrentThread())
            throw new IllegalMonitorStateException();

        return false;

    }

    final public Void get() throws InterruptedException, ExecutionException {

        return future.get();

    }

    final public Void get(long arg0, TimeUnit arg1)
            throws InterruptedException, ExecutionException, TimeoutException {

        return future.get(arg0, arg1);

    }

    final public boolean isCancelled() {

        return future.isCancelled();

    }

    final public boolean isDone() {

        return future.isDone();

    }

    public IBigdataFederation<?> getFederation() {

        return queryEngine.getFederation();

    }

    public IIndexManager getIndexManager() {

        return queryEngine.getIndexManager();

    }

    public String toString() {
        final StringBuilder sb = new StringBuilder(getClass().getName());
        sb.append("{queryId=" + queryId);
        sb.append(",deadline=" + deadline.get());
        sb.append(",isDone=" + isDone());
        sb.append(",isCancelled=" + isCancelled());
        sb.append(",runState=" + runState);
        sb.append(",controller=" + controller);
        sb.append(",clientProxy=" + clientProxy);
        sb.append(",query=" + query);
        sb.append("}");
        return sb.toString();
    }

}
