/*

Copyright (C) SYSTAP, LLC 2006-2008.  All rights reserved.

Contact:
     SYSTAP, LLC
     4501 Tower Road
     Greensboro, NC 27410
     licenses@bigdata.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 */
/*
 * Created on Aug 31, 2010
 */
package com.bigdata.bop.engine;

import java.util.Iterator;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.log4j.Logger;

import com.bigdata.bop.BOp;
import com.bigdata.bop.BOpContext;
import com.bigdata.bop.BOpEvaluationContext;
import com.bigdata.bop.BOpUtility;
import com.bigdata.bop.IBindingSet;
import com.bigdata.bop.NoSuchBOpException;
import com.bigdata.bop.PipelineOp;
import com.bigdata.bop.solutions.SliceOp;
import com.bigdata.io.DirectBufferPoolAllocator.IAllocationContext;
import com.bigdata.journal.IIndexManager;
import com.bigdata.journal.ITx;
import com.bigdata.relation.accesspath.BlockingBuffer;
import com.bigdata.relation.accesspath.IAsynchronousIterator;
import com.bigdata.relation.accesspath.IBlockingBuffer;
import com.bigdata.relation.accesspath.MultiplexBlockingBuffer;
import com.bigdata.service.IBigdataFederation;
import com.bigdata.striterator.ICloseableIterator;
import com.bigdata.util.concurrent.Haltable;

/**
 * Metadata about running queries.
 */
public class RunningQuery implements Future<Void>, IRunningQuery {

    private final static transient Logger log = Logger
            .getLogger(RunningQuery.class);

    /**
     * Logger for the {@link ChunkTask}.
     */
    private final static Logger chunkTaskLog = Logger
            .getLogger(ChunkTask.class);

    /**
     * Error message used when an operation which must be performed on the query
     * controller is attempted on some other {@link IQueryPeer}.
     */
    static protected final String ERR_NOT_CONTROLLER = "Operator only permitted on the query controller";
    
    /**
     * The class executing the query on this node.
     */
    final private QueryEngine queryEngine;

    /** The unique identifier for this query. */
    final private UUID queryId;

    /**
     * The query deadline. The value is the system clock time in milliseconds
     * when the query is due and {@link Long#MAX_VALUE} if there is no deadline.
     * In order to have a guarantee of a consistent clock, the deadline is
     * interpreted by the query controller.
     */
    final private AtomicLong deadline = new AtomicLong(Long.MAX_VALUE);

    /**
     * <code>true</code> iff the outer {@link QueryEngine} is the controller for
     * this query.
     */
    final private boolean controller;

    /**
     * The client executing this query (aka the query controller).
     * <p>
     * Note: The proxy is primarily for light weight RMI messages used to
     * coordinate the distributed query evaluation. Ideally, all large objects
     * will be transfered among the nodes of the cluster using NIO buffers.
     */
    final private IQueryClient clientProxy;

    /** The query. */
    final private PipelineOp query;

//    /**
//     * @see QueryEngineTestAnnotations#COMBINE_RECEIVED_CHUNKS
//     */
//    final protected boolean combineReceivedChunks;
    
    /**
     * An index from the {@link BOp.Annotations#BOP_ID} to the {@link BOp}. This
     * index is generated by the constructor. It is immutable and thread-safe.
     */
    protected final Map<Integer, BOp> bopIndex;

    /**
     * The run state of the query and the result of the computation iff it
     * completes execution normally (without being interrupted, cancelled, etc).
     */
    final private Haltable<Void> future = new Haltable<Void>();

    /**
     * A collection of (bopId,partitionId) keys mapped onto a collection of
     * operator task evaluation contexts for currently executing operators for
     * this query.
     * 
     * @todo Futures are not being cleared from this collection as operators
     *       complete. This should be done systematically in order to ensure
     *       that any allocations associated with an operator task execution are
     *       released in a timely manner for long-running operators. (In fact,
     *       the {@link IAllocationContext} should take care of most of the
     *       issues here but we could still wind up with a lot of entries in
     *       this map in scale-out where there can be up to one per bop per
     *       shard in a given query.)
     */
    private final ConcurrentHashMap<BSBundle, ChunkFutureTask> operatorFutures;

    /**
     * The runtime statistics for each {@link BOp} in the query and
     * <code>null</code> unless this is the query controller.
     */
    final private ConcurrentHashMap<Integer/* bopId */, BOpStats> statsMap;

    /**
     * When running in stand alone, we can chain together the operators and have
     * much higher throughput. Each operator has an {@link BlockingBuffer} which
     * is essentially its input queue. The operator will drain its input queue
     * using {@link BlockingBuffer#iterator()}.
     * <p>
     * Each operator closes its {@link IBlockingBuffer} sink(s) once its own
     * source has been closed and it has finished processing that source. Since
     * multiple producers can target the same operator, we need a means to
     * ensure that the source for the target operator is not closed until each
     * producer which targets that operator has closed its corresponding sink.
     * <p>
     * In order to support this many-to-one producer/consumer pattern, we wrap
     * the input queue (a {@link BlockingBuffer}) for each operator having
     * multiple sources with a {@link MultiplexBlockingBuffer}. This class gives
     * each producer their own view on the underlying {@link BlockingBuffer}.
     * The underlying {@link BlockingBuffer} will not be closed until all
     * source(s) have closed their view of that buffer. This collection keeps
     * track of the {@link MultiplexBlockingBuffer} wrapping the
     * {@link BlockingBuffer} which is the input queue for each operator.
     * <p>
     * The input queues themselves are {@link BlockingBuffer} objects. Those
     * objects are available from this map using
     * {@link MultiplexBlockingBuffer#getBackingBuffer()}. These buffers are
     * pre-allocated by {@link #populateInputBufferMap(BOp)}.
     * {@link #startTasks(BOp)} is responsible for starting the operator tasks
     * in a "back-to-front" order. {@link #startQuery(IChunkMessage)} kicks off
     * the query and invokes {@link #startTasks(BOp)} to chain the input queues
     * and output queues together (when so chained, the output queues are skins
     * over the input queues obtained from {@link MultiplexBlockingBuffer}).
     * 
     * FIXME The inputBufferMap will let us construct consumer producer chains
     * where the consumer _waits_ for all producer(s) which target the consumer
     * to close the sink associated with that consumer. Unlike when attaching an
     * {@link IChunkMessage} to an already running operator, the consumer will
     * NOT terminate (due to lack up input) until each running producer
     * terminating that consumer terminates. This will improve concurrency,
     * result in fewer task instances, and have better throughput than attaching
     * a chunk to an already running task. However, in scale-out we will have
     * tasks running on different nodes so we can not always chain together the
     * producer and consumer in this tightly integrated manner.
     */
    final private ConcurrentHashMap<Integer/*operator*/, MultiplexBlockingBuffer<IBindingSet[]>/*inputQueue*/> inputBufferMap;

    /**
     * The buffer used for the overall output of the query pipeline.
     * <p>
     * Note: This only exists on the query controller, and then only when the
     * top-level operator is not a mutation. In order to ensure that the results
     * are transferred to the query controller in scale-out, the top-level
     * operator in the query plan must specify
     * {@link BOpEvaluationContext#CONTROLLER}. For example, {@link SliceOp}
     * uses this {@link BOpEvaluationContext}.
     */
    final private IBlockingBuffer<IBindingSet[]> queryBuffer;

    /**
     * The iterator draining the {@link #queryBuffer} and <code>null</code> iff
     * the {@link #queryBuffer} is <code>null</code>.
     */
    final private IAsynchronousIterator<IBindingSet[]> queryIterator;

    /**
     * A lock guarding various state changes. This guards changes to the
     * internal state of the {@link #runState} object. It is also used to
     * serialize requests to {@link #acceptChunk(IChunkMessage)} and
     * {@link #cancel(boolean)} and make atomic decision concerning whether to
     * attach a new {@link IChunkMessage} to an operator task which is already
     * running or to start a new task for that message.
     * 
     * @see RunState
     */
    private final ReentrantLock lock = new ReentrantLock();

    /**
     * The run state of this query and <code>null</code> unless this is the
     * query controller.
     */
    final private RunState runState;

    /**
     * Flag used to prevent retriggering of {@link #lifeCycleTearDownQuery()}.
     */
    final AtomicBoolean didQueryTearDown = new AtomicBoolean(false);

    /**
     * The chunks available for immediate processing (they must have been
     * materialized).
     * <p>
     * Note: This is package private so it will be visible to the
     * {@link QueryEngine}.
     */
    final/* private */BlockingQueue<IChunkMessage<IBindingSet>> chunksIn = new LinkedBlockingDeque<IChunkMessage<IBindingSet>>();

    /**
     * Set the query deadline. The query will be cancelled when the deadline is
     * passed. If the deadline is passed, the query is immediately cancelled.
     * 
     * @param deadline
     *            The deadline.
     * @throws IllegalArgumentException
     *             if the deadline is non-positive.
     * @throws IllegalStateException
     *             if the deadline was already set.
     * @throws UnsupportedOperationException
     *             unless node is the query controller.
     */
    public void setDeadline(final long deadline) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (deadline <= 0)
            throw new IllegalArgumentException();

        // set the deadline.
        if (!this.deadline
                .compareAndSet(Long.MAX_VALUE/* expect */, deadline/* update */)) {

            // the deadline is already set.
            throw new IllegalStateException();

        }

        if (deadline < System.currentTimeMillis()) {

            // deadline has already expired.
            halt(new TimeoutException());

        }

    }

    /**
     * Return the query deadline (the time at which it will terminate regardless
     * of its run state).
     * 
     * @return The query deadline (milliseconds since the epoch) and
     *         {@link Long#MAX_VALUE} if no explicit deadline was specified.
     */
    public long getDeadline() {

        return deadline.get();

    }

    /**
     * The class executing the query on this node.
     */
    public QueryEngine getQueryEngine() {

        return queryEngine;

    }

    /**
     * The client executing this query (aka the query controller).
     * <p>
     * Note: The proxy is primarily for light weight RMI messages used to
     * coordinate the distributed query evaluation. Ideally, all large objects
     * will be transfered among the nodes of the cluster using NIO buffers.
     */
    public IQueryClient getQueryController() {

        return clientProxy;

    }

    /**
     * The unique identifier for this query.
     */
    public UUID getQueryId() {

        return queryId;

    }

    /**
     * Return the operator tree for this query.
     */
    public PipelineOp getQuery() {

        return query;

    }

    /**
     * Return <code>true</code> iff this is the query controller.
     */
    public boolean isController() {

        return controller;

    }

    /**
     * Return the current statistics for the query and <code>null</code> unless
     * this is the query controller. There will be a single entry in the map for
     * each distinct {@link PipelineOp}. The map entries are inserted when we
     * first begin to run an instance of that operator on some
     * {@link IChunkMessage}.
     */
    public Map<Integer/* bopId */, BOpStats> getStats() {

        return statsMap;

    }

    /**
     * @param queryEngine
     *            The {@link QueryEngine} on which the query is running. In
     *            scale-out, a query is typically instantiated on many
     *            {@link QueryEngine}s.
     * @param queryId
     *            The identifier for that query.
     * @param controller
     *            <code>true</code> iff the {@link QueryEngine} is the query
     *            controller for this query (the {@link QueryEngine} which will
     *            coordinate the query evaluation).
     * @param clientProxy
     *            The query controller. In standalone, this is the same as the
     *            <i>queryEngine</i>. In scale-out, this is a proxy for the
     *            query controller whenever the query is instantiated on a node
     *            other than the query controller itself.
     * @param query
     *            The query.
     * 
     * @throws IllegalArgumentException
     *             if any argument is <code>null</code>.
     * @throws IllegalArgumentException
     *             if the <i>readTimestamp</i> is {@link ITx#UNISOLATED}
     *             (queries may not read on the unisolated indices).
     * @throws IllegalArgumentException
     *             if the <i>writeTimestamp</i> is neither
     *             {@link ITx#UNISOLATED} nor a read-write transaction
     *             identifier.
     */
    public RunningQuery(final QueryEngine queryEngine, final UUID queryId,
            final boolean controller, final IQueryClient clientProxy,
            final PipelineOp query) {

        if (queryEngine == null)
            throw new IllegalArgumentException();

        if (queryId == null)
            throw new IllegalArgumentException();

        if (clientProxy == null)
            throw new IllegalArgumentException();

        if (query == null)
            throw new IllegalArgumentException();

        this.queryEngine = queryEngine;

        this.queryId = queryId;

        this.controller = controller;

        this.clientProxy = clientProxy;

        this.query = query;

//        combineReceivedChunks = query.getProperty(
//                QueryEngineTestAnnotations.COMBINE_RECEIVED_CHUNKS,
//                QueryEngineTestAnnotations.DEFAULT_COMBINE_RECEIVED_CHUNKS);

        this.bopIndex = BOpUtility.getIndex(query);

        this.operatorFutures = new ConcurrentHashMap<BSBundle, ChunkFutureTask>();
        
        /*
         * Setup the BOpStats object for each pipeline operator in the query.
         */
        if (controller) {
            
            runState = new RunState(this);

            statsMap = new ConcurrentHashMap<Integer, BOpStats>();

            populateStatsMap(query);

            if (!query.isMutation()) {

                final BOpStats queryStats = statsMap.get(query.getId());

                queryBuffer = query.newBuffer(queryStats);

                queryIterator = new QueryResultIterator<IBindingSet[]>(this,
                        queryBuffer.iterator());

            } else {

                // Note: Not used for mutation queries.
                queryBuffer = null;
                queryIterator = null;

            }

        } else {

            runState = null; // Note: only on the query controller.
            statsMap = null; // Note: only on the query controller.
            queryBuffer = null; // Note: only on the query controller.
            queryIterator = null; // Note: only when queryBuffer is defined.
            
        }

        if(!queryEngine.isScaleOut()) {
            /*
             * Since the query engine is using the stand alone database mode we
             * will now setup the input queues for each operator. Those queues
             * will be used by each operator which targets a given operator.
             * Each operator will start once and will run until all of its
             * source(s) are closed.
             * 
             * This allocates the buffers in a top-down manner (this is the
             * reverse of the pipeline evaluation order). Allocation halts at if
             * we reach an operator without children (e.g., StartOp) or an
             * operator which is a CONTROLLER (Union). (If allocation does not
             * halt at those boundaries then we can allocate buffers which will
             * not be used. On the one hand, the StartOp receives a message
             * containing the chunk to be evaluated. On the other hand, the
             * buffers are not shared between the parent and a subquery so
             * allocation within the subquery is wasted. This is also true for
             * the [statsMap].)
             */
            inputBufferMap = null;
//            inputBufferMap = new ConcurrentHashMap<Integer, MultiplexBlockingBuffer<IBindingSet[]>>();
//            populateInputBufferMap(query);
        } else {
            inputBufferMap = null;
        }
        
    }

    /**
     * Pre-populate a map with {@link BOpStats} objects for the query.  Operators
     * in subqueries are not visited since they will be assigned {@link BOpStats}
     * objects when they are run as a subquery.
     */
    private void populateStatsMap(final BOp op) {

        if(!(op instanceof PipelineOp))
            return;
        
        final PipelineOp bop = (PipelineOp) op;

        final int bopId = bop.getId();
        
        statsMap.put(bopId, bop.newStats());

        if (!op.getProperty(BOp.Annotations.CONTROLLER,
                BOp.Annotations.DEFAULT_CONTROLLER)) {
            /*
             * Visit children, but not if this is a CONTROLLER operator since
             * its children belong to a subquery.
             */
            for (BOp t : op.args()) {
                // visit children (recursion)
                populateStatsMap(t);
            }
        }
        
    }
    
//    /**
//     * Pre-populate a map with {@link MultiplexBlockingBuffer} objects for the
//     * query. Operators in subqueries are not visited since they will be
//     * assigned buffer objects when they are run as a subquery. Operators
//     * without children are not visited since they can not be the targets of
//     * some other operator and hence do not need to have an assigned input
//     * buffer.
//     */
//    private void populateInputBufferMap(final BOp op) {
//
//        if(!(op instanceof PipelineOp))
//            return;
//
//        if (op.arity() == 0)
//            return;
//        
//        final PipelineOp bop = (PipelineOp) op;
//
//        final int bopId = bop.getId();
//        
//        inputBufferMap.put(bopId, new MultiplexBlockingBuffer<IBindingSet[]>(
//                bop.newBuffer(statsMap.get(bopId))));
//
//        if (!op.getProperty(BOp.Annotations.CONTROLLER,
//                BOp.Annotations.DEFAULT_CONTROLLER)) {
//            /*
//             * Visit children, but not if this is a CONTROLLER operator since
//             * its children belong to a subquery.
//             */
//            for (BOp t : op.args()) {
//                // visit children (recursion)
//                populateInputBufferMap(t);
//            }
//        }
//
//    }

    /**
     * Take a chunk generated by some pass over an operator and make it
     * available to the target operator. How this is done depends on whether the
     * query is running against a standalone database or the scale-out database.
     * <p>
     * Note: The return value is used as part of the termination criteria for
     * the query.
     * <p>
     * The default implementation supports a standalone database. The generated
     * chunk is left on the Java heap and handed off synchronously using
     * {@link QueryEngine#acceptChunk(IChunkMessage)}. That method will queue
     * the chunk for asynchronous processing.
     * 
     * @param bop
     *            The operator which wrote on the sink.
     * @param sinkId
     *            The identifier of the target operator.
     * @param sink
     *            The intermediate results to be passed to that target operator.
     * 
     * @return The #of {@link IChunkMessage} sent. This will always be ONE (1)
     *         for scale-up. For scale-out, there will be at least one
     *         {@link IChunkMessage} per index partition over which the
     *         intermediate results were mapped.
     */
    protected <E> int handleOutputChunk(final BOp bop, final int sinkId,
            final IBlockingBuffer<IBindingSet[]> sink) {

        if (bop == null)
            throw new IllegalArgumentException();

        if (sink == null)
            throw new IllegalArgumentException();

        if (inputBufferMap != null && inputBufferMap.get(sinkId) != null) {
            /*
             * FIXME The sink is just a wrapper for the input buffer so we do
             * not need to do anything to propagate the data from one operator
             * to the next.
             */
            return 0;
        }
        
        /*
         * Note: The partitionId will always be -1 in scale-up.
         */
        final int partitionId = -1;

        final boolean oneMessagePerChunk = bop.getProperty(
                QueryEngineTestAnnotations.ONE_MESSAGE_PER_CHUNK,
                QueryEngineTestAnnotations.DEFAULT_ONE_MESSAGE_PER_CHUNK);

        if (oneMessagePerChunk) {

            final IAsynchronousIterator<IBindingSet[]> itr = sink.iterator();

            int nchunks = 0;

            while (itr.hasNext()) {

                final IBlockingBuffer<IBindingSet[]> tmp = new BlockingBuffer<IBindingSet[]>(
                        1);

                tmp.add(itr.next());

                tmp.close();

                final LocalChunkMessage<IBindingSet> chunk = new LocalChunkMessage<IBindingSet>(
                        clientProxy, queryId, sinkId, partitionId, tmp
                                .iterator());

                queryEngine.acceptChunk(chunk);

                nchunks++;

            }

            return nchunks;

        }

        final LocalChunkMessage<IBindingSet> chunk = new LocalChunkMessage<IBindingSet>(
                clientProxy, queryId, sinkId, partitionId, sink.iterator());

        queryEngine.acceptChunk(chunk);

        return 1;

    }

    /**
     * Make a chunk of binding sets available for consumption by the query.
     * <p>
     * Note: this is invoked by {@link QueryEngine#acceptChunk(IChunkMessage)}
     * 
     * @param msg
     *            The chunk.
     * 
     * @todo Does this method really need the {@link #lock}? I doubt it since
     *       {@link #chunksIn} is thread-safe.
     */
    protected void acceptChunk(final IChunkMessage<IBindingSet> msg) {

        if (msg == null)
            throw new IllegalArgumentException();

        if (!msg.isMaterialized())
            throw new IllegalStateException();

        lock.lock();
        
        try {

            // verify still running.
            if (future.isDone()) {
                throw new RuntimeException("Query is done", future.getCause());
            }

            // add chunk to be consumed.
            chunksIn.add(msg);

            if (log.isDebugEnabled())
                log
                        .debug("chunksIn.size()=" + chunksIn.size() + ", msg="
                                + msg);
        } finally {

            lock.unlock();

        }

    }

    /**
     * Invoked once by the query controller with the initial
     * {@link IChunkMessage} which gets the query moving.
     */
    void startQuery(final IChunkMessage<IBindingSet> msg) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (msg == null)
            throw new IllegalArgumentException();

        if (!queryId.equals(msg.getQueryId()))
            throw new IllegalArgumentException();

        lock.lock();

        try {

            lifeCycleSetUpQuery();

            runState.startQuery(msg);

//            if (inputBufferMap != null) {
//                // Prestart a task for each operator.
//                startTasks(query);
//            }

        } catch (TimeoutException ex) {

            halt(ex);

        } finally {

            lock.unlock();

        }

    }

//    /**
//     * Prestart a task for each operator. The operators are started in
//     * back-to-front order (reverse pipeline evaluation order). The input queues
//     * for the operators were created in by {@link #populateInputBufferMap(BOp)}
//     * and are found in {@link #inputBufferMap}. The output queues for the
//     * operators are skins over the output queues obtained from
//     * {@link MultiplexBlockingBuffer}.
//     * 
//     * @param op
//     *            The
//     * 
//     * @see #inputBufferMap
//     */
//    private void startTasks(final BOp op) {
//
//        if(!(op instanceof PipelineOp))
//            return;
//
//        if (op.arity() == 0)
//            return;
//        
//        final PipelineOp bop = (PipelineOp) op;
//
//        final int bopId = bop.getId();
//
//        final MultiplexBlockingBuffer<IBindingSet[]> inputBuffer = inputBufferMap
//                .get(bopId);
//
//        if (inputBuffer == null)
//            throw new AssertionError("No input buffer? " + op);
//
//        final IAsynchronousIterator<IBindingSet[]> src = inputBuffer
//                .getBackingBuffer().iterator();
//        
//        final ChunkTask chunkTask = new ChunkTask(bopId, -1/* partitionId */,
//                src);
//
//        final FutureTask<Void> futureTask = wrapChunkTask(chunkTask);
//        
//        queryEngine.execute(futureTask);
//
//        if (!op.getProperty(BOp.Annotations.CONTROLLER,
//                BOp.Annotations.DEFAULT_CONTROLLER)) {
//            /*
//             * Visit children, but not if this is a CONTROLLER operator since
//             * its children belong to a subquery.
//             */
//            for (BOp t : op.args()) {
//                // visit children (recursion)
//                startTasks(t);
//            }
//        }
//        
//    }
    
    /**
     * Message provides notice that the operator has started execution and will
     * consume some specific number of binding set chunks.
     * 
     * @param msg
     *            The {@link StartOpMessage}.
     * 
     * @throws UnsupportedOperationException
     *             If this node is not the query coordinator.
     */
    public void startOp(final StartOpMessage msg) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (msg == null)
            throw new IllegalArgumentException();
        
        if (!queryId.equals(msg.queryId))
            throw new IllegalArgumentException();

        lock.lock();

        try {

            if (runState.startOp(msg))
                lifeCycleSetUpOperator(msg.bopId);

        } catch (TimeoutException ex) {

            halt(ex);

        } finally {

            lock.unlock();

        }

    }

    /**
     * Message provides notice that the operator has ended execution. The
     * termination conditions for the query are checked. (For scale-out, the
     * node node controlling the query needs to be involved for each operator
     * start/stop in order to make the termination decision atomic).
     * 
     * @param msg
     *            The {@link HaltOpMessage}
     * 
     * @throws UnsupportedOperationException
     *             If this node is not the query coordinator.
     */
    public void haltOp(final HaltOpMessage msg) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (msg == null)
            throw new IllegalArgumentException();
        
        if (!queryId.equals(msg.queryId))
            throw new IllegalArgumentException();

        lock.lock();

        try {

            // update per-operator statistics.
            final BOpStats tmp = statsMap.putIfAbsent(msg.bopId, msg.taskStats);

            // combine stats, but do not combine a stats object with itself.
            if (tmp != null && tmp != msg.taskStats) {
                tmp.add(msg.taskStats);
            }

            if (runState.haltOp(msg)) {

                /*
                 * No more chunks can appear for this operator so invoke its end
                 * of life cycle hook.
                 */

                lifeCycleTearDownOperator(msg.bopId);

                if (runState.isAllDone()) {

                    // Normal termination.
                    halt();

                }

            }

        } catch (Throwable t) {

            halt(t);

        } finally {

            lock.unlock();

        }

    }

    /**
     * Hook invoked the first time the given operator is evaluated for the
     * query. This may be used to set up life cycle resources for the operator,
     * such as a distributed hash table on a set of nodes identified by
     * annotations of the operator.
     * 
     * @param bopId
     *            The operator identifier.
     */
    protected void lifeCycleSetUpOperator(final int bopId) {

        if (log.isTraceEnabled())
            log.trace("queryId=" + queryId + ", bopId=" + bopId);

    }

    /**
     * Hook invoked the after the given operator has been evaluated for the
     * query for what is known to be the last time. This may be used to tear
     * down life cycle resources for the operator, such as a distributed hash
     * table on a set of nodes identified by annotations of the operator.
     * 
     * @param bopId
     *            The operator identifier.
     */
    protected void lifeCycleTearDownOperator(final int bopId) {

        if (log.isTraceEnabled())
            log.trace("queryId=" + queryId + ", bopId=" + bopId);

    }

    /**
     * Hook invoked the before any operator is evaluated for the query. This may
     * be used to set up life cycle resources for the query.
     */
    protected void lifeCycleSetUpQuery() {

        if (log.isTraceEnabled())
            log.trace("queryId=" + queryId);

    }

    /**
     * Hook invoked when the query terminates. This may be used to tear down
     * life cycle resources for the query.
     */
    protected void lifeCycleTearDownQuery() {

        if (log.isTraceEnabled())
            log.trace("queryId=" + queryId);

    }

    /**
     * Consume zero or more chunks in the input queue for this query. The
     * chunk(s) will either be assigned to an already running task for the
     * target operator or they will be assigned to new tasks.
     * 
     * FIXME Drain the input queue, assigning any chunk waiting to a task. If
     * the task is already running, then add the chunk to that task. Otherwise
     * start a new task.
     */
    protected void consumeChunk() {
        final IChunkMessage<IBindingSet> msg = chunksIn.poll();
        if (msg == null)
            return;
        try {
            if (!msg.isMaterialized())
                throw new IllegalStateException();
            if (log.isTraceEnabled())
                log.trace("Accepted chunk: " + msg);
            final BSBundle bundle = new BSBundle(msg.getBOpId(), msg
                    .getPartitionId());
            /*
             * Look for instance of this task which is already running.
             */
            final ChunkFutureTask chunkFutureTask = operatorFutures.get(bundle);
            if (!queryEngine.isScaleOut() && chunkFutureTask != null) {
                /*
                 * Attempt to atomically attach the message as another src.
                 */
                if (chunkFutureTask.chunkTask.context.addSource(msg
                        .getChunkAccessor().iterator())) {
                    lock.lock();
                    try {
                        /*
                         * message was added to a running task.
                         * 
                         * FIXME This needs to be an RMI in scale-out back to
                         * the query controller so it can update the #of
                         * messages which are being consumed by this task.
                         * However, doing RMI here will add latency into the
                         * thread submitting tasks for evaluation and the
                         * coordination overhead of addSource() in scale-out may
                         * be too high. However, if we do not combine sources in
                         * scale-out then we may have too much overhead in terms
                         * of the #of running tasks with few tuples per task.
                         * Another approach is the remote async iterator with
                         * multiple sources (parallel multi source iterator).
                         * 
                         * FIXME This code path is NOT being taken in scale-out
                         * right now since it would not get the message to the
                         * query controller. We will need to add addSource() to
                         * IQueryClient parallel to startOp() and haltOp() for
                         * this to work.
                         */
                        runState.addSource(msg, queryEngine.getServiceUUID());
                        return;
                    } finally {
                        lock.unlock();
                    }
                }
            }
            // wrap runnable.
            final ChunkFutureTask ft = new ChunkFutureTask(new ChunkTask(msg));
            // add to list of active futures for this query.
            if (operatorFutures.put(bundle, ft) != null) {
                /*
                 * Note: This can cause the FutureTask to be accessible (above)
                 * before startOp() has been called for that ChunkTask (the
                 * latter occurs when the chunk task actually runs.) This a race
                 * condition has been resolved in RunState by allowing
                 * addSource() even when there is no registered task running for
                 * that [bopId].
                 * 
                 * FIXME This indicates that we have more than one future for
                 * the same (bopId,shardId). When this is true we are losing
                 * track of Futures with the consequence that we can not
                 * properly cancel them. Instead of losing track like this, we
                 * should be targeting the running operator instance with the
                 * new chunk. This needs to be done atomically, e.g., using the
                 * [lock].
                 * 
                 * Even if we only have one task per operator in standalone and
                 * we attach chunks to an already running task in scale-out,
                 * there is still the possibility in scale-out that a task may
                 * have closed its source but still be running, in which case we
                 * would lose the Future for the already running task when we
                 * start a new task for the new chunk for the target operator.
                 */
                // throw new AssertionError();
            }
            // submit task for execution (asynchronous).
            queryEngine.execute(ft);
        } catch (Throwable ex) {
            // halt query.
            throw new RuntimeException(halt(ex));
        }
    }
    
//    /**
//     * Return a {@link FutureTask} which will consume the binding set chunk. The
//     * caller must run the {@link FutureTask}.
//     * 
//     * @param chunk
//     *            A chunk to be consumed.
//     */
//    private FutureTask<Void> newChunkTask(
//            final IChunkMessage<IBindingSet> chunk) {
//
//        if (!chunk.isMaterialized())
//            throw new IllegalStateException();
//
//        // create runnable to evaluate a chunk for an operator and partition.
//        final ChunkTask chunkTask = new ChunkTask(chunk);
//
////        return wrapChunkTask(chunkTask);
////
////    }
////    
////    protected FutureTask<Void> wrapChunkTask(final ChunkTask chunkTask) {
//
//        final BSBundle bundle = new BSBundle(chunkTask.bopId,
//                chunkTask.partitionId);
//        
//        // wrap runnable.
//        final ChunkFutureTask f2 = new ChunkFutureTask(chunkTask);
//
//        // add to list of active futures for this query.
//        if (operatorFutures.put(bundle, f2) != null) {
//            /*
//             * FIXME This indicates that we have more than one future for the
//             * same (bopId,shardId). When this is true we are losing track of
//             * Futures with the consequence that we can not properly cancel
//             * them. Instead of losing track like this, we should be targeting
//             * the running operator instance with the new chunk. This needs to
//             * be done atomically, e.g., using the [lock].
//             * 
//             * Even if we only have one task per operator in standalone and we
//             * attach chunks to an already running task in scale-out, there is
//             * still the possibility in scale-out that a task may have closed
//             * its source but still be running, in which case we would lose the
//             * Future for the already running task when we start a new task for
//             * the new chunk for the target operator.
//             */
////            throw new AssertionError();
//        }
//
//        // return : caller will execute.
//        return f2;
//
//    }

    /**
     * A {@link FutureTask} which exposes the {@link ChunkTask} which is being
     * evaluated.
     */
    private class ChunkFutureTask extends FutureTask<Void> {

        public final ChunkTask chunkTask;

        public ChunkFutureTask(final ChunkTask chunkTask) {

//            super(chunkTask, null/* result */);

            // Note: wraps chunk task to ensure source and sinks get closed.
            super(new ChunkTaskWrapper(chunkTask), null/* result */);
            
            this.chunkTask = chunkTask;
            
        }

    }

    /**
     * Wraps the {@link ChunkTask} and handles various handshaking with the
     * {@link RunningQuery} and the {@link RunState}. Since starting and
     * stopping a {@link ChunkTask} requires handshaking with the query
     * controller, it is important that these actions take place once the task
     * has been submitted - otherwise they would be synchronous in the loop
     * which consumes available chunks and generates new {@link ChunkTask}s.
     */
    private class ChunkTaskWrapper implements Runnable {

        private final ChunkTask t;

        public ChunkTaskWrapper(final ChunkTask chunkTask) {

            if (chunkTask == null)
                throw new IllegalArgumentException();
            
            this.t = chunkTask;
            
        }
        
        public void run() {
            final UUID serviceId = queryEngine.getServiceUUID();
            final int messagesIn = 1; // accepted one IChunkMessage. FIXME
                                      // Problem when chaining buffers?
            try {
                /*
                 * Note: This is potentially an RMI back to the controller. It
                 * is invoked from within the running task in order to remove
                 * the latency for that RMI from the thread which submits tasks
                 * to consume chunks.
                 */
                clientProxy.startOp(new StartOpMessage(queryId, t.bopId,
                        t.partitionId, serviceId, messagesIn));
                t.call();
                // Send message to controller.
                final HaltOpMessage msg = new HaltOpMessage(queryId, t.bopId,
                        t.partitionId, serviceId, null/* cause */, t.sinkId,
                        t.sinkMessagesOut.get(), t.altSinkId,
                        t.altSinkMessagesOut.get(), t.context.getStats());
                try {
                    t.context.getExecutorService().execute(
                            new SendHaltMessageTask(clientProxy, msg,
                                    RunningQuery.this));
                } catch (RejectedExecutionException ex) {
                    // e.g., service is shutting down.
                    log.error("Could not send message: " + msg, ex);
                }
            } catch (Throwable ex1) {

                // Log an error.
                log.error("queryId=" + queryId + ", bopId=" + t.bopId, ex1);

                /*
                 * Mark the query as halted on this node regardless of whether
                 * we are able to communicate with the query controller.
                 * 
                 * Note: Invoking halt(t) here will log an error. This logged
                 * error message is necessary in order to catch errors in
                 * clientProxy.haltOp() (above and below).
                 */
                final Throwable firstCause = halt(ex1);

                final HaltOpMessage msg = new HaltOpMessage(queryId, t.bopId,
                        t.partitionId, serviceId, firstCause, t.sinkId,
                        t.sinkMessagesOut.get(), t.altSinkId,
                        t.altSinkMessagesOut.get(), t.context.getStats());
                try {
                    /*
                     * Queue a task to send the halt message to the query
                     * controller.
                     */
                    t.context.getExecutorService().execute(
                            new SendHaltMessageTask(clientProxy, msg,
                                    RunningQuery.this));
                } catch (RejectedExecutionException ex) {
                    // e.g., service is shutting down.
                    log.warn("Could not send message: " + msg, ex);
                } catch (Throwable ex) {
                    log
                            .error("Could not send message: " + msg + " : "
                                    + ex, ex);
                }

            }

        }
        
    }
    
//  final BOpContext<?> context = chunkTask.context;
//  context.getSource().close();
//  if (context.getSink() != null) {
//      context.getSink().close();
//  }
//  if (context.getSink2() != null) {
//      context.getSink2().close();
//  }

    /**
     * Runnable evaluates an operator for some chunk of inputs. In scale-out,
     * the operator may be evaluated against some partition of a scale-out
     * index.
     */
    private class ChunkTask implements Callable<Void> {

        /** Alias for the {@link ChunkTask}'s logger. */
        private final Logger log = chunkTaskLog;

//        /**
//         * The message with the materialized chunk to be consumed by the
//         * operator.
//         */
//        final IChunkMessage<IBindingSet> msg;

        /** The index of the bop which is being evaluated. */
        private final int bopId;

        /**
         * The index partition against which the operator is being evaluated and
         * <code>-1</code> if the operator is not being evaluated against a
         * shard.
         */
        private final int partitionId;

        /** The operator which is being evaluated. */
        private final BOp bop;

        /**
         * The index of the operator which is the default sink for outputs
         * generated by this evaluation. This is the
         * {@link BOp.Annotations#BOP_ID} of the parent of this operator. This
         * will be <code>null</code> if the operator does not have a parent and
         * is not a query since no outputs will be generated in that case.
         */
        private final Integer sinkId;

        /**
         * The index of the operator which is the alternative sink for outputs
         * generated by this evaluation. This is <code>null</code> unless the
         * operator explicitly specifies an alternative sink using
         * {@link PipelineOp.Annotations#ALT_SINK_REF}.
         */
        private final Integer altSinkId;

        /**
         * The sink on which outputs destined for the {@link #sinkId} operator
         * will be written and <code>null</code> if {@link #sinkId} is
         * <code>null</code>.
         */
        private final IBlockingBuffer<IBindingSet[]> sink;

        /**
         * The sink on which outputs destined for the {@link #altSinkId}
         * operator will be written and <code>null</code> if {@link #altSinkId}
         * is <code>null</code>.
         */
        private final IBlockingBuffer<IBindingSet[]> altSink;

        /**
         * The evaluation context for this operator.
         */
        private final BOpContext<IBindingSet> context;

        /**
         * {@link FutureTask} which evaluates the operator (evaluation is
         * delegated to this {@link FutureTask}).
         */
        private final FutureTask<Void> ft;

        /** #of chunk messages out to sink. */
        final AtomicInteger sinkMessagesOut = new AtomicInteger(0);

        /** #of chunk messages out to altSink. */
        final AtomicInteger altSinkMessagesOut = new AtomicInteger(0);

        /**
         * A human readable representation of the {@link ChunkTask}'s state.
         */
        public String toString() {
            return "ChunkTask" + //
                    "{query=" + queryId + //
                    ",bopId=" + bopId + //
                    ",partitionId=" + partitionId + //
                    ",sinkId=" + sinkId + //
                    ",altSinkId=" + altSinkId + //
                    "}";
        }

        /**
         * Create a task to consume a chunk. 
         * 
         * @param msg
         *            A message containing the materialized chunk and metadata
         *            about the operator which will consume that chunk.
         * 
         * @throws IllegalStateException
         *             unless {@link IChunkMessage#isMaterialized()} is
         *             <code>true</code>.
         */
        public ChunkTask(final IChunkMessage<IBindingSet> msg) {

            this(msg.getBOpId(), msg.getPartitionId(), msg.getChunkAccessor()
                    .iterator());

        }

//        /**
//         * Alternative constructor used when chaining the operators together in
//         * standalone. The input queue of an operator is wrapped and used as the
//         * output queue of each operator which targets that operator as either
//         * its default or alternative sink.
//         */
//        public ChunkTask(final int bopId) {
//         
//            this(bopId, -1/* partitionId */, inputBufferMap.get(bopId)
//                    .getBackingBuffer().iterator());
//            
//        }

        /**
         * Core implementation.
         * <p>
         * This looks up the {@link BOp} which is the target for the message in
         * the {@link RunningQuery#bopIndex}, creates the sink(s) for the
         * {@link BOp}, creates the {@link BOpContext} for that {@link BOp}, and
         * wraps the value returned by {@link PipelineOp#eval(BOpContext)} in
         * order to handle the outputs written on those sinks.
         * 
         * @param bopId
         *            The operator to which the message was addressed.
         * @param partitionId
         *            The partition identifier to which the message was
         *            addressed.
         * @param source
         *            Where the task will read its inputs.
         */
        public ChunkTask(final int bopId, final int partitionId,
                final IAsynchronousIterator<IBindingSet[]> src) {

            this.bopId = bopId;
            
            this.partitionId = partitionId;
            
            bop = bopIndex.get(bopId);
            
            if (bop == null)
                throw new NoSuchBOpException(bopId);
            
            if (!(bop instanceof PipelineOp))
                throw new UnsupportedOperationException(bop.getClass()
                        .getName());

            // self
            final PipelineOp op = ((PipelineOp) bop);

            // parent (null if this is the root of the operator tree).
            final BOp p = BOpUtility.getParent(query, op);

            /*
             * The sink is the parent. The parent MUST have an id so we can
             * target it with a message. (The sink will be null iff there is no
             * parent for this operator.)
             */
            sinkId = BOpUtility.getEffectiveDefaultSink(bop, p);

            // altSink (null when not specified).
            altSinkId = (Integer) op
                    .getProperty(PipelineOp.Annotations.ALT_SINK_REF);

            if (altSinkId != null && !bopIndex.containsKey(altSinkId))
                throw new NoSuchBOpException(altSinkId);

            if (altSinkId != null && sinkId == null) {
                throw new RuntimeException(
                        "The primary sink must be defined if the altSink is defined: "
                                + bop);
            }

            /*
             * Setup the BOpStats object. For some operators, e.g., SliceOp,
             * this MUST be the same object across all invocations of that
             * instance of that operator for this query. This is marked by the
             * PipelineOp#isSharedState() method and is handled by a
             * putIfAbsent() pattern when that method returns true.
             * 
             * Note: RunState#haltOp() avoids adding a BOpStats object to itself
             * since that would cause double counting when the same object is
             * used for each invocation of the operator.
             * 
             * Note: By using a shared stats object we have live reporting on
             * all instances of the task which are being evaluated on the query
             * controller (tasks running on peers always have distinct stats
             * objects and those stats are aggregated when the task finishes).
             */
            final BOpStats stats;
            if (((PipelineOp) bop).isSharedState() || statsMap != null) {
                // shared stats object.
                stats = statsMap.get(bopId);
            } else {
                // distinct stats objects, aggregated as each task finishes.
                stats = op.newStats();
            }
            assert stats != null;

            sink = (p == null ? queryBuffer : newBuffer(op, sinkId, stats));

            altSink = altSinkId == null ? null
                    : altSinkId.equals(sinkId) ? sink : newBuffer(op, sinkId,
                            stats);

            // context : @todo pass in IChunkMessage or IChunkAccessor
            context = new BOpContext<IBindingSet>(RunningQuery.this,
                    partitionId, stats, src, sink, altSink);

            // FutureTask for operator execution (not running yet).
            if ((ft = op.eval(context)) == null)
                throw new RuntimeException("No future: " + op);

        }

        /**
         * Factory returns the {@link IBlockingBuffer} on which the operator
         * should write its outputs which target the specified <i>sinkId</i>.
         * 
         * @param op
         *            The operator whose evaluation task is being constructed.
         * @param sinkId
         *            The identifier for an operator which which the task will
         *            write its solutions (either the primary or alternative
         *            sink).
         * @param stats
         *            The statistics object for the evaluation of the operator.
         *            
         * @return The buffer on which the operator should write outputs which
         *         target that sink.
         */
        private IBlockingBuffer<IBindingSet[]> newBuffer(final PipelineOp op,
                final int sinkId, final BOpStats stats) {

            final MultiplexBlockingBuffer<IBindingSet[]> factory = inputBufferMap == null ? null
                    : inputBufferMap.get(sinkId);

            if (factory != null) {

                return factory.newInstance();

            }

            return op.newBuffer(stats);
            
        }

        /**
         * Evaluate the {@link IChunkMessage}.
         */
        public Void call() throws Exception {
            if (log.isDebugEnabled())
                log.debug("Running chunk: " + this);
            ft.run(); // run
            ft.get(); // verify success
            if (sink != null && sink != queryBuffer && !sink.isEmpty()) {
                if (sinkId == null)
                    throw new RuntimeException("sinkId not defined: bopId="
                            + bopId + ", query=" + BOpUtility.toString(query));
                /*
                 * Handle sink output, sending appropriate chunk message(s).
                 * 
                 * Note: This maps output over shards/nodes in s/o.
                 */
                sinkMessagesOut.addAndGet(handleOutputChunk(bop, sinkId, sink));
            }
            if (altSink != null && altSink != queryBuffer && !altSink.isEmpty()) {
                if (altSinkId == null)
                    throw new RuntimeException("altSinkId not defined: bopId="
                            + bopId + ", query=" + BOpUtility.toString(query));
                /*
                 * Handle alt sink output, sending appropriate chunk message(s).
                 * 
                 * Note: This maps output over shards/nodes in s/o.
                 */
                altSinkMessagesOut.addAndGet(handleOutputChunk(bop, altSinkId,
                        altSink));
            }
            // Done.
            return null;
        } // call()

    } // class ChunkTask

    /**
     * {@link Runnable} sends the {@link IQueryClient} a message indicating that
     * some query has halted on some node. This is used to send such messages
     * asynchronously
     * 
     * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan
     *         Thompson</a>
     * @version $Id$
     */
    private static class SendHaltMessageTask implements Runnable {

        private final IQueryClient clientProxy;

        private final HaltOpMessage msg;

        private final RunningQuery q;

        public SendHaltMessageTask(final IQueryClient clientProxy,
                final HaltOpMessage msg, final RunningQuery q) {

            if (clientProxy == null)
                throw new IllegalArgumentException();

            if (msg == null)
                throw new IllegalArgumentException();

            if (q == null)
                throw new IllegalArgumentException();

            this.clientProxy = clientProxy;

            this.msg = msg;

            this.q = q;

        }

        public void run() {
            try {
                clientProxy.haltOp(msg);
            } catch (Throwable e) {
                log.error("Could not notify query controller: " + e, e);
                q.cancel(true/* mayInterruptIfRunning */);
            }
        }

    }

    /**
     * Return an iterator which will drain the solutions from the query. The
     * query will be cancelled if the iterator is
     * {@link ICloseableIterator#close() closed}.
     * 
     * @throws UnsupportedOperationException
     *             if this is not the query controller.
     */
    public IAsynchronousIterator<IBindingSet[]> iterator() {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);

        if (queryIterator == null)
            throw new UnsupportedOperationException();

        return queryIterator;

    }

    public void halt() {

        lock.lock();

        try {

            // signal normal completion.
            future.halt((Void) null);

            // interrupt anything which is running.
            cancel(true/* mayInterruptIfRunning */);

        } finally {

            lock.unlock();

        }

    }

    public Throwable halt(final Throwable t) {

        if (t == null)
            throw new IllegalArgumentException();

        lock.lock();

        try {

            log.error(toString(), t);

            try {

                // signal error condition.
                return future.halt(t);

            } finally {
                
                // interrupt anything which is running.
                cancel(true/* mayInterruptIfRunning */);

            }

        } finally {

            lock.unlock();

        }

    }

    /**
     * {@inheritDoc}
     * <p>
     * Cancelled queries :
     * <ul>
     * <li>must reject new chunks</li>
     * <li>must cancel any running operators</li>
     * <li>must not begin to evaluate operators</li>
     * <li>must release all of their resources</li>
     * <li>must not cause the solutions to be discarded before the client can
     * consume them.</li>
     * </ul>
     */
    final public boolean cancel(final boolean mayInterruptIfRunning) {
        lock.lock();
        try {
            // halt the query.
            boolean cancelled = future.cancel(mayInterruptIfRunning);
            if (didQueryTearDown
                    .compareAndSet(false/* expect */, true/* update */)) {
                /*
                 * Do additional cleanup exactly once.
                 */
                // cancel any running operators for this query on this node.
                cancelled |= cancelRunningOperators(mayInterruptIfRunning);
                if (controller) {
                    // cancel query on other peers.
                    cancelled |= cancelQueryOnPeers(future.getCause());
                }
                if (queryBuffer != null) {
                    /*
                     * Close the query buffer so the iterator draining the query
                     * results will recognize that no new results will become
                     * available.
                     */
                    queryBuffer.close();
                }
                // life cycle hook for the end of the query.
                lifeCycleTearDownQuery();
            }
            // remove from the collection of running queries.
            queryEngine.halt(this);
            // true iff we cancelled something.
            return cancelled;
        } finally {
            lock.unlock();
        }
    }

    /**
     * Cancel any running operators for this query on this node.
     * <p>
     * Note: This will wind up invoking the tear down methods for each operator
     * which was running or which could have been re-triggered.
     * 
     * @return <code>true</code> if any operators were cancelled.
     */
    private boolean cancelRunningOperators(final boolean mayInterruptIfRunning) {
        
        boolean cancelled = false;
        
        final Iterator<ChunkFutureTask> fitr = operatorFutures.values().iterator();
        
        while (fitr.hasNext()) {
        
            final ChunkFutureTask f = fitr.next();
            
            try {
            
                if (f.cancel(mayInterruptIfRunning))
                    cancelled = true;

            } finally {
                
//                fitr.remove();
                
            }

        }
     
        return cancelled;
        
    }

    /**
     * Cancel the query on each node where it is known to be running.
     * <p>
     * Note: The default implementation verifies that the caller is holding the
     * {@link #lock} but is otherwise a NOP. This is overridden for scale-out.
     * 
     * @param cause
     *            When non-<code>null</code>, the cause.
     * 
     * @return <code>true</code> iff something was cancelled.
     * 
     * @throws IllegalMonitorStateException
     *             unless the {@link #lock} is held by the current thread.
     * @throws UnsupportedOperationException
     *             unless this is the query controller.
     */
    protected boolean cancelQueryOnPeers(final Throwable cause) {

        if (!controller)
            throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);
        
        if (!lock.isHeldByCurrentThread())
            throw new IllegalMonitorStateException();

        return false;

    }

    final public Void get() throws InterruptedException, ExecutionException {

        return future.get();

    }

    final public Void get(long arg0, TimeUnit arg1)
            throws InterruptedException, ExecutionException, TimeoutException {

        return future.get(arg0, arg1);

    }

    final public boolean isCancelled() {

        return future.isCancelled();

    }

    final public boolean isDone() {

        return future.isDone();

    }

    public IBigdataFederation<?> getFederation() {

        return queryEngine.getFederation();

    }

    public IIndexManager getIndexManager() {

        return queryEngine.getIndexManager();

    }

    public String toString() {
        final StringBuilder sb = new StringBuilder(getClass().getName());
        sb.append("{queryId=" + queryId);
        sb.append(",deadline=" + deadline.get());
        sb.append(",isDone=" + isDone());
        sb.append(",isCancelled=" + isCancelled());
        sb.append(",runState=" + runState);
        sb.append(",controller=" + controller);
        sb.append(",clientProxy=" + clientProxy);
        sb.append(",query=" + query);
        sb.append("}");
        return sb.toString();
    }

}
