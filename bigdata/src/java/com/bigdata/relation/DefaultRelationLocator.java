/*

Copyright (C) SYSTAP, LLC 2006-2008.  All rights reserved.

Contact:
     SYSTAP, LLC
     4501 Tower Road
     Greensboro, NC 27410
     licenses@bigdata.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*/
/*
 * Created on Jun 30, 2008
 */

package com.bigdata.relation;

import java.util.concurrent.ExecutorService;

import com.bigdata.journal.IIndexManager;

/**
 * An {@link IRelationLocator} that accepts any {@link IRelationName} against a
 * {@link IIndexManager} and always succeeds, returning an instance of an
 * {@link IRelation} generated by the configured {@link IRelationFactory}. If
 * indices for the {@link IRelation} do not exist, and the {@link IRelation}
 * implements {@link IMutableRelation}, then the caller can choose to create
 * them using {@link IMutableRelation#create()}.
 * <p>
 * This {@link IRelationLocator} can be chained after a locator that knows about
 * a specific relation, e.g., on a temporary store.
 * <p>
 * Note: This class provides generative capacity, but only for a specific
 * {@link IRelationFactory} (class of relations).
 * 
 * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
 * @version $Id$
 */
public class DefaultRelationLocator<R> implements IRelationLocator<R> {

    private final ExecutorService service;
    
    private final IIndexManager indexManager;

    private final IRelationFactory<R> relationFactory;

    public DefaultRelationLocator(ExecutorService service, IIndexManager indexManager,
            IRelationFactory<R> relationFactory) {

        if (service == null)
            throw new IllegalArgumentException();

        if (indexManager == null)
            throw new IllegalArgumentException();

        if (relationFactory == null)
            throw new IllegalArgumentException();

        this.service = service;
        
        this.indexManager = indexManager;

        this.relationFactory = relationFactory;

    }

    public IRelation<R> getRelation(IRelationName<R> relationName,
            long timestamp) {

        return relationFactory.newRelation(service, indexManager, relationName
                .toString(), timestamp);
        
    }

}
