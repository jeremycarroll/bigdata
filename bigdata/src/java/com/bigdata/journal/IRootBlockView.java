/**

The Notice below must appear in each file of the Source Code of any
copy you distribute of the Licensed Product.  Contributors to any
Modifications may add their own copyright notices to identify their
own contributions.

License:

The contents of this file are subject to the CognitiveWeb Open Source
License Version 1.1 (the License).  You may not copy or use this file,
in either source code or executable form, except in compliance with
the License.  You may obtain a copy of the License from

  http://www.CognitiveWeb.org/legal/license/

Software distributed under the License is distributed on an AS IS
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
the License for the specific language governing rights and limitations
under the License.

Copyrights:

Portions created by or assigned to CognitiveWeb are Copyright
(c) 2003-2003 CognitiveWeb.  All Rights Reserved.  Contact
information for CognitiveWeb is available at

  http://www.CognitiveWeb.org

Portions Copyright (c) 2002-2003 Bryan Thompson.

Acknowledgements:

Special thanks to the developers of the Jabber Open Source License 1.0
(JOSL), from which this License was derived.  This License contains
terms that differ from JOSL.

Special thanks to the CognitiveWeb Open Source Contributors for their
suggestions and support of the Cognitive Web.

Modifications:

*/
/*
 * Created on Oct 18, 2006
 */

package com.bigdata.journal;

import java.nio.ByteBuffer;

/**
 * Interface for a root block on the journal. The root block provides metadata
 * about the journal, e.g., slot size, the #of slots, the head of the slot index
 * allocation chain and the object index map, etc. The journal has two root
 * blocks. The root blocks are written in an alternating order and include
 * timestamps at the head and tail of each block (i.e., according to the Challis
 * algorithm). On restart, the root block is choosen whose (a) timestamps agree;
 * and (b) whose timestamps are greater. This protected against both crashes and
 * partial writes of the root block itself.
 * 
 * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
 * @version $Id$
 */
public interface IRootBlockView {

    /**
     * Assertion throws exception unless the root block is valid. Conditions
     * tested include the root block MAGIC and the root block timestamps (there
     * are two and they must agree).
     */
    public void valid() throws RootBlockException;

    /**
     * The segment identifier.
     */
    public long getSegmentId();
    
    /**
     * The size of a slot in the journal in bytes.
     */
    public int getSlotSize();

    /**
     * The #of slots in the journal. The valid slot indices are the half-open
     * range [0:slotLimit).
     */
    public int getSlotLimit();

    /**
     * The timestamp at which the root block was last modified.
     * 
     * @return The timestamp.
     * 
     * @throws RootBlockException
     *             if the timestamps on the root block do not agree.
     */
    public long getTimestamp() throws RootBlockException;

    /**
     * A commit counter. This commit counter is used to avoid problems with
     * timestamps generated by different machines or when time goes backwards or
     * other nasty stuff. The correct root block is choosen by selecting the
     * valid root block with the larger commit counter.
     * 
     * @return The commit counter.
     */
    public long getCommitCounter();
    
    /**
     * Return the slot index of the head of the slot index chain.
     * 
     * @see ISlotAllocationIndex
     */
    public int getSlotIndexChainHead();

    /**
     * Return the slot index of the root of the object index.
     * 
     * @see IObjectIndex
     */
    public int getObjectIndexRoot();

    /**
     * A read-only buffer whose contents are the root block.
     */
    public ByteBuffer asReadOnlyBuffer();
    
}
