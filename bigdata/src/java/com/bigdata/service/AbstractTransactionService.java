/**

Copyright (C) SYSTAP, LLC 2006-2007.  All rights reserved.

Contact:
     SYSTAP, LLC
     4501 Tower Road
     Greensboro, NC 27410
     licenses@bigdata.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
/*
 * Created on Mar 15, 2007
 */

package com.bigdata.service;

import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Properties;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.log4j.Logger;

import com.bigdata.config.LongValidator;
import com.bigdata.counters.CounterSet;
import com.bigdata.counters.Instrument;
import com.bigdata.journal.ITransactionService;
import com.bigdata.journal.ITx;
import com.bigdata.journal.Journal;
import com.bigdata.journal.RunState;
import com.bigdata.journal.TimestampUtility;
import com.bigdata.journal.ValidationError;
import com.bigdata.resources.ResourceManager;
import com.bigdata.util.InnerCause;
import com.bigdata.util.MillisecondTimestampFactory;

/**
 * Centralized transaction manager service. In response to a client request, the
 * transaction manager will distribute prepare/commit or abort operations to all
 * data services on which writes were made by a transaction. The transaction
 * manager also provides global timestamps required for non-transactional commit
 * points and various other purposes.
 * 
 * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
 * @version $Id$
 * 
 * @todo failover. the service instances will need to track active/committed
 *       transactions, complain if their clocks get out of alignment, and refuse
 *       to generate a timestamp that would go backwards when compared to the
 *       timestamp generated by the last master service.
 */
abstract public class AbstractTransactionService extends AbstractService
        implements ITransactionService, IServiceShutdown {

    /**
     * Logger.
     */
    protected static final Logger log = Logger.getLogger(AbstractTransactionService.class);

//    protected static final boolean INFO = log.isInfoEnabled();

//    protected static final boolean DEBUG = log.isDebugEnabled();
    
    /**
     * Options understood by this service.
     * 
     * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
     * @version $Id$
     */
    public interface Options {

		/**
		 * How long you want to hold onto the database history (in milliseconds)
		 * or {@link Long#MAX_VALUE} for an (effectively) immortal database. The
		 * {@link ITransactionService} tracks the timestamp corresponding to the
		 * earliest running transaction (if any). When such a transaction
		 * exists, the actual release time is:
		 * 
		 * <pre>
		 * releaseTime = min(lastCommitTime - 1, min(earliestRunningTx, now - minimumReleaseAge))
		 * </pre>
		 * 
		 * This ensures that history in use by running transactions is not
		 * released even when the minimumReleaseAge is ZERO (0).
		 * <p>
		 * When no transactions exist the actual release time is:
		 * 
		 * <pre>
		 * releaseTime = min(commitTime - 1, now - minimumReleaseAge)
		 * </pre>
		 * 
		 * This ensures that the the release time advances when no transactions
		 * are in use, but that the minimum release age is still respected.
		 * 
		 * @see #DEFAULT_MIN_RELEASE_AGE
		 * @see #MIN_RELEASE_AGE_1H
		 * @see #MIN_RELEASE_AGE_1D
		 * @see #MIN_RELEASE_AGE_1W
		 * @see #MIN_RELEASE_AGE_NEVER
		 * 
		 * @see AbstractTransactionService#updateReleaseTime(long)
		 * @see AbstractTransactionService#notifyCommit(long)
		 */
        String MIN_RELEASE_AGE = AbstractTransactionService.class.getName()
                + ".minReleaseAge";

        /**
         * Minimum release age is zero (0). A value of ZERO (0) implies that any
         * history not required for the read-committed view is released each
         * time the {@link ResourceManager} overflows.
         */
        String MIN_RELEASE_AGE_NO_HISTORY = "0";

        /** Minimum release age is one minutes. */
        String MIN_RELEASE_AGE_1M = "" + 1/* mn */* 60/* sec */* 1000/* ms */;

        /** Minimum release age is five minutes. */
        String MIN_RELEASE_AGE_5M = "" + 5/* mn */* 60/* sec */* 1000/* ms */;

        /** Minimum release age is one hour. */
        String MIN_RELEASE_AGE_1H = "" + 1/* hr */* 60/* mn */* 60/* sec */
                * 1000/* ms */;

        /** Minimum release age is one day. */
        String MIN_RELEASE_AGE_1D = "" + 24/* hr */* 60/* mn */* 60/* sec */
                * 1000/* ms */;

        /** Minimum release age is one week. */
        String MIN_RELEASE_AGE_1W = "" + 7/* d */* 24/* hr */* 60/* mn */
                * 60/* sec */
                * 1000/* ms */;

        /** Immortal database (the release time is set to {@link Long#MAX_VALUE}). */
        String MIN_RELEASE_AGE_NEVER = "" + Long.MAX_VALUE;

        /**
         * Default minimum release age is ZERO(0L) milliseconds (only the last
         * commit point will be retained after a full compacting merge).
         */
        String DEFAULT_MIN_RELEASE_AGE = MIN_RELEASE_AGE_NO_HISTORY;

    }
    
    /**
     * If the transaction is read-only and a write operation was requested.
     */
    protected static final transient String ERR_READ_ONLY = "Read-only";
    
    /**
     * If the transaction is not known to this service.
     */
    protected static final transient String ERR_NO_SUCH = "Unknown transaction";
    
    /**
     * If a transaction is no longer active.
     */
    protected static final transient String ERR_NOT_ACTIVE = "Not active";

    /**
     * If the transaction service is not in a run state which permits the
     * requested operation.
     */
    protected static final transient String ERR_SERVICE_NOT_AVAIL = "Service not available";

    /**
     * The run state for the transaction service.
     */
    private volatile TxServiceRunState runState;

    /**
     * A copy of the callers properties. 
     */
    private final Properties properties;
    
    /**
     * The minimum age in milliseconds before history may be released.
     * 
     * @see Options#MIN_RELEASE_AGE
     */
    final private long minReleaseAge;
    
    /**
     * An object wrapping the properties used to initialize the service.
     */
    protected Properties getProperties() {
        
        return new Properties(properties);
        
    }
    
    /**
     * A hash map containing all active transactions. A transaction that is
     * preparing will remain in this collection until it has completed (aborted
     * or committed).
     * 
     * @todo config param for the initial capacity of the map.
     * @todo config for the concurrency rating of the map.
     */
    final private ConcurrentHashMap<Long, TxState> activeTx = new ConcurrentHashMap<Long, TxState>();

    /**
     * The #of open transactions in any {@link RunState}.
     */
    final public int getActiveCount() {
        
        return activeTx.size();
        
    }
    
    public AbstractTransactionService(final Properties properties) {
        
        this.properties = (Properties) properties.clone();

        {
            
            this.minReleaseAge = LongValidator.GTE_ZERO.parse(
                    Options.MIN_RELEASE_AGE, properties.getProperty(
                            Options.MIN_RELEASE_AGE,
                            Options.DEFAULT_MIN_RELEASE_AGE));

            if (log.isInfoEnabled())
                log.info(Options.MIN_RELEASE_AGE + "=" + minReleaseAge);
        
        }
        
        runState = TxServiceRunState.Starting;
        
    }

    /**
     * Any state other than {@link TxServiceRunState#Halted}.
     */
    public boolean isOpen() {

        return runState != TxServiceRunState.Halted;
        
    }
    
    protected void assertOpen() {

        if (!isOpen())
            throw new IllegalStateException();

    }

    /**
     * Return the {@link RunState}.
     */
    public TxServiceRunState getRunState() {
        
        if(!lock.isHeldByCurrentThread())
            throw new IllegalMonitorStateException();
        
        return runState;
        
    }
    
    /**
     * Change the {@link TxServiceRunState}.
     * 
     * @param newval
     *            The new value.
     * 
     * @throws IllegalStateException
     *             if the requested state is not a legal state change.
     */
    synchronized protected void setRunState(final TxServiceRunState newval) {

        if(!lock.isHeldByCurrentThread())
            throw new IllegalMonitorStateException();
        
        if (!runState.isTransitionLegal(newval)) {

            throw new IllegalStateException("runState=" + runState
                    + ", but newval=" + newval);

        }

        this.runState = newval;

        if (log.isInfoEnabled()) {

            log.info("runState=" + runState);
            
        }
        
    }
    
    /**
     * Polite shutdown. New transactions will not start. This method will block
     * until existing transactions (both read-write and read-only) are complete
     * (either aborted or committed).
     */
    public void shutdown() {

        if(log.isInfoEnabled()) 
            log.info("");

        lock.lock();
        try {

            switch (getRunState()) {
            case Shutdown:
            case ShutdownNow:
            case Halted:
                return;
            }

            // Do not allow new transactions to start.
            setRunState(TxServiceRunState.Shutdown);

            try {

                // wait for running transactions to complete.
                awaitRunningTx(10/* logTimeout */, TimeUnit.MILLISECONDS);

            } catch (InterruptedException ex) {

                // convert to fast shutdown.

                log.warn("Interrupted during shutdown - will do fast shutdown: "+ex, ex);
                
                shutdownNow();

                return;

            }

            super.shutdown();

            // Service is halted.
            setRunState(TxServiceRunState.Halted);

        } finally {

            lock.unlock();
            
        }

    }

    /**
     * Wait until active transactions complete.
     * 
     * @param logTimeout
     *            The timeout between {@link #logTimeout(long, TimeUnit)}
     *            messages.
     * @param unit
     *            The unit for that timeout.
     * 
     * @throws InterruptedException
     *             if this method is interrupted.
     */
    private void awaitRunningTx(long logTimeout, final TimeUnit unit)
            throws InterruptedException {

        final long begin = System.nanoTime();

        long lastLogTime = begin;

        // convert to nanoseconds.
        logTimeout = unit.toNanos(logTimeout);

        long elapsed = 0L;

        if(log.isInfoEnabled())
            log.info("activeCount="+getActiveCount());

        while (getActiveCount() > 0) {

            // wait for a transaction to complete.
            if (txDeactivate.await(logTimeout, TimeUnit.NANOSECONDS)
                    && getActiveCount() == 0) {

                // no more tx are active.

                // update the elapsed time.
                elapsed = System.nanoTime() - begin;

                if(log.isInfoEnabled())
                    log.info("No transactions remaining: elapsed="+elapsed);
                
                return;
                
            }
            
            // update the elapsed time.
            elapsed = System.nanoTime() - begin;

            {

                final long now = System.nanoTime();

                final long elapsedLogTime = now - lastLogTime;

                if (elapsedLogTime >= logTimeout) {

                    try {

                        logTimeout(elapsed, TimeUnit.NANOSECONDS);
                        
                    } catch (Throwable t) {
                        
                        log.error("Ignored", t);
                        
                    }

                }

                lastLogTime = now;

            }

        } // while(true)

    }

    /**
     * Logs periodic messages during shutdown.
     * 
     * @param elapsed
     *            The elapsed time since shutdown was requested.
     * @param unit
     *            The unit in which that time is measured.
     */
    private void logTimeout(final long elapsed, final TimeUnit unit) {
        
        log.warn("Waiting on task(s)" + ": elapsed="
                + TimeUnit.NANOSECONDS.toMillis(elapsed) + "ms, #active="
                + getActiveCount() + ", #readWrite="
                + getReadWriteActiveCount() + ", #readOnly="
                + getReadOnlyActiveCount());

    }
    
    /**
     * Fast shutdown (not immediate since it must abort active transactions).
     * <p>
     * New transactions will not start and active transactions will be aborted.
     * Transactions which are concurrently committing MAY fail (throwing
     * exceptions from various methods, including {@link #nextTimestamp()})
     * when the service halts.
     */
    public void shutdownNow() {

        if(log.isInfoEnabled()) 
            log.info("");

        lock.lock();
        try {

            switch (getRunState()) {
            case ShutdownNow:
            case Halted:
                return;
            }

            setRunState(TxServiceRunState.ShutdownNow);

            for (long tx : activeTx.keySet()) {

                final TxState state = activeTx.get(tx);

                if (state == null) {

                    /*
                     * Note: concurrent removal or clearing of the weak
                     * reference is possible.
                     */

                    continue;

                }

                state.lock.lock();

                try {

                    if (state.isActive()) {

                        // if (!state.isReadOnly()) {

                        try {

                            abortImpl(state);

                            assert state.isAborted() : state.toString();
                            
                        } catch(Throwable t) {
                            
                            log.error(state.toString(), t);
                            
                        } finally {

                            deactivateTx(state);
                            
                        }

                    }

                } finally {

                    state.lock.unlock();

                    /*
                     * Note: We are already holding the outer lock so we do not
                     * need to acquire it here.
                     */
                    updateReleaseTime(Math.abs(state.tx));
                    
                }

            } // foreach tx in activeTx

            // signal once now that we are run.
            txDeactivate.signalAll();

            final int activeCount = getActiveCount();

            if (activeCount != 0) {

                log.warn("Service shutdown with active transactions: #nactive="
                        + activeTx.size());

            }

            super.shutdownNow();

            setRunState(TxServiceRunState.Halted);

        } finally {

            lock.unlock();

        }
        
    }

    /**
     * Immediate/fast shutdown of the service and then destroys any persistent
     * state associated with the service.
     */
    synchronized public void destroy() {

        log.warn("");
        
        lock.lock();

        try {

            shutdownNow();

            // Note: no persistent state in this abstract impl.
            
        } finally {

            lock.unlock();
            
        }

    }

    public long nextTimestamp() {

//        setupLoggingContext();
//
//
//        try {

            /*
             * Note: This method is allowed in all run states (after startup)
             * since so much depends on the ability to obtain timestamps,
             * including the unisolated operations on individual journals or
             * data services.
             */
            switch (runState) {
            case Starting:
//            case Halted:
                throw new IllegalStateException(ERR_SERVICE_NOT_AVAIL);
            default:
                break;
            }

            return _nextTimestamp();

//        } finally {
//
//            clearLoggingContext();
//
//        }
        
    }
    
    /**
     * Private version is also used by {@link #start()}.
     */
    synchronized private final long _nextTimestamp() {

        return lastTimestamp = MillisecondTimestampFactory.nextMillis();

    }
    /** The last timestamp issued. */
    private volatile long lastTimestamp;
    
    /**
     * Note: There is an upper bound of one read-write transaction that may be
     * created per millisecond (the resolution of {@link #nextTimestamp()}) and
     * requests for new read-write transactions contend with other requests for
     * {@link #nextTimestamp()}.
     * <p>
     * Note: The transaction service will refuse to start new transactions whose
     * timestamps are LTE to {@link #getEarliestTxStartTime()}.
     * 
     * @throws RuntimeException
     *             Wrapping {@link TimeoutException} if a timeout occurs
     *             awaiting a start time which would satisfy the request for a
     *             read-only transaction (this can occur only for read-only
     *             transactions which must contend for start times which will
     *             read from the appropriate historical commit point).
     */
    public long newTx(final long timestamp) {

        setupLoggingContext();

        try {

            /*
             * Note: It may be possible to increase the concurrency of this
             * operation. Many cases do not allow contention since they will
             * just use the value returned by nextTimestamp(), which is always
             * distinct. Those cases which do allow contention involve search
             * for a start time that can read from a specific commit point. Even
             * then we may be able to reduce contention using atomic operations
             * on [activeTx], e.g., putIfAbsent().
             * 
             * However, pay attention to [lock]. Certainly it is serializing
             * newTx() at this point as well several other methods on this API.
             * Higher concurrency will require relaxing constraints on atomic
             * state transitions governed by [lock]. Perhaps by introducing
             * additional locks that are more specific. I don't want to relax
             * those constraints until I have a better sense of what must be
             * exclusive operations.
             */

            lock.lock();
            
            switch (getRunState()) {
            case Running:
                break;
            default:
                throw new IllegalStateException(ERR_SERVICE_NOT_AVAIL);
            }

            try {

                final long tx = assignTransactionIdentifier(timestamp);

                activateTx(new TxState(tx));

                return tx;

            } catch(TimeoutException ex) {
                
                throw new RuntimeException(ex);
                
            } catch(InterruptedException ex) {
                
                throw new RuntimeException(ex);
                
            } finally {

                lock.unlock();

            }

        } finally {

            clearLoggingContext();

        }

    }

    /**
     * A lock used to serialize certain operations that must be atomic with
     * respect to the state of the transaction service. Mostly this is used to
     * serialize the assignment of transaction identifiers and the update of the
     * release time as transactions complete.
     * <p>
     * Note: To avoid lock ordering problems DO NOT acquire this {@link #lock}
     * if you are already holding a {@link TxState#lock}. This causes a lock
     * ordering problem and can result in deadlock.
     */
    protected final ReentrantLock lock = new ReentrantLock();
    
    /**
     * Signalled by {@link #deactivateTx(TxState)} and based on {@link #lock}.
     */
    protected final Condition txDeactivate = lock.newCondition();

    /** #of transactions started. */
    private long startCount = 0L;

    /** #of transactions aborted. */
    private long abortCount = 0L;

    /** #of transactions committed. */
    private long commitCount = 0L;

    /** #of active read-write transactions. */
    private final AtomicLong readWriteActiveCount = new AtomicLong(0L);

    /** #of active read-only transactions. */
    private final AtomicLong readOnlyActiveCount = new AtomicLong(0L);

    /** #of transaction started. */
    public long getStartCount() {
        
        return startCount;
        
    }
    
    /** #of transaction aborted. */
    public long getAbortCount() {
        
        return abortCount;
        
    }
    
    /** #of transaction committed. */
    public long getCommitCount() {
        
        return commitCount;
        
    }
    
    public long getReadOnlyActiveCount() {
        
        return readOnlyActiveCount.get();
        
    }
    
    public long getReadWriteActiveCount() {
        
        return readWriteActiveCount.get();
        
    }
    
//    /**
//     * Return the minimum over the absolute values of the active transactions.
//     * 
//     * @see #getReleaseTime()
//     */
//    public abstract long getEarliestTxStartTime();
    
    /**
     * @see Options#MIN_RELEASE_AGE
     */
    public long getReleaseTime() {

        if (log.isDebugEnabled())
            log.debug("releaseTime=" + releaseTime + ", lastKnownCommitTime="
                    + getLastCommitTime());
        
        return releaseTime;
        
    }
    private volatile long releaseTime = 0L;
    
    /**
     * Sets the new release time.
     * 
     * @param newValue
     *            The new value.
     */
    protected void setReleaseTime(final long newValue) {

        if(!lock.isHeldByCurrentThread())
            throw new IllegalMonitorStateException();
        
        if (log.isInfoEnabled())
            log.info("newValue=" + newValue);
        
        this.releaseTime = newValue;
        
    }
    
    /**
     * Adds the transaction from to the local tables.
     * 
     * @param state
     *            The transaction.
     */
    protected void activateTx(final TxState state) {

        if (state == null)
            throw new IllegalArgumentException();

        state.lock.lock();

        try {
        
            if (!state.isActive())
                throw new IllegalArgumentException();
            
            activeTx.put(state.tx, state);

            synchronized(startTimeIndex) {
                
                /*
                 * Note: Using the absolute value of the assigned timestamp so
                 * that the index is ordered earliest to most recent. This means
                 * that the absolute value of the timestamps must be unique,
                 * otherwise this will throw out an exception.
                 */

                startTimeIndex.add(Math.abs(state.tx));
                
            }
            
            startCount++;

            if(state.isReadOnly()) {
                
                readOnlyActiveCount.incrementAndGet();
                
            } else {
                
                readWriteActiveCount.incrementAndGet();
                
            }
            
        } finally {
            
            state.lock.unlock();
            
        }
        
    }

    /**
     * Removes the transaction from the local tables.
     * <p>
     * Note: The caller MUST own {@link TxState#lock} across this method and
     * MUST then do
     * 
     * <pre>
     * updateReleaseTime(long)
     * deactivateTx.signallAll()
     * </pre>
     * 
     * while holding the outer {@link #lock}.
     * <p>
     * Note: Normally this method is invoked without the outer {@link #lock}
     * which necessitates lifting those method calls out of this method and into
     * the caller.
     * 
     * @param state
     *            The transaction.
     * 
     * @throws IllegalMonitorStateException
     *             unless the caller is holding the {@link TxState#lock}.
     */
    protected void deactivateTx(final TxState state) {

        if (state == null)
            throw new IllegalArgumentException();

        if (!state.lock.isHeldByCurrentThread())
            throw new IllegalMonitorStateException();
        
//        try {

            if (!state.isComplete())
                throw new IllegalArgumentException();

            if (state.isAborted()) {

                abortCount++;

            } else {

                commitCount++;

            }

            if (state.isReadOnly()) {

                readOnlyActiveCount.decrementAndGet();

            } else {

                readWriteActiveCount.decrementAndGet();

            }

            if (activeTx.remove(state.tx) == null) {

                log.warn("Transaction not in table: " + state);

            }

            if (log.isInfoEnabled())
                log.info(state.toString());

//        } finally {
//
//            state.lock.unlock();
//
//        }

    }
   
    /**
     * This method MUST be invoked each time a transaction completes with the
     * absolute value of the transaction identifier that has just been
     * deactivated. The method will remove the transaction entry in the ordered
     * set of running transactions ({@link #startTimeIndex}). If the specified
     * timestamp corresponds to the earliest running transaction, then the
     * <code>releaseTime</code> will be updated and the new releaseTime will
     * be set using {@link #setReleaseTime(long)}.
     * <p>
     * Note that the {@link #startTimeIndex} contains the absolute value of the
     * transaction identifiers!
     * 
     * @param timestamp
     *            The absolute value of a transaction identifier that has just
     *            been deactivated.
     * 
     * @todo the {@link #startTimeIndex} could be used by
     *       {@link #findUnusedTimestamp(long, long)} so that it could further
     *       constrain its search within the half-open interval.
     */
    final protected void updateReleaseTime(final long timestamp) {

        if (timestamp <= 0)
            throw new IllegalArgumentException();

        /*
         * Note: The calculation of the new release time needs to be atomic.
         * 
         * Note: This uses the same lock that we use to create new transactions
         * in order to prevent a new transaction from starting while we are
         * updating the release time.
         * 
         * @todo Should this also be used to serialize both handing out commit
         * times (for 2-phase commits) and acknowledging commit times (for
         * single phase commits)?
         */
        if (!lock.isHeldByCurrentThread())
            throw new IllegalMonitorStateException();

        // current timestamp.
        final long now = _nextTimestamp();

        // current value for the releaseTime.
        final long oldReleaseTime = this.releaseTime;

        /*
         * true iff the tx specified by the caller was the earliest running
         * transaction.
         */
        final boolean isEarliestTx;

        /*
         * The earliest tx remaining now that the caller's tx is complete and
         * [now] if there are no more running transactions.
         */
        final long earliestTxStartTime;

        synchronized (startTimeIndex) {

			// Note: ZERO (0) is the first tuple in the B+Tree.
        	// Note: MINUS ONE (-1) means that the B+Tree is empty.
			final int indexOf = startTimeIndex.findIndexOf(timestamp);
			
			isEarliestTx = indexOf == 0;

			// remove start time from the index.
			if (indexOf != -1)
				startTimeIndex.remove(timestamp);

            if (!isEarliestTx) {

                // No change unless earliest tx terminates.
                return;

            }

            if (startTimeIndex.getEntryCount() > 0) {

                /*
                 * The start time associated with the earliest remaining tx.
                 */
                earliestTxStartTime = startTimeIndex.decodeKey(startTimeIndex
                        .keyAt(0));
                
            } else {

                /*
                 * There are no commit points and there are no active
                 * transactions.
                 */
                earliestTxStartTime = now;

            }

        } // synchronized(startTimeIndex)

        if (minReleaseAge == Long.MAX_VALUE) {

            return;
            
        }
        
        if (isEarliestTx) {

            // last commit time on the database.
            final long lastCommitTime = getLastCommitTime();

            // minimum milliseconds to retain history.
            final long minReleaseAge = getMinReleaseAge();

            /*
             * The release time will be the minimum of:
             * 
             * a) The timestamp BEFORE the lastCommitTime.
             * 
             * b) The timestamp BEFORE the earliestTxStartTime.
             * 
             * c) minReleaseAge milliseconds in the past.
             * 
             * Note: NEVER let go of the last commit time!
             * 
             * @todo there is a fence post here for [now-minReleaseAge] when
             * minReleaseAge is very large, e.g., Long#MAX_VALUE. This is caught
             * above for that specific value, but other very large values could
             * also cause problems.
             */
            final long releaseTime = Math.min(lastCommitTime - 1, Math.min(
                    earliestTxStartTime - 1, now - minReleaseAge));

            /*
             * We only update the release time if the computed time would
             * advance the releaseTime.
             * 
             * Note: The releaseTime MUST NOT go backwards since the database
             * may have already released history for any commit point whose
             * commitTime is LTE to the existing releaseTime.
             */
            if (this.releaseTime < releaseTime) {

                if (log.isInfoEnabled())
                    log.info("lastCommitTime=" + lastCommitTime
                            + ", earliestTxStartTime=" + earliestTxStartTime
                            + ", minReleaseAge=" + minReleaseAge + ", now="
                            + now + ", releaseTime(" + oldReleaseTime + "->"
                            + releaseTime + ")");

                // update.
                setReleaseTime(releaseTime);

            }

        }

    }

    /**
     * The basic implementation advances the release time periodically as
     * commits occur even when there are no transactions in use.  
     * <p>
     * Note: This needs to be a fairly low-latency operation since this method
     * is invoked for all commits on all data services and will otherwise be a
     * global hotspot.
     */
    public void notifyCommit(final long commitTime) {

        lock.lock();

        try {

        	updateReleaseTimeForBareCommit(commitTime);
        	
        } finally {

            lock.unlock();

        }

	}

	/**
	 * If there are NO active transactions and the current releaseTime is LT
	 * (commitTime-1) then compute and set the new releaseTime.
	 * <p>
	 * Note: This method was historically part of {@link #notifyCommit(long)}.
	 * It was moved into its own method so it can be overridden for some unit
	 * tests.
	 * 
	 * @throws IllegalMonitorStateException
	 *             unless the caller is holding the lock.
	 */
	protected void updateReleaseTimeForBareCommit(final long commitTime) {

		if(!lock.isHeldByCurrentThread())
			throw new IllegalMonitorStateException();
		
		synchronized (startTimeIndex) {

			if (this.releaseTime < (commitTime - 1)
					&& startTimeIndex.getEntryCount() == 0) {

				final long lastCommitTime = commitTime;

				final long now = _nextTimestamp();

				final long releaseTime = Math.min(lastCommitTime - 1, now
						- minReleaseAge);

				if (this.releaseTime < releaseTime) {

					if (log.isInfoEnabled())
						log.info("Advancing releaseTime (no active tx)"
								+ ": lastCommitTime=" + lastCommitTime
								+ ", minReleaseAge=" + minReleaseAge + ", now="
								+ now + ", releaseTime(" + this.releaseTime
								+ "->" + releaseTime + ")");

					setReleaseTime(releaseTime);

				}

			}

		}

    }
    
    /**
     * Return the minimum #of milliseconds of history that must be preserved.
     * 
     * @todo This centralizes the value for the minimum amount of history that
     *       will be preserved across the federation.
     *       <p>
     *       If minReleaseTime is increased, then the release time can be
     *       changed to match, but only by NOT advancing it until we are
     *       retaining enough history.
     *       <p>
     *       If minReleaseTime is decreased, then we can immediately release
     *       more history (or at least as soon as the task runs to notify the
     *       discovered data services of the new release time).
     */
    final public long getMinReleaseAge() {

        return minReleaseAge;

    }

    /**
     * A transient index holding the <strong>absolute value</strong> of the
     * start times of all active transactions.
     * <p>
     * Note: The absolute value constraint is imposed so that we can directly
     * identify the earliest active transaction in the index by its position (it
     * will be at position zero). This would not work if we let in negative
     * start times.
     * <p>
     * Note: In order to support this, {@link #findUnusedTimestamp(long, long)}
     * will not return a timestamp whose absolute value corresponds to an active
     * transaction.
     */
    protected final CommitTimeIndex startTimeIndex = CommitTimeIndex
            .createTransient();

    /**
     * Assign a transaction identifier for a new transaction.
     * 
     * @param timestamp
     *            The timestamp.
     * 
     * @return The assigned transaction identifier.
     * 
     * @throws InterruptedException
     *             if interrupted while awaiting a start time which would
     *             satisfy the request.
     * @throws InterruptedException
     *             if a timeout occurs while awaiting a start time which would
     *             satisfy the request.
     */
    protected long assignTransactionIdentifier(final long timestamp)
            throws InterruptedException, TimeoutException {
        
        if (timestamp == ITx.UNISOLATED) {

            /*
             * When timestamp is ZERO (0L), this simply returns the next
             * distinct timestamp (with its sign bit flipped).
             * 
             * Note: This is guaranteed to be a valid start time since it is LT
             * the next possible commit point for the database.
             * 
             * Note: When we validate, we will read from [-startTime] and the
             * journal will identify the 1st commit point LTE [-startTime],
             * which will be the most recent commit point on the database as of
             * the moment when we assigned this transaction identifier.
             */

            return -nextTimestamp();

        }

        final long lastCommitTime = getLastCommitTime();

//        if (timestamp > lastCommitTime) {
		if (timestamp > lastTimestamp) {

            /*
             * You can't request a historical read for a timestamp which has not
             * yet been issued by this service!
             */
            
			throw new IllegalStateException(
					"Timestamp is in the future: timestamp=" + timestamp
							+ ", lastCommitTime=" + lastCommitTime
							+ ", lastTimestamp=" + lastTimestamp);

        } else if (timestamp == lastCommitTime) {
            
            /*
             * Special case. We just return the next timestamp.
             * 
             * Note: This is equivalent to a request using the symbolic constant
             * READ_COMMITTED.
             */
            
            return nextTimestamp();
            
        }
        
        if (timestamp == ITx.READ_COMMITTED) {

            /*
             * This is a symbolic shorthand for a read-only transaction that
             * will read from the most recent commit point on the database.
             * 
             * Note: Once again we can just issue a timestamp since it will be
             * GT lastCommitTime.
             * 
             * Note: If [lastCommitTime == 0], we will still issue the next
             * timestamp.
             */

            return nextTimestamp();
            
        }
        
        final long releaseTime = getReleaseTime();
        
        if (timestamp <= releaseTime) {

            /*
             * This exception is thrown if there is an attempt to start a new
             * transaction that would read from historical data which has been
             * released. While the data MIGHT still be around, there is no way
             * to assert a read lock for that data since the releaseTime is
             * already in the future.
             */
            
            throw new IllegalStateException(
                    "Timestamp is less than or equal to the release time: timestamp="
                            + timestamp + ", releaseTime=" + releaseTime);
            
        }
        
        return getStartTime(timestamp);

    }

    /**
     * Assign a distinct timestamp to a historical read that will read from the
     * commit point identified by the specified timestamp.
     * <p>
     * Note: Under some circumstances the assignment of a read-only transaction
     * identifier must be delayed until a distinct timestamp becomes available
     * between the designed start time and the next commit point.
     * 
     * @param timestamp
     *            The timestamp (identifies the desired commit point).
     * 
     * @return A distinct timestamp not in use by any transaction that will read
     *         from the same commit point.
     */
    protected long getStartTime(final long timestamp)
            throws InterruptedException, TimeoutException {

        /*
         * Find the commit time from which the tx will read (largest commitTime
         * LTE timestamp).
         */
        final long commitTime = findCommitTime(timestamp);

        if (commitTime == -1L) {

            /*
             * @todo I believe that this can only arise when there are no commit
             * points in the log.
             */
            throw new RuntimeException(
                    "No data for that commit time: timestamp=" + timestamp);

        }

        /*
         * The commit time for the successor of that commit point (GT).
         */
        final long nextCommitTime = findNextCommitTime(commitTime);

        if (nextCommitTime == -1L) {

            /*
             * Note: If there is no successor of the desired commit point then
             * we can just return the next timestamp. It is guaranteed to be GT
             * the desired commit time and LT the next commit point. [Note: this
             * case is in fact handled above so you should not get here.]
             */

            return nextTimestamp();

        }

        // Find a valid, unused timestamp.
        return findUnusedTimestamp(commitTime, nextCommitTime,
                1000/* timeout */, TimeUnit.MILLISECONDS);

    }

    /**
     * Find the commit time from which the tx will read (largest commitTime LTE
     * timestamp).
     * 
     * @param timestamp
     *            The timestamp.
     * 
     * @return The commit time and -1L if there is no such commit time.
     */
    protected abstract long findCommitTime(long timestamp);

    /**
     * Return the commit time for the successor of that commit point have the
     * specified timestamp (a commit time strictly GT the given value).
     * 
     * @param commitTime
     *            The probe.
     * @return The successor or -1L iff the is no successor for that commit
     *         time.
     */
    protected abstract long findNextCommitTime(long commitTime);
    
    /**
     * Find a valid, unused timestamp.
     * <p>
     * Note: Any timestamp in the half-open range [commitTime:nextCommitTime)
     * MAY be assigned as all such timestamps will read from the commit point
     * associated with [commitTime].
     * 
     * @param commitTime
     *            The commit time for the commit point on which the tx will read
     *            (this must be the exact timestamp associated with the desired
     *            commit point).
     * @param nextCommitTime
     *            The commit time for the successor of that commit point.
     * @param timeout
     *            The maximum length of time to await an available timestamp.
     * @param unit
     *            The unit in which <i>timeout</i> is expressed.
     */
    protected long findUnusedTimestamp(final long commitTime,
            final long nextCommitTime, final long timeout, final TimeUnit unit)
            throws InterruptedException, TimeoutException {

        long nanos = unit.toNanos(timeout);

        final long begin = System.nanoTime();
        
        while (nanos >= 0) {

            for (long t = commitTime; t < nextCommitTime; t++) {

                if (activeTx.containsKey(t) || activeTx.containsKey(-t)) {

                    /*
                     * Note: We do not accept an active read-only startTime.
                     * 
                     * Note: We do not accept a start time that corresponds to
                     * the absolute value of an active read-write transaction
                     * either. This latter constraint is imposed so that the
                     * keys in the [startTimeIndex] can be the absolute value of
                     * the assigned timestamp and still be unique.
                     * 
                     * @todo We could grab the timestamp using an atomic
                     * putIfAbsent and a special value and the replace the value
                     * with the desired one (or just construct the TxState
                     * object each time and discard it if the map contains that
                     * key). This might let us increase concurrency for newTx().
                     */

                    continue;

                }

                return t;

            }

            /*
             * Wait for a tx to terminate. If it is in the desired half-open
             * range it will be detected by the loop above.
             * 
             * Note: This requires that we use signalAll() since we could be
             * waiting on more than one half-open range.
             * 
             * @todo if we used a Condition for the half-open range then we
             * could signal exactly that condition.
             * 
             * Note: throws InterruptedException
             */
            
            nanos -= (System.nanoTime() - begin);

            if(!txDeactivate.await(nanos, TimeUnit.NANOSECONDS)) {

                throw new TimeoutException();
                
            }

            nanos -= (System.nanoTime() - begin);

        }

        throw new TimeoutException();
        
    }
    
    /**
     * Note: Declared abstract so that we can hide the {@link IOException}.
     */
    abstract public long getLastCommitTime();

    /**
     * Implementation must abort the tx on the journal (standalone) or on each
     * data service (federation) on which it has written.
     * <p>
     * Pre-conditions:
     * <ol>
     * <li>The transaction is {@link RunState#Active}; and</li>
     * <li>The caller holds the {@link TxState#lock}.</li>
     * </ol>
     * <p>
     * Post-conditions:
     * <ol>
     * <li>The transaction is {@link RunState#Aborted}; and</li>
     * <li>The transaction write set has been discarded by each {@link Journal}
     * or {@link IDataService} or which it has written (applicable for
     * read-write transactions only).</li>
     * </ol>
     * <p>
     * 
     * @param state
     *            The transaction state as maintained by the transaction server.
     */
    abstract protected void abortImpl(final TxState state) throws Exception;

    /**
     * Implementation must either single-phase commit (standalone journal or a
     * transaction that only writes on a single data service) or 2-/3-phase
     * commit (distributed transaction running on a federation).
     * <p>
     * Pre-conditions:
     * <ol>
     * <li>The transaction is {@link RunState#Active}; and</li>
     * <li>The caller holds the {@link TxState#lock}.</li>
     * </ol>
     * <p>
     * Post-conditions (success for read-only transaction or a read-write
     * transaction with an empty write set):
     * <ol>
     * <li>The transaction is {@link RunState#Committed}; and</li>
     * <li>The returned <i>commitTime</i> is ZERO (0L).</li>
     * </ol>
     * <p>
     * Post-conditions (success for read-write transaction with a non-empty
     * write set):
     * <ol>
     * <li>The transaction is {@link RunState#Committed};</li>
     * <li>The transaction write set has been made restart-safe by each
     * {@link Journal} or {@link IDataService} or which it has written
     * (applicable for read-write transactions only); and</li>
     * <li>The application can read exactly the data written by the transaction
     * from the commit point identified by the returned <i>commitTime</i>.</li>
     * </ol>
     * <p>
     * Post-conditions (failure):
     * <ol>
     * <li>The transaction is {@link RunState#Aborted}; and</li>
     * <li>The transaction write set has been discarded by each {@link Journal}
     * or {@link IDataService} or which it has written (applicable for
     * read-write transactions only).</li>
     * </ol>
     * 
     * @param tx
     *            The transaction identifier.
     * 
     * @return The commit time for the transaction -or- ZERO (0L) if the
     *         transaction was read-only or had an empty write set.
     * 
     * @throws Exception
     *             if something else goes wrong. This will be (or will wrap) a
     *             {@link ValidationError} if validation fails.
     */
    abstract protected long commitImpl(final TxState state) throws Exception;

    /**
     * Abort the transaction (asynchronous).
     */
    public void abort(final long tx) {

        setupLoggingContext();
        
        try {

            switch (runState) {
            case Running:
            case Shutdown:
                break;
            default:
                throw new IllegalStateException(ERR_SERVICE_NOT_AVAIL);
            }
            
            final TxState state = activeTx.get(tx);

            if (state == null)
                throw new IllegalStateException(ERR_NO_SUCH);

            boolean wasActive = false;
            state.lock.lock();

            try {

                if (!state.isActive()) {

                    throw new IllegalStateException(ERR_NOT_ACTIVE);

                }
                wasActive = true;

                try {

                    abortImpl(state);
                    
                    assert state.isAborted() : state.toString();

                } catch (Throwable t) {

                    log.error(state.toString(),t);
                    
//                } finally {
//
//                    deactivateTx(state);
//                    
                }

            } finally {

//                state.lock.unlock();
                try {
                    if (wasActive) {
                        deactivateTx(state);
                    }
                } finally {
                    /*
                     * Note: This avoids a lock ordering problem by releasing
                     * the inner lock (state.lock) before acquiring the order
                     * lock.
                     */
                    state.lock.unlock();
                    if (wasActive) {
                        lock.lock();
                        try {
                            updateReleaseTime(Math.abs(state.tx));
                            /*
                             * Note: signalAll() is required. See code that
                             * searches the half-open range for a
                             * read-historical timestamp. It waits on this
                             * signal, but there can be more than one request
                             * waiting an requests can be waiting on different
                             * half-open ranges.
                             */
                            txDeactivate.signalAll();
                        } finally {
                            lock.unlock();
                        }
                    }
                }
            }

        } finally {

            clearLoggingContext();

        }

    }

    public long commit(final long tx) throws ValidationError {

        setupLoggingContext();

        try {

            switch (runState) {
            case Running:
            case Shutdown:
                break;
            default:
                throw new IllegalStateException(ERR_SERVICE_NOT_AVAIL);
            }

            final TxState state = activeTx.get(tx);

            if (state == null) {

                throw new IllegalStateException(ERR_NO_SUCH);

            }

            boolean wasActive = false;
            state.lock.lock();

            try {

                if (!state.isActive()) {

                    throw new IllegalStateException(ERR_NOT_ACTIVE);

                }
                wasActive = true;

                try {

                    final long commitTime = commitImpl(state);

                    assert state.isCommitted() : "tx=" + state;

                    return commitTime;

                } catch (Throwable t2) {

//                    log.error(t2.getMessage(), t2);

                    assert state.isAborted() : "ex=" + t2 + ", tx=" + state;

                    if (InnerCause.isInnerCause(t2, ValidationError.class)) {

                        throw new ValidationError();

                    }

                    log.error(t2.getMessage(), t2);

                    throw new RuntimeException(t2);

                }

            } finally {

                try {
                    if (wasActive) {
                        deactivateTx(state);
                    }
                } finally {
                    /*
                     * Note: This avoids a lock ordering problem by releasing
                     * the inner lock (state.lock) before acquiring the order
                     * lock.
                     */
                    state.lock.unlock();
                    if (wasActive) {
                        lock.lock();
                        try {
                            updateReleaseTime(Math.abs(state.tx));
                            /*
                             * Note: signalAll() is required. See code that
                             * searches the half-open range for a
                             * read-historical timestamp. It waits on this
                             * signal, but there can be more than one request
                             * waiting an requests can be waiting on different
                             * half-open ranges.
                             */
                            txDeactivate.signalAll();
                        } finally {
                            lock.unlock();
                        }
                    }
                }

            }

        } finally {

            clearLoggingContext();

        }

    }

    /**
     * Note: Only those {@link DataService}s on which a read-write transaction
     * has started will participate in the commit. If there is only a single
     * such {@link IDataService}, then a single-phase commit will be used.
     * Otherwise a distributed transaction commit protocol will be used.
     * <p>
     * Note: The commits requests are placed into a partial order by sorting the
     * total set of resources which the transaction declares (via this method)
     * across all operations executed by the transaction and then contending for
     * locks on the named resources using a LockManager. This is
     * handled by the {@link DistributedTransactionService}.
     */
    public void declareResources(final long tx, final UUID dataServiceUUID,
            final String[] resource) throws IllegalStateException {

        setupLoggingContext();

        lock.lock();
        try {

            switch (getRunState()) {
            case Running:
            case Shutdown:
                break;
            default:
                throw new IllegalStateException(ERR_SERVICE_NOT_AVAIL);
            }

            if (dataServiceUUID == null)
                throw new IllegalArgumentException();

            if (resource == null)
                throw new IllegalArgumentException();

            final TxState state = activeTx.get(tx);

            if (state == null) {

                throw new IllegalStateException(ERR_NO_SUCH);

            }

            state.lock.lock();

            try {

                if (state.isReadOnly()) {

                    throw new IllegalStateException(ERR_READ_ONLY);

                }

                if (!state.isActive()) {

                    throw new IllegalStateException(ERR_NOT_ACTIVE);

                }

                state.declareResources(dataServiceUUID, resource);

            } finally {

                state.lock.unlock();

            }

        } finally {

            lock.unlock();
            clearLoggingContext();

        }
        
    }

    /**
     * Transaction state as maintained by the {@link ITransactionService}.
     * <p>
     * Note: The commitTime and revisionTime are requested by the local
     * transaction manager for single phase commits, which means that this class
     * could only know their values for a distributed transaction commit. Hence
     * they are not represented here.
     * 
     * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
     * @version $Id$
     */
    protected class TxState {

        /**
         * The transaction identifier.
         */
        public final long tx;
        
        /**
         * <code>true</code> iff the transaction is read-only.
         */
        public final boolean readOnly;

        /**
         * The run state of the transaction (only accessible while you are
         * holding the {@link #lock}.
         */
        private RunState runState = RunState.Active;
        
        /**
         * Change the {@link RunState}.
         * 
         * @param newval
         *            The new {@link RunState}.
         * 
         * @throws IllegalArgumentException
         *             if the argument is <code>null</code>.
         * @throws IllegalStateException
         *             if the state transition is not allowed.
         * 
         * @see RunState#isTransitionAllowed(RunState)
         */
        public void setRunState(final RunState newval) {

            if (!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            if (newval == null)
                throw new IllegalArgumentException();
            
            if (!runState.isTransitionAllowed(newval)) {

                throw new IllegalStateException("runState=" + runState
                        + ", newValue=" + newval);

            }

            this.runState = newval;
            
        }
        
        /**
         * The commit time assigned to a distributed read-write transaction
         * during the commit protocol and otherwise ZERO (0L).
         */
        private long commitTime = 0L;
        
        /**
         * The commit time assigned to a distributed read-write transaction
         * during the commit protocol.
         * 
         * @return The assigned commit time.
         * 
         * @throws IllegalStateException
         *             if the commit time has not been assigned.
         */
        public long getCommitTime() {
            
            if (!lock.isHeldByCurrentThread()) {

                throw new IllegalMonitorStateException();
                
            }
            
            if (commitTime == 0L) {

                throw new IllegalStateException();
                
            }
            
            return commitTime;
            
        }

        /**
         * Sets the assigned commit time.
         * 
         * @param commitTime
         *            The assigned commit time.
         */
        protected void setCommitTime(final long commitTime) {

            if (!lock.isHeldByCurrentThread()) {

                throw new IllegalMonitorStateException();
                
            }
            
            if (commitTime == 0L) {
                
                throw new IllegalArgumentException();
                
            }

            if (this.commitTime != 0L) {
                
                throw new IllegalStateException();
                
            }
            
            this.commitTime = commitTime;

        }
        
        /**
         * The set of {@link DataService}s on which a read-write transaction
         * has been started and <code>null</code> if this is not a read-write
         * transaction.
         * <p>
         * Note: We only track this information for a distributed database.
         */
        private final Set<UUID/* dataService */> dataServices;

        /**
         * The set of named resources that the transaction has declared across
         * all {@link IDataService}s on which it has written and
         * <code>null</code> if this is not a read-write transaction.
         * <p>
         * Note: We only track this information for a distributed database.
         */
        private final Set<String/* name */> resources;

        /**
         * Return the resources declared by the transaction.
         */
        public String[] getResources() {

            if (!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            if (resources == null)
                return EMPTY;

            return resources.toArray(new String[] {});
            
        }
        
        /**
         * Return <code>true</code> iff the dataService identified by the
         * {@link UUID} is one on which this transaction has been started.
         * 
         * @param dataServiceUUID
         *            The {@link UUID} identifying an {@link IDataService}.
         * 
         * @return <code>true</code> if this transaction has been started on
         *         that {@link IDataService}. <code>false</code> for
         *         read-only transactions.
         */
        public boolean isStartedOn(final UUID dataServiceUUID) {
            
            if(!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            if (dataServiceUUID == null)
                throw new IllegalArgumentException();
            
            if (dataServices == null)
                return false;

            return dataServices.contains(dataServiceUUID);
            
        }
        
        /**
         * The set of {@link DataService}s on which the transaction has
         * written.
         * 
         * @throws IllegalStateException
         *             if not a read-write transaction.
         */
        protected UUID[] getDataServiceUUIDs() {

            if(!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();
            
            if (dataServices == null)
                throw new IllegalStateException();
            
            return dataServices.toArray(new UUID[] {});
            
        }

        /**
         * A per-transaction lock used to serialize operations on a given
         * transaction. You need to hold this lock for most of the operations on
         * this class, including any access to the {@link RunState}.
         * <p>
         * Note: DO NOT attempt to acquire the outer
         * {@link AbstractTransactionService#lock} if you are already holding
         * this {@link #lock}. This is a lock ordering problem and can result in
         * a deadlock.
         */
        final protected ReentrantLock lock = new ReentrantLock();
        
        protected TxState(final long tx) {
            
            if (tx == ITx.UNISOLATED)
                throw new IllegalArgumentException();

            if (tx == ITx.READ_COMMITTED)
                throw new IllegalArgumentException();
            
            this.tx = tx;
            
            this.readOnly = TimestampUtility.isReadOnly(tx);
                       
            // pre-compute the hash code for the transaction.
            this.hashCode = Long.valueOf(tx).hashCode();

            this.dataServices = readOnly ? null : new LinkedHashSet<UUID>();

            this.resources = readOnly ? null : new LinkedHashSet<String>();
            
        }

        /**
         * The hash code is based on the {@link #getStartTimestamp()}.
         */
        final public int hashCode() {
            
            return hashCode;

        }

        private final int hashCode;

        /**
         * True iff they are the same object or have the same start timestamp.
         * 
         * @param o
         *            Another transaction object.
         */
        final public boolean equals(ITx o) {

            return this == o || tx == o.getStartTimestamp();

        }

        /**
         * Declares resources on a data service instance on which the
         * transaction will write.
         * 
         * @param dataService
         *            The data service identifier.
         * @param resource
         *            An array of named resources on the data service on which
         *            the transaction will write (or at least for which it
         *            requires an exclusive write lock).
         * 
         * @throws IllegalStateException
         *             if the transaction is read-only.
         * @throws IllegalStateException
         *             if the transaction is not active.
         */
        final public void declareResources(final UUID dataService,
                final String[] resource) {

            if (dataService == null)
                throw new IllegalArgumentException();
            
            if (resource == null)
                throw new IllegalArgumentException();
            
            if (!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            if (readOnly)
                throw new IllegalStateException(ERR_READ_ONLY);

            if (!isActive())
                throw new IllegalStateException(ERR_NOT_ACTIVE);

            dataServices.add(dataService);
            
            // Note: sufficient to prevent deadlocks when there are shared indices.
            resources.addAll(Arrays.asList(resource));
            
            if (log.isInfoEnabled())
                log.info("dataService=" + dataService + ", resource="
                        + Arrays.toString(resource));

        }

//        /**
//         * Return <code>true</code> if the transaction is read-only or if a
//         * read-write transaction has not been started on any
//         * {@link IDataService}s.
//         * <p>
//         * <strong>WARNING: This method should only be used for distributed
//         * databases. It will always report [false] for a standalone database
//         * since
//         * {@link ITransactionService#declareResources(long, UUID, String[])} is
//         * not invoked for a standalone database!</strong>
//         */
//        final public boolean isEmptyWriteSet() {
//
//            if(!lock.isHeldByCurrentThread())
//                throw new IllegalMonitorStateException();
//
//            return readOnly || dataServices.isEmpty();
//
//        }

        /**
         * Return the #of {@link IDataService}s on which a read-write
         * transaction has executed an operation.
         * 
         * @return The #of {@link IDataService}.
         * 
         * @throws IllegalStateException
         *             if the transaction is read-only.
         * @throws IllegalMonitorStateException
         *             if the caller does not hold the lock.
         */
        final public int getDataServiceCount() {
            
            if(!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            if(readOnly)
                throw new IllegalStateException(ERR_READ_ONLY);
            
            return dataServices.size();

        }
        
        /**
         * Return <code>true</code> iff a read-write transaction has started on
         * more than one {@link IDataService}.
         */
        final boolean isDistributedTx() {

            if(!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            return !readOnly && dataServices.size() > 1;

        }

        /**
         * Returns a string representation of the transaction state.
         */
        final public String toString() {

            /*
             * Note: info reported here MUST be safe and MUST NOT require a
             * lock!
             */
            
//            return Long.toString(tx);
            
            return "GlobalTxState{tx=" + tx + ",readOnly=" + readOnly
                    + ",runState=" + runState + "}";

        }

        final public boolean isReadOnly() {

            return readOnly;

        }

        final public boolean isActive() {

            if(!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            return runState == RunState.Active;

        }

        final public boolean isPrepared() {

            if(!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            return runState == RunState.Prepared;

        }

        final public boolean isComplete() {

            if(!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            return runState == RunState.Committed
                    || runState == RunState.Aborted;

        }

        final public boolean isCommitted() {

            if(!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            return runState == RunState.Committed;

        }

        final public boolean isAborted() {

            if(!lock.isHeldByCurrentThread())
                throw new IllegalMonitorStateException();

            return runState == RunState.Aborted;

        }

    }

    /**
     * Verifies that {@link #nextTimestamp()} will not report a time before
     * {@link #getLastCommitTime()} and then changes the {@link TxServiceRunState}
     * to {@link TxServiceRunState#Running}.
     */
    public AbstractTransactionService start() {

        if(log.isInfoEnabled()) 
            log.info("");

        lock.lock();

        try {

            switch (getRunState()) {
            case Starting:
                break;
            default:
                throw new IllegalStateException();
            }
            
            final long timestamp = _nextTimestamp();

            final long lastCommitTime = getLastCommitTime();

            if (timestamp < lastCommitTime) {

                throw new RuntimeException(
                        "Clock reporting timestamps before lastCommitTime: now="
                                + new Date(timestamp) + ", lastCommitTime="
                                + new Date(lastCommitTime));

            }

            /*
             * Note: This computes the releaseTime on startup.
             * 
             * Note: While nextTimestamp() is not really a transaction, it is LT
             * any possible transaction identifier (since there are no running
             * transactions).
             */
            updateReleaseTime(timestamp);

            setRunState(TxServiceRunState.Running);

        } finally {

            lock.unlock();

        }
        
        return this;
        
    }

    public Class getServiceIface() {

        return ITransactionService.class;
        
    }
    
    private static transient final String[] EMPTY = new String[0];

    /**
     * Return the {@link CounterSet}.
     * 
     * @todo define interface declaring the counters reported here.
     */
    synchronized public CounterSet getCounters() {
        
        if (countersRoot == null) {

            countersRoot = new CounterSet();

            countersRoot.addCounter("runState", new Instrument<String>() {
                protected void sample() {
                    setValue(runState.toString());
                }
            });

            countersRoot.addCounter("#active", new Instrument<Integer>() {
                protected void sample() {
                    setValue(getActiveCount());
                }
            });

            countersRoot.addCounter("lastCommitTime", new Instrument<Long>() {
                protected void sample() {
                    setValue(getLastCommitTime());
                }
            });

            countersRoot.addCounter("minReleaseAge", new Instrument<Long>() {
                protected void sample() {
                    setValue(getMinReleaseAge());
                }
            });

            countersRoot.addCounter("releaseTime", new Instrument<Long>() {
                protected void sample() {
                    setValue(getReleaseTime());
                }
            });

            countersRoot.addCounter("startCount", new Instrument<Long>() {
                protected void sample() {
                    setValue(getStartCount());
                }
            });
            
            countersRoot.addCounter("abortCount", new Instrument<Long>() {
                protected void sample() {
                    setValue(getAbortCount());
                }
            });
            
            countersRoot.addCounter("commitCount", new Instrument<Long>() {
                protected void sample() {
                    setValue(getCommitCount());
                }
            });
            
            countersRoot.addCounter("readOnlyActiveCount", new Instrument<Long>() {
                protected void sample() {
                    setValue(getReadOnlyActiveCount());
                }
            });
            
            countersRoot.addCounter("readWriteActiveCount", new Instrument<Long>() {
                protected void sample() {
                    setValue(getReadWriteActiveCount());
                }
            });

            /*
             * Reports the earliest transaction identifier -or- ZERO (0L) if
             * there are no active transactions.
             */
            countersRoot.addCounter("earliestTx", new Instrument<Long>() {
                protected void sample() {
                    synchronized (startTimeIndex) {
                        if (startTimeIndex.getEntryCount() == 0) {
                            // i.e., nothing running.
                            setValue(0L);
                        }
                        final long tx = startTimeIndex.find(1L);
                        setValue(tx);
                    }
                }
            });

        }
        
        return countersRoot;
        
    }
    protected CounterSet countersRoot;

}
