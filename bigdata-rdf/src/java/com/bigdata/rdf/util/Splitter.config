import java.io.File;
import com.bigdata.rdf.util.Splitter.CompressEnum;

/**
 * Sample configuration for a utility to split RDF files.  The RDF format and
 * file compression may be different for the input and output.
 */
com.bigdata.rdf.util.Splitter {

	// Source file or directory (required).
	//srcDir = new File("/data/2010_btc");
	srcDir = new File("D:/bigdata-perf-analysis/btc/btc-2009-small.nq.gz");
	
	// File name filter for the srcDir (optional).
	srcFilter = new com.bigdata.rdf.load.RDFFilenameFilter();
	
	/* The name of the default RDFFormat for the source files (optional).  The
	 * known values are:  "RDF/XML", "N-Triples", "Turtle", "N3", "TriX", "TriG",
	 * "nquads".
	 */
	srcFormat = "nquads";

	// The output directory (required).
	//outDir = new File("/tmp");
	outDir = new File("D:/temp");

	/* The name of the default RDFFormat for the output files (optional).  The
	 * known values are:  "RDF/XML", "N-Triples", "Turtle", "N3", "TriX", "TriG",
	 * "nquads". The default is whatever the input file was.
	 */
	outFormat = "TriG";

	// The output compression mode: None, Zip, or GZip.	 
	outCompress = CompressEnum.GZip;
	 
	// The number of statements per output file.
	outChunkSize = 100000;
	 
	// true to use a nested output directory hierarchy.
	subdirs = true;

	// ext3 has a limit of ~ 32k.
 	//maxPerSubDir = 5;
	 
	// The #of concurrent source files to process.
	//threadPoolSize = 10;

}
