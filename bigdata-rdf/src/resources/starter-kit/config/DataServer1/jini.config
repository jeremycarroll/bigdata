import java.io.File;

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import com.bigdata.util.NV;
import com.bigdata.service.DataService;

/*
 * Declares how the service will provision itself.
 */
ServiceDescription {

	/*
	 * This object is used to export the service proxy.  The choice here effects
	 * the protocol that will be used for communications between the clients and
	 * the service.
	 *
	 * @todo Explore JERI nio option and customization support for serialization.
	 */
    exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                     new BasicILFactory()); 
       
    /*
     * The service data directory.
     */
    dataDir = "/var/bigdata/DataServer1";
    
	/*                                          
	 * The file on which the serviceID will be written.
	 */
    serviceIdFile = new File(dataDir+"/service.id"); 
    
	/*    
	 * The name of the optional property file containing the configuration information for
	 * the service itself (where it will locate its files, etc).  When present,
	 * this file will be read and [properties] may be used to override the value
	 * read from the [propertyFile].
	 */
    // propertyFile = new File("bigdata.properties");

	/* 
	 * Optional inline properties for the service configuration.  Any values specified here
	 * will OVERRIDE any values read from the optional [propertyFile].
	 */
	properties = new NV[] {

		/* How much history to retain after an overflow event (milliseconds) or
		 * zero if the service should not hold onto history.
		 */
		new NV(DataService.Options.MIN_RELEASE_AGE,"0"),

		/*
		 * Initial and maximum extent for the live journal (200M)
		 */
		new NV(DataService.Options.INITIAL_EXTENT,"209715200"),
		new NV(DataService.Options.MAXIMUM_EXTENT,"209715200"),
		
		/*
		 * The data directory (required).  All persistent data is stored here.
		 */
		new NV(DataService.Options.DATA_DIR,dataDir)

		};

}

/*
 * Declares how the service will advertise itself.
 */
AdvertDescription {

	/*
	 * Entry attributes used to describe the service.
	 */
    entries = new Entry[] {
                new Name("DataService1"), // human facing name.
                new ServiceInfo("bigdata", // product or package name
                        "SYSTAP,LLC", // manufacturer
                        "SYSTAP,LLC", // vendor
                        "0.1-beta", // version
                        "DataService", // model
                        "serial#" // serialNumber
                ) };

	/*
	 * Note: multicast discovery is always used if LookupDiscovery.ALL_GROUPS is
	 * specified.
	 */
//    groups = LookupDiscovery.ALL_GROUPS;
    groups = new String[]{"bigdata"};

	/*
	 * One or more unicast URIs of the form jini://host/ or jini://host:port/.
	 * This MAY be an empty array if you want to use multicast discovery _and_
	 * you have specified LookupDiscovery.ALL_GROUPS above.
	 */
    unicastLocators = new LookupLocator[] {
    	//new LookupLocator("jini://localhost/")
//	new LookupLocator("jini://192.168.20.28/")
	};    

}
