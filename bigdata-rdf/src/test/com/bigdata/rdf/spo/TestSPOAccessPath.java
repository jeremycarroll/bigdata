/**

Copyright (C) SYSTAP, LLC 2006-2007.  All rights reserved.

Contact:
     SYSTAP, LLC
     4501 Tower Road
     Greensboro, NC 27410
     licenses@bigdata.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
/*
 * Created on Oct 25, 2007
 */

package com.bigdata.rdf.spo;

import com.bigdata.btree.BytesUtil;
import com.bigdata.btree.keys.KeyBuilder;
import com.bigdata.rdf.store.AbstractTripleStore;
import com.bigdata.rdf.store.AbstractTripleStoreTestCase;
import com.bigdata.rdf.store.TestTripleStore;
import com.bigdata.relation.accesspath.AbstractAccessPath;

/**
 * Test suite for {@link SPOAccessPath}.
 * <p>
 * See also {@link TestTripleStore} which tests some of this stuff.
 * 
 * FIXME write tests for SLICE with non-zero offset and non-zero LIMIT.
 * 
 * FIXME write tests for SLICE where the maximum fully buffered limit is
 * exceeded so we are forced to use the asynchronous iterator on
 * {@link AbstractAccessPath}.
 * 
 * @author <a href="mailto:thompsonbry@users.sourceforge.net">Bryan Thompson</a>
 * @version $Id$
 */
public class TestSPOAccessPath extends AbstractTripleStoreTestCase {

    /**
     * 
     */
    public TestSPOAccessPath() {
        super();
    }

    /**
     * @param name
     */
    public TestSPOAccessPath(String name) {
        super(name);
    }

    /**
     * There are 8 distinct triple pattern bindings for a triple store that
     * select among 3 distinct access paths.
     */
    public void test_getAccessPath() {
       
        final AbstractTripleStore store = getStore();

        // constants used for s,p,o,c when bound. 0L used when unbound.
        final long S = 1, P = 2, O = 3, C = 4, _ = 0;

        try {

            final SPORelation r = store.getSPORelation();

            if (store.isQuads()) {

                /*
                 * For a quad store there are 16 distinct binding patterns that
                 * select among 6 distinct access paths. there are some quad
                 * patterns which could be mapped onto more than one access
                 * path, but the code here checks the expected mapping. These
                 * mappings are similar to those in YARS2, but are the mappings
                 * generated by the "Magic" tuple logic.
                 */

                // SPOC
                assertEquals(SPOKeyOrder.SPOC, r.getAccessPath(_, _, _, _).getKeyOrder());
                assertEquals(SPOKeyOrder.SPOC, r.getAccessPath(S, _, _, _).getKeyOrder());
                assertEquals(SPOKeyOrder.SPOC, r.getAccessPath(S, P, _, _).getKeyOrder());
                assertEquals(SPOKeyOrder.SPOC, r.getAccessPath(S, P, O, _).getKeyOrder());
                assertEquals(SPOKeyOrder.SPOC, r.getAccessPath(S, P, O, C).getKeyOrder());
                
                // POCS
                assertEquals(SPOKeyOrder.POCS, r.getAccessPath(_, P, _, _).getKeyOrder());
                assertEquals(SPOKeyOrder.POCS, r.getAccessPath(_, P, O, _).getKeyOrder());
                assertEquals(SPOKeyOrder.POCS, r.getAccessPath(_, P, O, C).getKeyOrder());
                
                // OCSP
                assertEquals(SPOKeyOrder.OCSP, r.getAccessPath(_, _, O, _).getKeyOrder());
                assertEquals(SPOKeyOrder.OCSP, r.getAccessPath(_, _, O, C).getKeyOrder());
                assertEquals(SPOKeyOrder.OCSP, r.getAccessPath(S, _, O, C).getKeyOrder());
                
                // CSPO
                assertEquals(SPOKeyOrder.CSPO, r.getAccessPath(_, _, _, C).getKeyOrder());
                assertEquals(SPOKeyOrder.CSPO, r.getAccessPath(S, _, _, C).getKeyOrder());
                assertEquals(SPOKeyOrder.CSPO, r.getAccessPath(S, P, _, C).getKeyOrder());
                
                // PCSO
                assertEquals(SPOKeyOrder.PCSO, r.getAccessPath(_, P, _, C).getKeyOrder());

                // SOPC
                assertEquals(SPOKeyOrder.SOPC, r.getAccessPath(S, _, O, _).getKeyOrder());

            } else {
                
                assertEquals(SPOKeyOrder.SPO, r.getAccessPath(NULL, NULL, NULL,
                        NULL).getKeyOrder());

                assertEquals(SPOKeyOrder.SPO, r.getAccessPath(1, NULL, NULL,
                        NULL).getKeyOrder());

                assertEquals(SPOKeyOrder.SPO, r.getAccessPath(1, 1, NULL, NULL)
                        .getKeyOrder());

                assertEquals(SPOKeyOrder.SPO, r.getAccessPath(1, 1, 1, NULL)
                        .getKeyOrder());

                assertEquals(SPOKeyOrder.POS, r.getAccessPath(NULL, 1, NULL,
                        NULL).getKeyOrder());

                assertEquals(SPOKeyOrder.POS, r.getAccessPath(NULL, 1, 1, NULL)
                        .getKeyOrder());

                assertEquals(SPOKeyOrder.OSP, r.getAccessPath(NULL, NULL, 1,
                        NULL).getKeyOrder());

                assertEquals(SPOKeyOrder.OSP, r.getAccessPath(1, NULL, 1, NULL)
                        .getKeyOrder());

            }

        } finally {

            store.__tearDownUnitTest();

        }

    }

    /**
     * Unit test examines the correct formulation of the from/to keys for the
     * {@link SPOAccessPath} when when there are some unbound variables in the
     * {@link SPOPredicate}.
     */
    public void test_unboundVars() {

        final AbstractTripleStore store = getStore();

        try {

            final SPORelation r = store.getSPORelation();

            final long S = NULL, P = 1, O = NULL, C = NULL; 
            
            final SPOAccessPath accessPath = (SPOAccessPath)r.getAccessPath(S, P, O, C);

            final KeyBuilder keyBuilder = new KeyBuilder();
            
            if(store.isQuads()) {

                /*
                 * Quads.
                 */
                
                if (SPOKeyOrder.PCSO != accessPath.getKeyOrder()
                        && SPOKeyOrder.POCS != accessPath.getKeyOrder()) {

                    fail("Expecting either PCSO or POCS, not "
                            + accessPath.getKeyOrder().getIndexName());
                    
                }

                /*
                 * This is the access path that is actually choosen. The rest of
                 * the test logic depends on the specific access path so we
                 * check this here.
                 */
                assertEquals(SPOKeyOrder.POCS, accessPath.getKeyOrder());

                final byte[] fromKey = keyBuilder.reset().append(P).append(
                        Long.MIN_VALUE).append(Long.MIN_VALUE).append(
                        Long.MIN_VALUE).getKey();

                final byte[] toKey = keyBuilder.reset().append(P + 1).append(
                        Long.MAX_VALUE).append(Long.MAX_VALUE).append(
                        Long.MAX_VALUE).getKey();

                if(log.isInfoEnabled()) {
                    log.info("fromKey="+BytesUtil.toString(fromKey));
                    log.info("  toKey="+BytesUtil.toString(toKey));
                }

                if (!BytesUtil.bytesEqual(fromKey, accessPath.getFromKey())) {
                    fail("fromKey :: expected=" + BytesUtil.toString(fromKey)
                            + ", actual="
                            + BytesUtil.toString(accessPath.getFromKey()));
                }
                if (!BytesUtil.bytesEqual(toKey, accessPath.getToKey())) {
                    fail("toKey :: expected=" + BytesUtil.toString(toKey)
                            + ", actual="
                            + BytesUtil.toString(accessPath.getToKey()));
                }
               
            } else {

                /*
                 * Triples.
                 */
                
                assertEquals(SPOKeyOrder.POS, accessPath.getKeyOrder());

                final byte[] fromKey = keyBuilder.reset().append(P).append(
                        Long.MIN_VALUE).append(Long.MIN_VALUE).getKey();

                final byte[] toKey = keyBuilder.reset().append(P + 1).append(
                        Long.MAX_VALUE).append(Long.MAX_VALUE).getKey();

                if(log.isInfoEnabled()) {
                    log.info("fromKey="+BytesUtil.toString(fromKey));
                    log.info("  toKey="+BytesUtil.toString(toKey));
                }

                if (!BytesUtil.bytesEqual(fromKey, accessPath.getFromKey())) {
                    fail("fromKey :: expected=" + BytesUtil.toString(fromKey)
                            + ", actual="
                            + BytesUtil.toString(accessPath.getFromKey()));
                }
                if (!BytesUtil.bytesEqual(toKey, accessPath.getToKey())) {
                    fail("toKey :: expected=" + BytesUtil.toString(toKey)
                            + ", actual="
                            + BytesUtil.toString(accessPath.getToKey()));
                }
                
            }

        } finally {

            store.__tearDownUnitTest();

        }

    }
    
    /**
     * @todo write tests of slice where offset=0, offset>0. test with limit at
     *       fence posts (0,1) and with limit GT the maximum that can be fully
     *       buffered. verify stable result sets by using a slice to page
     *       through the results.
     */
    public void test_slice() {
        
//        fail("write tests");
        
    }
    
}
