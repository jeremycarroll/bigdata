<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bigdata</groupId>
    <artifactId>bigdata</artifactId>
    <version>0.83.2-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>bigdata</name>
    <url>http://www.bigdata.com</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <test.codebase.port>23333</test.codebase.port>
        <test.dist.dir>${project.build.directory}/${project.artifactId}-${project.version}-deploy/${project.artifactId}-${project.version}/dist/bigdata</test.dist.dir>
        <dep.libs.dir>${project.build.directory}/dependencies</dep.libs.dir>

        <!-- Non-public bigdata dependencies. Used for install and deploy phases. -->
        <thirdParty.groupId>com.bigdata.thirdparty</thirdParty.groupId>
        <!-- TODO: look at maven-bundle-plugin from felix to provide osgi support.  bndlib version 0.0.357 in central. -->
        <cweb-extser.artifactId>cweb-extser</cweb-extser.artifactId>
        <cweb-extser.version>0.1.0-b2-dev</cweb-extser.version>
        <unimi-fastutil.artifactId>unimi-fastutil</unimi-fastutil.artifactId>
        <unimi-fastutil.version>5.1.5</unimi-fastutil.version>
        <lgpl-utils.artifactId>lgpl-utils</lgpl-utils.artifactId>
        <lgpl-utils.version>1.0.6</lgpl-utils.version>
        <ctc-utils.artifactId>ctc-utils</ctc-utils.artifactId>
        <ctc-utils.version>5-4-2005</ctc-utils.version>
        <dsi-utils.artifactId>dsi-utils</dsi-utils.artifactId>
        <dsi-utils.version>1.0.6-020610</dsi-utils.version>
        <colt.artifactId>colt</colt.artifactId>
        <colt.version>1.2.0</colt.version>
        <high-scale.artifactId>high-scale-lib</high-scale.artifactId>
        <high-scale.version>1.1.2</high-scale.version>
        <iris.artifactId>iris</iris.artifactId>
        <iris.version>0.58</iris.version>
        <nxparser.artifactId>nxparser</nxparser.artifactId>
        <nxparser.version>6-22-2010</nxparser.version>
    </properties>


    <build>
        <plugins>
            <!-- Use Java 1.5 keywords, target running on a 1.5 JVM -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                    <compilerArguments>
                        <!--
                             Apparently Javac may compile java source files inside jars put on the classpath.  Weird.
                             Zookeeper 3.2.1 jar contained classes and sources, and under some circumstances,
                             the java files were getting recompiled and put into the bigdata jar.  This setting
                             forces javac to only look for source in the current maven source directory.
                        -->
                        <sourcepath>${project.build.sourceDirectory}</sourcepath>
                    </compilerArguments>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.3.1</version>
                <executions>
                    <execution>
                        <!-- build the main bigdata jar. -->
                        <id>jar-main-jar</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                    <execution>
                        <!-- build a jar for all the test code, will be named ****-tests.jar -->
                        <id>jar-test-jar</id>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                    <execution>
                        <!-- build an executable jar for launching the bigdata / JINI lookup service, will be named ****-lookupstarter.jar -->
                        <id>jar-lookupstarter-jar</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>lookupstarter</classifier>
                            <includes>
                                <include>**/LookupStarter*.class</include>
                                <include>**/LogUtil.class</include>
                                <include>**/NicUtil.class</include>
                                <include>**/log4j.properties</include>
                            </includes>
                            <archive>
                                <manifest>
                                    <addClasspath>false</addClasspath>
                                    <mainClass>com.bigdata.service.jini.util.LookupStarter</mainClass>
                                </manifest>
                                <manifestEntries><!-- Not the normal way to do this, but cleaner than using maven classpath -->
                                    <Class-Path>log4j.jar jsk-platform.jar jsk-lib.jar start.jar ${project.artifactId}.jar</Class-Path>
                                </manifestEntries>
                            </archive>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <!-- TODO: BLECH!  All the tests are excluded from the regular unit test phase.
                         TODO: Need to split out the unit tests and the heavier integration tests, plus
                         TODO: get all the unit tests passing so regressions can properly fail the build.
                    -->
                    <testFailureIgnore>true</testFailureIgnore>
                    <includes/>
                    <excludes>
                        <exclude>**/*</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <!-- These are where the heavier tests can be run.  Right now failsafe looks for tests starting or ending
                     with IT,  aka  FooIT.java or ITFoo.java, which don't exist yet, so nothing runs.
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.5</version>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- Workaround assembly issue for nicely organized libs in the deployment tarball.  For more info
                     see src/main/assemblies/deploy.xml
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.1</version>
                <executions>
                    <execution>
                        <id>copy-runtime-jars</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeScope>runtime</includeScope>
                            <excludeClassifiers>dl</excludeClassifiers>
                            <stripVersion>true</stripVersion>
                            <outputDirectory>${dep.libs.dir}/lib</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-dl-jars</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeScope>provided</includeScope>
                            <includeClassifiers>dl</includeClassifiers>
                            <stripVersion>true</stripVersion>
                            <outputDirectory>${dep.libs.dir}/lib-dl</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-test-jars</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <excludeScope>runtime</excludeScope>
                            <excludeClassifiers>dl</excludeClassifiers><!-- TODO: figure out why this doesn't exclude the dl jars -->
                            <stripVersion>true</stripVersion>
                            <outputDirectory>${dep.libs.dir}/lib-test</outputDirectory>
                        </configuration>
                    </execution>
                </executions>

            </plugin>


            <plugin>
                <!-- Builds the deployment tarball. -->
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.2-beta-5</version>
                <configuration>
                    <descriptors>
                        <descriptor>src/main/assembly/deploy.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-deployment</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


        </plugins>

    </build>


    <dependencies>

       

        <!-- ************************ Start of non-public dependencies ************************ -->
        <!-- ************************ Start of non-public dependencies ************************ -->
        <!-- ************************ Start of non-public dependencies ************************ -->
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>${cweb-extser.artifactId}</artifactId>
            <version>[${cweb-extser.version}]</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>cweb-junit-ext</artifactId>
            <version>1.1.0-b3-dev</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>cweb-commons</artifactId>
            <version>1.1.0-b2-dev</version>
        </dependency>

        <dependency>
            <groupId>${thirdParty.groupId}</groupId> <!-- TODO: An older version (5.0.9) is available in central. -->
            <artifactId>${unimi-fastutil.artifactId}</artifactId>
            <version>[${unimi-fastutil.version}]</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>${lgpl-utils.artifactId}</artifactId>
            <version>[${lgpl-utils.version}]</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>${ctc-utils.artifactId}</artifactId>
            <version>[${ctc-utils.version}]</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>${dsi-utils.artifactId}</artifactId>
            <version>[${dsi-utils.version}]</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>${high-scale.artifactId}</artifactId>
            <version>[${high-scale.version}]</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>${iris.artifactId}</artifactId>
            <version>[${iris.version}]</version>
        </dependency>
        <dependency>
            <groupId>${thirdParty.groupId}</groupId>
            <artifactId>${nxparser.artifactId}</artifactId>
            <version>${nxparser.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId> <!-- TODO: This artifact is old, a newer (incompatable) version in central. -->
            <artifactId>zookeeper</artifactId>
            <version>3.2.1</version>
        </dependency>

        <!--  Apache River -->
        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>tools</artifactId>
            <version>[2.1]</version>
        </dependency>
        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>start</artifactId>
            <version>[2.1]</version>
        </dependency>
        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>tools</artifactId>
            <version>[2.1]</version>
        </dependency>
        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>jsk-lib</artifactId>
            <version>[2.1]</version>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>jsk-platform</artifactId>
            <version>[2.1]</version>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>reggie</artifactId>
            <version>2.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>classserver</artifactId>
            <version>2.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>browser</artifactId>
            <version>2.1</version>            
        </dependency>

        <!-- Note that these are dl jars, so they are provided and have a dl classifier. -->
        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>browser</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
            <classifier>dl</classifier>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>jsk</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
            <classifier>dl</classifier>
        </dependency>

        <dependency>
            <groupId>org.apache.river</groupId>
            <artifactId>reggie</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
            <classifier>dl</classifier>
        </dependency>
        <!-- ************************ End of non-public dependencies ************************ -->
        <!-- ************************ End of non-public dependencies ************************ -->
        <!-- ************************ End of non-public dependencies ************************ -->

        <!-- icu4j -->
        <dependency>
            <groupId>com.ibm.icu</groupId>
            <artifactId>icu4j</artifactId>
            <version>3.6.1</version>
        </dependency>

        <dependency> <!-- TODO: need to verify this public artifact is equivalent to private colt 1.2.0 jar, contents are different -->
            <groupId>colt</groupId>
            <artifactId>colt</artifactId>
            <version>1.2.0</version>
        </dependency>

        <dependency>
            <groupId>org.jgrapht</groupId>
            <artifactId>jgrapht-jdk1.5</artifactId>
            <version>0.7.3</version><!-- TODO: verify this public dep is good, previous dependency on 0.7.1 -->
        </dependency>


        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>


        <!-- slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.6.1</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.6.1</version>
            <scope>test</scope>
        </dependency>


        <!-- Log4J: not optional because source code has direct references -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.15</version>
            <!-- These exclusions are to address the fact that 1.2.15 added new features that depends on Sun specific
                 jars, but these jars cannot be made available due to Sun's click-through requirement on them.
                 We aren't using the new features anyway, so they are safe to exclude.  log4j should have made these
                 optional in their POM.
            -->
            <exclusions>
                <exclusion>
                    <groupId>javax.mail</groupId>
                    <artifactId>mail</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.jms</groupId>
                    <artifactId>jms</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.sun.jdmk</groupId>
                    <artifactId>jmxtools</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.sun.jmx</groupId>
                    <artifactId>jmxri</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Sesame -->

        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-sparql-testsuite</artifactId>
            <version>2.3.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-store-testsuite</artifactId>
            <version>2.3.0</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-model</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-query</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-rio-api</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryalgebra-model</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryalgebra-evaluation</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-sail-api</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryparser-api</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryparser-sparql</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-repository-api</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-repository-sail</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryresultio-sparqlxml</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-rio-rdfxml</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.openrdf.sesame</groupId>
            <artifactId>sesame-queryresultio-api</artifactId>
            <version>2.3.0</version>
        </dependency>

        <!-- Aduna -->
        <dependency>
            <groupId>info.aduna.commons</groupId>
            <artifactId>aduna-commons-xml</artifactId>
            <version>2.5.0</version>
        </dependency>
        <dependency>
            <groupId>info.aduna.commons</groupId>
            <artifactId>aduna-commons-iteration</artifactId>
            <version>2.6.0</version>
        </dependency>
        <dependency>
            <groupId>info.aduna.commons</groupId>
            <artifactId>aduna-commons-net</artifactId>
            <version>2.5.0</version>
        </dependency>
        <dependency>
            <groupId>info.aduna.commons</groupId>
            <artifactId>aduna-commons-text</artifactId>
            <version>2.5.0</version>
        </dependency>

        <!-- Lucene -->
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers</artifactId>
            <version>3.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!-- Jetty -->
        <dependency>
            <groupId>org.mortbay.jetty</groupId> <!-- TODO: verify if this is the best way to pick up the javax.servlet dependency -->
            <artifactId>servlet-api-2.5</artifactId>
            <version>6.1.14</version>
        </dependency>

        <!-- HttpClient -->
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>3.1</version>
        </dependency>

        <!--&lt;!&ndash;  JMX &ndash;&gt;-->
        <!--<dependency> &lt;!&ndash; Pretty sure this isn't needed JDK1.5 + &ndash;&gt;-->
            <!--<groupId>com.sun.jmx</groupId>-->
            <!--<artifactId>jmxri</artifactId>-->
            <!--<version>1.2.1</version>-->
        <!--</dependency>-->
        
    </dependencies>

    <reporting>
        <!-- generates junit results if site goal is run.  -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>2.5</version>
            </plugin>
        </plugins>
    </reporting>

    <repositories>
       
        <repository>
                <releases>
                        <enabled>true</enabled>
                </releases>
                <snapshots>
                        <enabled>false</enabled>
                </snapshots>
                <id>aduna-opensource.releases</id>
                <name>Aduna Open Source - Maven releases</name>
                <url>http://repo.aduna-software.org/maven2/releases</url>
        </repository>


    </repositories>


</project>
