<!-- @todo add dependencies for GOM and add GOM to sources that are compiled, jared, etc. -->
<!-- @todo trim fastutils using a tool to chase the actual class files that we use. -->
<!-- @todo change the release target to put release notes into the root of the archives. -->
<!-- @todo maven2 setup so we can run and publish unit tests results. -->
<project name="bigdata" default="jar" basedir=".">

    <property file="build.properties"/>

	<!-- build-time classpath. -->
    <path id="build.classpath">
        <fileset dir="${bigdata.dir}/bigdata/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${bigdata.dir}/bigdata-jini/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${bigdata.dir}/bigdata-rdf/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${bigdata.dir}/bigdata-sails/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

	<!-- runtime classpath w/o install. -->
    <path id="runtime.classpath">
        <pathelement location="${build.dir}"/>
        <path refid="build.classpath"/>
    </path>

	<!-- classpath as installed (you can add your application jars here). -->
	<!-- @todo bigdata-lubm/bigdata-lubm.jar; @todo configure classServer -->
	<!-- @todo .so and .dll -->
    <path id="install.classpath">
        <fileset dir="${install.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
	
    <target name="clean" description="cleans everything in [build.dir], but not the releases.">
        <delete dir="${build.dir}"/>
    </target>

    <target name="prepare">
    	<!-- setup ${version} for regular or snapshot. -->
	 	<tstamp>
    	   <format property="today" pattern="ddMMyy" locale="en,US"/>
    	</tstamp>
	  	<condition property="version"
  				value="bigdata-${build.ver}-${today}"
		  		else="bigdata-${build.ver}">
	  		<istrue value="${snapshot}"/>
  		</condition>
		<!--<echo message="today=${today}"/>-->
		<echo message="version=${version}"/>
    	<!-- create directories. -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/classes"/>
	    <mkdir dir="${build.dir}/docs"/>
	    <mkdir dir="${build.dir}/lib"/>
	    <mkdir dir="${build.dir}/src"/>
    </target>

	<!-- Note: javac error results often if verbose is disabled. -->
	<!-- I was able to perform a build with 1.6.0_07. -->
	<!-- I set the target to 1.5 to support deployment on non-1.6 JVMs. -->
    <target name="compile" depends="prepare">
        <mkdir dir="${build.dir}"/>
        <javac destdir="${build.dir}/classes" 
               classpathref="build.classpath"
        	   verbose="off"
        	   target="1.5"
        	   debug="${debug}" debuglevel="${debuglevel}"
       		>
            <src path="${bigdata.dir}/bigdata/src/java"/>
            <src path="${bigdata.dir}/bigdata-jini/src/java"/>
            <src path="${bigdata.dir}/bigdata-rdf/src/java"/>
            <src path="${bigdata.dir}/bigdata-sails/src/java"/>
        	<!-- Do not include the unit tests.
            <src path="${bigdata.dir}/bigdata/src/test"/>
            <src path="${bigdata.dir}/bigdata-jini/src/test"/>
            <src path="${bigdata.dir}/bigdata-rdf/src/test"/>
            <src path="${bigdata.dir}/bigdata-sails/src/test"/>
            -->
        </javac>
    	<!-- copy resources. -->
        <copy toDir="${build.dir}/classes">
            <fileset dir="${bigdata.dir}/bigdata/src/java">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
                <exclude name="**/BytesUtil.c"/>
            </fileset>
            <fileset dir="${bigdata.dir}/bigdata-jini/src/java">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
            <fileset dir="${bigdata.dir}/bigdata-rdf/src/java">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
            <fileset dir="${bigdata.dir}/bigdata-sails/src/java">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>
    </target>

    <target name="jar" depends="compile"
    	description="generates the jar.">
        <jar destfile="${build.dir}/${version}.jar">
            <fileset dir="${build.dir}/classes"/>
            <manifest>
                <!--<attribute name="Main-Class" value="com/bigdata/rdf/rio/TestRioIntegration"/>-->
            </manifest>
        </jar>
    </target>

	<!-- Note: the javadoc requires a LOT of RAM, but runs quickly on a
		 server	class machine. 
		 
		 @todo man page for [bigdata] script to @{build.dir}/docs
 	     
		 -->
	<target name="javadoc" depends="prepare" if="javadoc">
        <mkdir dir="${build.dir}/docs/api"/>
        <javadoc destdir="${build.dir}/docs/api"
        	defaultexcludes="yes"
        	         author="true"
        	        version="true"
        	            use="true"
        		   overview="../bigdata/overview.html"
				windowtitle="bigdata&#174;"
               classpathref="build.classpath">
            <packageset dir="${bigdata.dir}/bigdata/src/java"/>
            <packageset dir="${bigdata.dir}/bigdata-jini/src/java"/>
            <packageset dir="${bigdata.dir}/bigdata-rdf/src/java"/>
            <packageset dir="${bigdata.dir}/bigdata-sails/src/java"/>
			<doctitle><![CDATA[<h1>bigdata&#174;</h1>]]></doctitle>
	    	<bottom><![CDATA[<i>Copyright &#169; 2006-2009 SYSTAP, LLC. All Rights Reserved.</i>]]></bottom>
    		<tag name="todo" scope="all" description="TODO:"/>
    		<tag name="issue" scope="all" description="ISSUE:"/>
    		<!--tag name="FIXME" scope="all" description="FIXME:"/-->
		    <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
		    <link href="http://openrdf.org/doc/sesame/api/"/>
        </javadoc>
    </target>

	<target name="bundle"
		description="Bundles all dependencies for easier deployments and releases.">
		<copy toDir="${build.dir}/lib">
        <fileset dir="${bigdata.dir}/bigdata/lib">
            <include name="**/*.jar"/>
            <include name="**/*.so"/>
            <include name="**/*.dll"/>
        	<!-- ICU4JNI is not a supported configuration at this time. -->
			<exclude name="**/icu4jni.jar" />
			<exclude name="**/icu*.dll" />
			<exclude name="**/ICU*.dll" />
			<!-- The BytesUtil JNI class is not recommended at this time (no performance gain). -->
			<exclude name="**/*BytesUtil*" />
        </fileset>
        <fileset dir="${bigdata.dir}/bigdata-jini/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${bigdata.dir}/bigdata-rdf/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${bigdata.dir}/bigdata-sails/lib">
            <include name="**/*.jar"/>
        </fileset>
		</copy>
	</target>

    <target name="release-prepare" depends="jar, bundle, javadoc"
			description="create a release.">
    	<!-- The source tree. -->
		<copy toDir="${build.dir}/src">
	        <fileset dir="${bigdata.dir}/bigdata/src"/>
            <fileset dir="${bigdata.dir}/bigdata-jini/src"/>
            <fileset dir="${bigdata.dir}/bigdata-rdf/src"/>
            <fileset dir="${bigdata.dir}/bigdata-sails/src"/>
		</copy>
		<!-- common files for the root of the archive. -->
		<copy tofile="${build.dir}/LICENSE.txt" file="LICENSE.txt"/>
		<copy tofile="${build.dir}/overview.html" file="overview.html"/>
		<copy tofile="${build.dir}/README-JINI" file="README-JINI"/>
		<copy toDir="${build.dir}/LEGAL" flatten="true">
			<fileset dir="${bigdata.dir}">
				<include name="**/LEGAL/*"/>
    		</fileset>
		</copy>
    </target>

	<target name="release" depends="release-prepare"
    		description="create source and binary tarballs.">
		<mkdir dir="${release.dir}"/>
		<!-- binary distribution. -->
		<tar destfile="${release.dir}/${version}-bin.tgz"
			 compression="gzip"
		>
			<!-- binary distribution (docs, but no source). -->
			<tarfileset dir="${build.dir}" prefix="${version}">
				 <!-- common files from the root of the archive. -->
				 <include name="LICENSE.txt"/>
				 <include name="overview.html"/>
				 <include name="README-JINI"/>
				 <include name="LEGAL/*"/>
				 <!-- src, classes, jar, lib, docs. -->
				 <exclude name="src/**"/>
				 <exclude name="classes/**"/>
				 <include name="${version}.jar"/>
				 <include name="lib/**"/>
				 <include name="docs/**"/>
			</tarfileset>
		</tar>
		<!-- source distribution. -->
		<!-- Note: use GNU long file names for paths GT 100 characters. -->
		<tar destfile="${release.dir}/${version}-src.tgz"
			 compression="gzip"
		>
			<!-- source, but no jar, compiled, docs, etc. -->
			<tarfileset dir="${build.dir}" prefix="${version}">
				 <!-- common files from the root of the archive. -->
				 <include name="LICENSE.txt"/>
				 <include name="overview.html"/>
				 <include name="README-JINI"/>
				 <include name="LEGAL/*"/>
				 <!-- src, classes, jar, lib, docs. -->
				 <include name="src/**"/>
				 <exclude name="classes/**"/>
				 <exclude name="${version}.jar"/>
				 <exclude name="lib/**"/>
				 <exclude name="docs/**"/>
			</tarfileset>
		</tar>
	</target>
	
	<!-- Note: I use a public/private key to do this.  You can uncomment the
	     ssh.password lines if you are going to authenticate directly.
	     
	     Note: If you do not have the public key for frs.sourceforge.net cached
	     in your SSH repository then this will not work since it requests that
	     you confirm the public key interactively.
	     -->
	<target name="upload" depends="release"
			description="copy release files to server.">
		<input message="username:" addproperty="ssh.username" defaultValue="${ssh.username}"/>
		<!-- unless automated by public/private key
		<input message="password:" addproperty="ssh.password" defaultValue="${ssh.password}"/>
		-->
		<exec executable="${ssh.scp}">
			<arg value="-v"/> <!-- verbose protocol. -->
			<arg value="-C"/> <!-- compression. -->
			<!--
			<arg value="-l"/><arg value="${ssh.username}"/>
			<arg value="-pw"/><arg value="${ssh.password}"/>
			-->
			<arg value="${release.dir}/${version}-bin.tgz"/> <!-- from -->
			<arg value="${ssh.username}@frs.sourceforge.net:uploads"/> <!-- to -->
		</exec>
		<exec executable="${ssh.scp}">
			<arg value="-v"/> <!-- verbose protocol. -->
			<arg value="-C"/> <!-- compression. -->
			<!--
			<arg value="-l"/><arg value="${ssh.username}"/>
			<arg value="-pw"/><arg value="${ssh.password}"/>
			-->
			<arg value="${release.dir}/${version}-src.tgz"/> <!-- from -->
			<arg value="${ssh.username}@frs.sourceforge.net:uploads"/> <!-- to -->
		</exec>
	</target>
	
	<target name="publish-api" depends="javadoc"
			description="copy javadoc to server.">
		<fail message="Javadoc not generated.">
		  	<condition>
		  		<not>
					<available file="docs/api" type="dir"/>
				</not>
	  		</condition>
		</fail>
		<input message="username:" addproperty="ssh.username" defaultValue="${ssh.username}"/>
		<input message="password:" addproperty="ssh.password" defaultValue="${ssh.password}"/>
		<exec executable="${ssh.scp}">
			<arg value="-r"/> <!-- recursive. -->
			<arg value="-v"/> <!-- verbose protocol. -->
			<arg value="-C"/> <!-- compression. -->
			<arg value="-l"/><arg value="${ssh.username}"/>
			<arg value="-pw"/><arg value="${ssh.password}"/>
			<arg value="${build.dir}/docs"/> <!-- from -->
			<arg value="shell.speakeasy.net:systap.com/bigdata/"/> <!-- to -->
		</exec>
	</target>

	<!-- 
 	     @todo Set permissions on the installation directories?
 	     
 	     @todo Setup cron job with 'file @NAS@/state' on the minute.
 	     
 	     @todo parameter substitution for log4j files?
 	     
 	     @todo classServer setup : The following are somewhat dated notes on using jini with downloadable
	     code.
	
	You need to copy downloadable code to an HTTP server so that the classes can
	be resolved for activatable services, e.g.,
	
	assuming:
	
	codebase=http://proto.cognitiveweb.org/maven-repository/bigdata/jars/

	do:

	scp ant-deploy/* bryan@proto.cognitiveweb.org:/home/groups/c/cw/cweb/maven-repository/bigdata/jars
	
	then verfify that you can see the resources in a web browser at that codebase
	URL (e.g., the files all have the right permissions on the server).  You MUST
	then unarchive bigdata.jar into this directory so that the actual class files
	themselves are available for download (only .class files are downloaded, NOT
	JARs).

		cd /home/groups/c/cw/cweb/maven-repository/bigdata/jars
			
		/usr/java/j2sdk1.4.2_05/bin/jar xf bigdata.jar
	
	Finally, the code that will expose services with downloadable code MUST set
	
	-Djava.rmi.server.codebase=http://.../
	
	where "..." is your host and path
	
	in order for the correct codebase property to be communicated to clients that
	will then download code from that HTTP server.  Note: the trailing '/' is
	REQUIRED in your codebase or the generated URLs will NOT resolve correctly.
	
	See http://java.sun.com/j2se/1.4.2/docs/guide/rmi/javarmiproperties.html for
	some guidence.  Among other things, it suggests:
	
		-Djava.rmi.server.logCalls=true
		
	as an aid to debuging.  Also try setting
		
		-Dcom.sun.jini.reggie.proxy.debug=1
		
	for the client, e.g., the service browser. Also see:
	
		http://www.adtmag.com/java/articleold.aspx?id=1159
		
	for some (very good) guidence in debugging jini services.

	Note: You may have to restart jini locally in order to force download of 
	updated classes from the codebase!

	See http://archives.java.sun.com/cgi-bin/wa?A2=ind0512&L=jini-users&P=R391&I=-3
	for instructions on setting up an "download jar" (dljar) ANT task that can make
	life much simpler (one supposes).

    See http://archives.java.sun.com/cgi-bin/wa?A2=ind0311&L=jini-users&F=&S=&P=7182
        for a description of policy files and
        http://www.dancres.org/cottage/jini-start-examples-2_1.zip for the
        policy files described.
	
	See http://jan.newmarch.name/java/jini/tutorial/Ant.xml for a description of
	one (simple) approach to using ant for jini projects (it does not use the
	dljar ant task but explicitly enumerates what goes where).
	
	See http://jan.newmarch.name/java/jini/tutorial/TroubleShooting.xml#RMI%20Stubs
	for common errors when using RMI stubs.
	
	See https://java.sun.com/products/jini/2.1/doc/api/com/sun/jini/example/browser/package-summary.html
	for the dirty on the jini Service Browser.
	
	-->
	<target name="install" depends="jar, javadoc, bundle" description="Install bigdata.">
		<mkdir dir="${install.config.dir}"/>
		<mkdir dir="${install.doc.dir}"/>
		<mkdir dir="${install.lib.dir}"/>
		<mkdir dir="${install.bin.dir}"/>
		<!-- install configuration files. -->
		<copy toDir="${install.config.dir}">
    		<fileset dir="${bigdata.dir}/src/resources/config">
    		</fileset>
		</copy>
		<!-- install documentation. -->
		<copy toDir="${install.doc.dir}">
			<!-- javadoc. -->
        	<fileset dir="${build.dir}/docs"/>
 			<!-- common files from the root of the archive. -->
			<!-- @todo cleanup LEGAL into one directory off the root in the src tree? -->
			<fileset dir="${bigdata.dir}">
				 <include name="LICENSE.txt"/>
				 <include name="overview.html"/>
				 <include name="README-JINI"/>
				 <include name="bigdata/LEGAL/*"/>
				 <include name="bigdata-jini/LEGAL/*"/>
				 <include name="bigdata-rdf/LEGAL/*"/>
				 <include name="bigdata-sails/LEGAL/*"/>
			</fileset>
		</copy>
		<!-- install JARs. -->
		<copy toDir="${install.lib.dir}">
        	<fileset dir="${build.dir}/lib"/>
			<fileset file="${build.dir}/${version}.jar"/>
		</copy>
		<!-- install scripts. -->
		<copy toDir="${install.bin.dir}">
        	<fileset dir="src/resources/scripts">
        </fileset>
		</copy>
		<!-- parameter substitution. -->
		<property name="myclasspath" refid="install.classpath"/>
    	<replace file="${install.bin.dir}/bigdataenv" summary="true">
     	    <replacefilter token="@FED@" value="${FED}"/>
     	    <replacefilter token="@NAS@" value="${NAS}"/>
     	    <replacefilter token="@LAS@" value="${LAS}"/>
     	    <replacefilter token="@MASTER@" value="${MASTER}"/>
     	    <replacefilter token="@JAVA_HOME@" value="${JAVA_HOME}"/>
     	    <replacefilter token="@ANT_HOME@" value="${ANT_HOME}"/>
     	    <replacefilter token="@JINI_HOME@" value="${JINI_HOME}"/>
     	    <replacefilter token="@SYSSTAT_HOME@" value="${SYSSTAT_HOME}"/>
     	    <replacefilter token="@USE_NIO@" value="${USE_NIO}"/>
    	    <replacefilter token="@BIN_DIR@" value="${install.bin.dir}"/>
    	    <replacefilter token="@LIB_DIR@" value="${install.lib.dir}"/>
    	    <replacefilter token="@CONFIG_DIR@" value="${install.config.dir}"/>
     	    <replacefilter token="@BIGDATA_CONFIG@" value="${bigdata.config}"/>
     	    <replacefilter token="@LOG4J_CONFIG@" value="${log4j.config}"/>
     	    <replacefilter token="@LOG4J_SERVER_CONFIG@" value="${log4jServer.config}"/>
     	    <replacefilter token="@LOGGING_CONFIG@" value="${logging.config}"/>
     	    <replacefilter token="@POLICY_FILE@" value="${policyFile}"/>
     	    <replacefilter token="@CLASSPATH@" value="${myclasspath}"/>
    	</replace>
    	<replace dir="${install.config.dir}" summary="true" includes="bigdataCluster.config">
     	    <replacefilter token="@FED@" value="${FED}"/>
     	    <replacefilter token="@NAS@" value="${NAS}"/>
     	    <replacefilter token="@LAS@" value="${LAS}"/>
     	    <replacefilter token="@MASTER@" value="${MASTER}"/>
     	    <replacefilter token="@JAVA_HOME@" value="${JAVA_HOME}"/>
     	    <replacefilter token="@ANT_HOME@" value="${ANT_HOME}"/>
     	    <replacefilter token="@JINI_HOME@" value="${JINI_HOME}"/>
     	    <replacefilter token="@SYSSTAT_HOME@" value="${SYSSTAT_HOME}"/>
     	    <replacefilter token="@USE_NIO@" value="${USE_NIO}"/>
    	    <replacefilter token="@BIN_DIR@" value="${install.bin.dir}"/>
    	    <replacefilter token="@LIB_DIR@" value="${install.lib.dir}"/>
    	    <replacefilter token="@CONFIG_DIR@" value="${install.config.dir}"/>
     	    <replacefilter token="@BIGDATA_CONFIG@" value="${bigdata.config}"/>
     	    <replacefilter token="@LOG4J_CONFIG@" value="${log4j.config}"/>
     	    <replacefilter token="@LOG4J_SERVER_CONFIG@" value="${log4jServer.config}"/>
     	    <replacefilter token="@LOGGING_CONFIG@" value="${logging.config}"/>
     	    <replacefilter token="@POLICY_FILE@" value="${policyFile}"/>
     	    <replacefilter token="@CLASSPATH@" value="${myclasspath}"/>
    	</replace>
		<!-- fix newlines (otherwise substitutions cause things to break). -->
        <fixcrlf srcDir="${install.bin.dir}"/>
		<!-- set execute bit for scripts (must be the last step). -->
		<chmod perm="ug+rx,o-r">
			<fileset dir="${install.bin.dir}">
			</fileset>
		</chmod>
	</target>
	
	<!-- Note: we must fork the JVM to get the jvmarg overrides. -->
	<!-- Note: We suppress the bigdata banner so it does not get written into output file. -->
	<!-- Note: We disable registration of log4j MBeans since that requires policy file. -->
	<target name="analysis" depends="jar"
		description="Extracts performance counters from logged XML files.">
	<mkdir dir="${analysis.out.dir}"/>
	<mkdir dir="${analysis.out.dir}/cpu"/>
	<mkdir dir="${analysis.out.dir}/disk"/>
	<mkdir dir="${analysis.out.dir}/memory"/>
	<mkdir dir="${analysis.out.dir}/service"/>
	<mkdir dir="${analysis.out.dir}/service/cs"/>
	<mkdir dir="${analysis.out.dir}/service/ds"/>

		<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/service/cs/chunksIn.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
			<classpath refid="runtime.classpath"/>
			<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
			<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
			<arg value="-regex"/>
			<arg value="/([^/]*)/.*IClientService/.*/Indices/([^/]*)/asynchronous/chunksIn"/>
			<arg value="-report"/>
			<arg value="correlated"/>
			<arg value="-period"/>
			<arg value="Minutes"/>
			<arg value="-depth"/>
			<arg value="14"/>
			<arg file="${analysis.counters.dir}"/>
		</java>

		<java classname="com.bigdata.counters.query.CounterSetQuery"
					  		  output="${analysis.out.dir}/service/cs/chunksOut.txt"
					  			failonerror="true"
								fork="true"
								logerror="true"
					>
				<classpath refid="runtime.classpath"/>
				<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
				<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
				<arg value="-regex"/>
			    <arg value="/([^/]*)/.*IClientService/.*/Indices/([^/]*)/asynchronous/chunksOut"/>
				<arg value="-report"/>
				<arg value="correlated"/>
				<arg value="-period"/>
				<arg value="Minutes"/>
				<arg value="-depth"/>
				<arg value="14"/>
				<arg file="${analysis.counters.dir}"/>
			</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
			  		  output="${analysis.out.dir}/service/cs/toldTriplesPerSec.txt"
			  			failonerror="true"
						fork="true"
						logerror="true"
			>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/.*/U.*/Concurrent Data Loader/toldTriplesPerSec"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="7"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/service/cs/toldTriplesLoaded.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/.*/U.*/Concurrent Data Loader/toldTriplesLoaded"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="7"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/memory/bytesFree.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/Memory/Bytes Free"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="3"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/memory/majorPageFaultsPerSecond.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/Memory/Major Page Faults Per Second"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="3"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
					  		  output="${analysis.out.dir}/cpu/processorTime.txt"
					  			failonerror="true"
								fork="true"
								logerror="true"
					>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/CPU/% Processor Time"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="5"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
					  		  output="${analysis.out.dir}/cpu/IOWait.txt"
					  			failonerror="true"
								fork="true"
								logerror="true"
					>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/CPU/% IO Wait"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="5"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/disk/bytesWrittenPerSec.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/PhysicalDisk/Bytes Written Per Second"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="3"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/disk/bytesReadPerSecond.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/PhysicalDisk/Bytes Read Per Second"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="3"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/service/ds/indexSegmentCacheSize.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/.*IDataService/.*Index Manager/Index Segment Cache Size"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="12"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/service/ds/indexSegmentOpenLeafCount.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/.*IDataService/.*Index Manager/Index Segment Open Leaf Count"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="12"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/service/ds/indexSegmentOpenLeafByteCount.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/.*IDataService/.*Index Manager/Index Segment Open Leaf Byte Count"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="12"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/service/ds/bytesUnderManagement.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/.*/Bytes Under Management"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="10"/>
		<arg file="${analysis.counters.dir}"/>
	</java>

	<java classname="com.bigdata.counters.query.CounterSetQuery"
				  		  output="${analysis.out.dir}/service/ds/managedSegmentStoreCount.txt"
				  			failonerror="true"
							fork="true"
							logerror="true"
				>
		<classpath refid="runtime.classpath"/>
		<jvmarg value="-Dcom.bigdata.Banner.quiet=true"/>
		<jvmarg value="-Dcom.bigdata.jmx.log4j.disable=true"/>
		<arg value="-regex"/>
		<arg value="/([^/]*)/.*IDataService/.*Store Manager/Managed Segment Store Count"/>
		<arg value="-report"/>
		<arg value="correlated"/>
		<arg value="-period"/>
		<arg value="Minutes"/>
		<arg value="-depth"/>
		<arg value="12"/>
		<arg file="${analysis.counters.dir}"/>
	</java>
	</target>

</project>
