# The root of the checked out svn source.  This assumes that you have checked
# out the trunk so that all modules were automatically checked out and are in
# direct subdirectories of the directory containing this properties file and
# the ant build.xml file.
bigdata.dir=.
# Where the generated files will be written.
# build.dir/classes  [compiled classes and misc resources for classpath]
# build.dir/docs     [generated documentation].
# build.dir/docs/api [generated javadoc].
# build.dir/lib      [bundled libraries copied here for easier deployment]
# build.dir/src      [source code copied here for releases]
build.dir=ant-build

# debug=on|off
debug=on
# debuglevel=lines,vars,source (or any combination thereof).
debuglevel=lines,vars,source

##
# Properties for installing bigdata.  Many of these properties are both by the
# 'ant install' target and also wind up substituted into the 'bigdataenv' script,
# the main bigdata 'configuration' file, and the logger configuration files.
##

# @TODO Should be able to start jini w/o the GUI and should be able to start all
# hosts at once [still needs to be integrated into the main configuration file and
# that will probably require a change to the com.bigdata.jini.service.start package].
# Basically, we want to run the ServiceStarter if jini is configured to execute on
# that host, if it is not running on that host, and if there are insufficient instances
# already running.
#
# @TODO Classserver setup w/ rmi codebase - should be easy now.
#
# @TODO Is sysstat 100% optional? Do we automatically use vmstat instead? 
#

# The name of the bigdata federation instance.
FED=benchmark

# Bigdata-specific directory on a shared volume accessible by all hosts in the
# cluster.
#
# Note: You can create the appropriate permissions by creating the directory
# ahead of time and doing chown to set the user and group and then chmod to give
# the group read/write permissions. 
NAS=/nas/bigdata/${FED}

# Bigdata-specific directory on a local volume.  Each host in the cluster will
# place the persistent state for the bigdata services running on that host within
# this directory.  The user which will execute bigdata MUST be able to read/write
# files on this path on each host.  Therefore, if you are not installing as root
# this will need to be a file within the user's home directory or some directory
# which exists on each host and is writable by that user.
LAS=/var/bigdata/${FED}
#LAS=~/bigdata/${FED}

# The host which will act as the master for the script (can set permissions, etc).
# This should be the value reported by 'hostname' on that host.
#
# @TODO This concept will probably disappear.
# @TODO The socketLogger currently uses this property but should use a specialized
# property instead.
MASTER=XYZ

# The location of the installed JDK that will be used to build / run bigdata.
#JAVA_HOME=C:\\Program Files\\Java\\jdk1.6.0_10
JAVA_HOME=/usr/java/jdk1.6.0_07
#JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64
#JAVA_HOME=/usr/java/jrockit-R27.3.0-jdk1.6.0_01

# Where ant is installed (used to build and install bigdata).
#ANT_HOME=/usr/java/apache-ant-1.7.0
ANT_HOME=C:\\usr\\local\\apache-ant-1.6.5

# Where jini is installed.
# @todo Since we bundle jini, this should not really be necessary.
#JINI_HOME=C:\\Program Files\\jini2_1
JINI_HOME=/usr/java/jini2_1

# Where the sysstat utilities are found (performance counter reporting for un*x).
SYSSTAT_HOME=/usr/local/bin

# Specifies the value of com.sun.jini.jeri.tcp.useNIO.  When true, use NIO for RMI. 
USE_NIO=true

# Where to install the scripts (must by readable by all hosts).
install.bin.dir=${NAS}/bin

# Where to install the documentation.
install.doc.dir=${NAS}/doc

# Where to install the JARs (must be readable by all hosts).
install.lib.dir=${NAS}/lib

# Where to install the configuration files (must be readable by all hosts).
install.config.dir=${NAS}/config

# Where to write the log files.
install.log.dir=${NAS}/log

# The 'install-as' user (defaults to the user running the installer).
#
# @todo ant lacks sufficient mechanisms to set the user (chown).
# 
# @todo should this be used to specify the user in the jini service config files? 
install.user=${user.name}

# The group on all hosts that is able to read the scripts, write log files, etc.
install.group=users

# The bigdata subsystem lock file.  The user MUST be able to read/write this file
# on each host.  Therefore, if you are not installing as root this will need to be
# a file within the user's home directory or some directory which exists on each
# host and is writable by that user. 
LOCK_FILE=/var/lock/subsys/bigdata
#LOCK_FILE=${LAS}/lockFile

# The main bigdata configuration file.
bigdata.config=${install.config.dir}/bigdataCluster.config

# The main jini configuration file.
jini.config=${install.config.dir}/jini/startAll.config

# The log4j configuration file for the services.  This is a URL!
log4j.config=file:${install.config.dir}/log4j.properties

# The log4j configuration file for the SimpleSocketServer.  This is a URL!
log4jServer.config=file:${install.config.dir}/log4jServer.properties

# The java.util.logging configuration file.  (Jini uses java.util.logging).
logging.config=${install.config.dir}/logging.properties

# The policy file used to start clients and services.  The default policy
# file is completely open.
policyFile=${install.config.dir}/policy.all

# Bigdata events are logged on this file. 
eventLog=${install.log.dir}/event.log

# Bigdata messages at ERROR or above are logged on this file.
errorLog=${install.log.dir}/error.log

# Bigdata messages at INFO or above (or as configured) are logged on this file.
detailLog=${install.log.dir}/detail.log

# Messages from the bigdata script are written here.  This file must be writable
# by all hosts.
stateLog=${install.log.dir}/state.log

# When cron or a similar process is used to periodically execute the 'bigdata'
# script, the script can be invoked with the name of this file and the value in
# the file will be interpreted as the goal state for the script.  The value in
# the file is initially 'status'.  It is changed to 'start' to bring up the
# bigdata federation.  This file must be readable by all hosts.  Writes may be
# restricted to a specific user.
stateFile=${NAS}/state

##
# Properties for creating a release.
##

# Where the releases will be written.
release.dir=ant-release

# The build version.
build.ver=0.8b

# Set true to do a snapshot build.  This changes the value of ${version} to
# include the date.
snapshot=true

# Javadoc build may be disabled using this property.  The javadoc target will
# not be executed unless this property is defined (its value does not matter).
# Note: The javadoc goes quite quickly on a server class machine, but can take
# forever and then runs out of memory on a laptop.
#javadoc=
# The SCP program to use when uploading javadoc or releases.
ssh.scp=C:/Program Files/PuTTY/pscp


##
# Properties for the 'analysis' target.
##

# You MUST specify this property
analysis.dir=

# The directory containing the logged performance counters to be extracted for
# analysis.
analysis.counters.dir=${analysis.dir}/counters

# The directory where the extracted performance counters will be written.
analysis.out.dir=${analysis.dir}/output
