<project name="bigdata-install" default="ant-install" basedir=".">

    <!-- assumes that this script is being run from the uncorked deployment artifact, either in the build's target directory or on a test machine. -->
    <property name="deploy.dir" location="${basedir}/.." />
    <property name="app.home" location="${deploy.dir}" />
    <property name="deploy.lib" location="${deploy.dir}/lib" />
    <property name="deploy.lib.dl" location="${deploy.dir}/lib-dl" />

    <property name="log4j.configuration" location="${deploy.dir}/var/config/logging/log4j.properties" />
    <property name="java.net.preferIPv4Stack" value="true" />
    <property name="default.nic" value="eth0" />

    <property file="install.properties" />

    <target name="setup" >
        <exec executable="hostname" outputproperty="this.hostname" />
    </target>


    <target name="ant-install" depends="setup" description="Ant based install on a node.">
        <mkdir dir="${NAS}" />
        <mkdir dir="${LAS}" />

        <chmod perm="ug+rw,o-rw">
            <fileset dir="${NAS}" />
        </chmod>

        <chmod perm="ug+rw,o-rw">
            <fileset dir="${LAS}" />
        </chmod>

        <mkdir dir="${install.config.dir}" />
        <mkdir dir="${install.doc.dir}" />
        <mkdir dir="${install.lib.dir}" />
        <mkdir dir="${install.bin.dir}" />
        <mkdir dir="${install.log.dir}" />
        <mkdir dir="${install.dist.dir}" />

        <copy toDir="${install.config.dir}">
            <fileset dir="${deploy.dir}/legacy/config" />
        </copy>

        <copy toDir="${install.config.dir}"> <!-- new config directory -->
            <fileset dir="${deploy.dir}/var/config" />
        </copy>
        
        <copy toDir="${install.doc.dir}">
            <fileset dir="${deploy.dir}">
                <include name="LICENSE.txt" />
                <include name="overview.html" />
                <include name="README-JINI" />
                <include name="bigdata/LEGAL/*" />
                <include name="bigdata-jini/LEGAL/*" />
                <include name="bigdata-rdf/LEGAL/*" />
                <include name="bigdata-sails/LEGAL/*" />
            </fileset>
        </copy>

        <copy toDir="${install.lib.dir}">
            <fileset dir="${deploy.dir}/lib" />
        </copy>

        <copy toDir="${install.lib-dl.dir}">
            <fileset dir="${deploy.dir}/lib-dl" />
        </copy>

        <path  id="runtime.classpath">
            <fileset  dir="${install.lib.dir}">
                <include name="**/*jar" />
            </fileset>
        </path>

        <pathconvert property="runtime.classpath.text" refid="runtime.classpath" />

        <copy toDir="${install.bin.dir}">
            <fileset dir="${deploy.dir}/legacy/scripts" />
        </copy>

        <!-- parameter substitution. -->

        <replace dir="${install.bin.dir}" summary="true">
            <replacefilter token="@FED@" value="${FED}" />
            <replacefilter token="@NAS@" value="${NAS}" />
            <replacefilter token="@LAS@" value="${LAS}" />
            <replacefilter token="@JAVA_HOME@" value="${JAVA_HOME}" />
            <replacefilter token="@JINI_CLASS_SERVER_PORT@" value="${JINI_CLASS_SERVER_PORT}" />
            <replacefilter token="@LOAD_BALANCER_PORT@" value="${LOAD_BALANCER_PORT}" />
            <replacefilter token="@SYSSTAT_HOME@" value="${SYSSTAT_HOME}" />
            <replacefilter token="@USE_NIO@" value="${USE_NIO}" />
            <replacefilter token="@BIN_DIR@" value="${install.bin.dir}" />
            <replacefilter token="@LIB_DIR@" value="${install.lib.dir}" />
            <replacefilter token="@LOG_DIR@" value="${install.log.dir}" />
            <replacefilter token="@CONFIG_DIR@" value="${install.config.dir}" />
            <replacefilter token="@INSTALL_USER@" value="${install.user}" />
            <replacefilter token="@INSTALL_GROUP@" value="${install.group}" />
            <replacefilter token="@LOCK_FILE@" value="${LOCK_FILE}" />
            <replacefilter token="@BIGDATA_CONFIG@" value="${bigdata.config}" />
            <replacefilter token="@JINI_CONFIG@" value="${jini.config}" />
            <replacefilter token="@POLICY_FILE@" value="${policyFile}" />
            <replacefilter token="@LOG4J_SOCKET_LOGGER_HOST@" value="${LOG4J_SOCKET_LOGGER_HOST}" />
            <replacefilter token="@LOG4J_SOCKET_LOGGER_PORT@" value="${LOG4J_SOCKET_LOGGER_PORT}" />
            <replacefilter token="@LOG4J_SOCKET_LOGGER_CONFIG@" value="${log4jServer.config}" />
            <replacefilter token="@LOG4J_DATE_PATTERN@" value="${LOG4J_DATE_PATTERN}" />
            <replacefilter token="@LOG4J_CONFIG@" value="${log4j.config}" />
            <replacefilter token="@LOGGING_CONFIG@" value="${logging.config}" />
            <replacefilter token="@ERROR_LOG@" value="${errorLog}" />
            <replacefilter token="@DETAIL_LOG@" value="${detailLog}" />
            <replacefilter token="@EVENT_LOG@" value="${eventLog}" />
            <replacefilter token="@RULE_LOG@" value="${ruleLog}" />
            <replacefilter token="@STATE_LOG@" value="${stateLog}" />
            <replacefilter token="@STATE_FILE@" value="${stateFile}" />
            <replacefilter token="@FORCE_KILL_ALL@" value="${forceKillAll}" />
            <replacefilter token="@NTP_MASTER@" value="${NTP_MASTER}" />
            <replacefilter token="@NTP_NETWORK@" value="${NTP_NETWORK}" />
            <replacefilter token="@NTP_NETMASK@" value="${NTP_NETMASK}" />
            <replacefilter token="@CLASSPATH@" value="${runtime.classpath.text}" />
            <replacefilter token="@APP_HOME@" value="${APP_HOME}" />
        </replace>

        <replace dir="${install.config.dir}" summary="true">
            <replacefilter token="@FED@" value="${FED}" />
            <replacefilter token="@NAS@" value="${NAS}" />
            <replacefilter token="@LAS@" value="${LAS}" />
            <replacefilter token="@LOG4J_SOCKET_LOGGER_HOST@" value="${LOG4J_SOCKET_LOGGER_HOST}" />
            <replacefilter token="@JAVA_HOME@" value="${JAVA_HOME}" />
            <replacefilter token="@JINI_CLASS_SERVER_PORT@" value="${JINI_CLASS_SERVER_PORT}" />
            <replacefilter token="@LOAD_BALANCER_PORT@" value="${LOAD_BALANCER_PORT}" />
            <replacefilter token="@SYSSTAT_HOME@" value="${SYSSTAT_HOME}" />
            <replacefilter token="@USE_NIO@" value="${USE_NIO}" />
            <replacefilter token="@BIN_DIR@" value="${install.bin.dir}" />
            <replacefilter token="@LIB_DIR@" value="${install.lib.dir}" />
            <replacefilter token="@LOG_DIR@" value="${install.log.dir}" />
            <replacefilter token="@CONFIG_DIR@" value="${install.config.dir}" />
            <replacefilter token="@INSTALL_USER@" value="${install.user}" />
            <replacefilter token="@INSTALL_GROUP@" value="${install.group}" />
            <replacefilter token="@LOCK_FILE@" value="${LOCK_FILE}" />
            <replacefilter token="@BIGDATA_CONFIG@" value="${bigdata.config}" />
            <replacefilter token="@JINI_CONFIG@" value="${jini.config}" />
            <replacefilter token="@POLICY_FILE@" value="${policyFile}" />
            <replacefilter token="@LOG4J_SOCKET_LOGGER_HOST@" value="${LOG4J_SOCKET_LOGGER_HOST}" />
            <replacefilter token="@LOG4J_SOCKET_LOGGER_PORT@" value="${LOG4J_SOCKET_LOGGER_PORT}" />
            <replacefilter token="@LOG4J_SOCKET_LOGGER_CONFIG@" value="${log4jServer.config}" />
            <replacefilter token="@LOG4J_DATE_PATTERN@" value="${LOG4J_DATE_PATTERN}" />
            <replacefilter token="@LOG4J_CONFIG@" value="${log4j.config}" />
            <replacefilter token="@LOGGING_CONFIG@" value="${logging.config}" />
            <replacefilter token="@ERROR_LOG@" value="${errorLog}" />
            <replacefilter token="@DETAIL_LOG@" value="${detailLog}" />
            <replacefilter token="@EVENT_LOG@" value="${eventLog}" />
            <replacefilter token="@RULE_LOG@" value="${ruleLog}" />
            <replacefilter token="@STATE_LOG@" value="${stateLog}" />
            <replacefilter token="@STATE_FILE@" value="${stateFile}" />
            <replacefilter token="@FORCE_KILL_ALL@" value="${forceKillAll}" />
            <replacefilter token="@NTP_MASTER@" value="${NTP_MASTER}" />
            <replacefilter token="@NTP_NETWORK@" value="${NTP_NETWORK}" />
            <replacefilter token="@NTP_NETMASK@" value="${NTP_NETMASK}" />
            <replacefilter token="@CLASSPATH@" value="${runtime.classpath.text}" />
            <replacefilter token="@APP_HOME@" value="${APP_HOME}" />
            <!-- updates the configuration file to locate the lubm ontology. -->
            <replacefilter token="@install.lubm.config.dir@" value="${install.lubm.config.dir}" />
        </replace>

        <!-- fix newlines (otherwise substitutions cause things to break). -->
        <fixcrlf srcDir="${install.config.dir}" />
        <fixcrlf srcDir="${install.bin.dir}" />

        <!-- set execute bit for scripts in this directory (must be the last step). -->
        <chmod perm="u+x,g+rx,o-rwx">
            <fileset dir="${install.bin.dir}">
                <exclude name="README" />
                <exclude name="POST-INSTALL" />
            </fileset>
        </chmod>

        <!-- Setup the status file which will be read by the bigdata script and
    the log on which that script will write its output.  This is used
    if cron, or a similar process, will execute the script on a periodic
    basis.  The initial state is always 'status'.  The initial stateLog
    is always empty.  The state file must be readable by the group, but
    could be restricted to write by a specific user. The stateLog must be
    read/write for the group. -->

        <echo file="${stateFile}">status</echo>
        <echo file="${stateLog}">
        </echo>

        <chmod perm="g+rw,o-rw" file="${stateFile}" />
        <chmod perm="g+rw,o-rw" file="${stateLog}" />

        <!-- Make sure that the entire shared directory structure is read/write for the group. -->
        <chmod perm="g+rwx" type="both" dir="${NAS}" verbose="true" />

        <!-- Make sure that it is all accessible to the install group (ant 1.6+ plus extension module required).
              <chown file="${NAS}" type="both" owner="${install.user}.${install.group}" verbose="true" />
        -->

        <!-- Works for earlier versions of ant LT 1.6 which do not bundle "chown". -->
        <apply executable="chown" description="set owner on NAS files" os="Linux">
            <arg value="-R" />
            <arg value="${install.user}.${install.group}" />
            <dirset dir="${NAS}" />
        </apply>

        <!-- @todo check the installed configuration file (after parameter substitution). -->
        <!-- @todo also check the installed jini configuration files. -->
        <java classname="com.bigdata.jini.util.CheckConfiguration"
              failonerror="true" fork="true" logerror="true">
            <classpath refid="runtime.classpath" />
            <arg value="${bigdata.config}" />
        </java>

        <loadfile property="postInstallMessage" srcFile="${install.bin.dir}/POST-INSTALL" />

        <echo>

            ${postInstallMessage}</echo>

    </target>


</project>
