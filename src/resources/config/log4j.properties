# log4j client configuration.
#
# Note: This is the configuration that the application should use.  It
# is considered a "client" configuration because it will ship the log
# events to a log4j server using the [socketLogger].  This lets you
# aggregate log events across a cluster.
#
# Note: If the link to the log4j server goes down, then the
# application will block.  This makes that link a single point of
# failure.
#
# Note: If the log4j server goes down, then a warning will be logged
# on stderr for the application.
#
# Note: The application will proceed no faster than the TCP packets
# containing the log events that are being sent to the server. This
# should not be a problem unless very detailed logging is turned on.
#
# Note: The layout is NOT used by the SocketAppender.  The layout is
# decided on the other end by the log4j server's configuration file.
#
# You can also enable local logging.  You will have to choose a well
# known location for the log file since the same log4j configuration
# is used by all of the services (at least, by all of the same service
# type since you can not have a per-service instance override) in the
# federation.

# Note: socketLogger is an alternative for A3.
log4j.rootCategory=WARN, A2, A3

# Loggers.
log4j.logger.com.bigdata=WARN
log4j.logger.com.bigdata.jini.start=INFO
log4j.logger.com.bigdata.jini.start.MonitorConfigZNodeTask=WARN
#log4j.logger.com.bigdata.jini.start.ManageLogicalServiceTask=WARN
log4j.logger.com.bigdata.jini.start.ServiceConfigurationZNodeMonitorTask=WARN
log4j.logger.com.bigdata.jini.start.MonitorCreatePhysicalServiceLocksTask=WARN
log4j.logger.com.bigdata.jini.start.config=WARN

# To debug the counter collection.
#log4j.logger.com.bigdata.counters=INFO

# To see the httpd log.
log4j.logger.com.bigdata.util.httpd.NanoHTTPD=INFO

# This logs the output of the ServicesManagerServer's child
# processes. You may need to raise this to INFO to figure out what is
# going wrong with a child process start.
#
log4j.logger.com.bigdata.jini.start.process=INFO

# The zookeeper integration package.
log4j.logger.com.bigdata.zookeeper=WARN

# This class is way too verbose (SendThread @ WARN)
#log4j.logger.org.apache.zookeeper.ClientCnxn=ERROR
#log4j.logger.org.apache.zookeeper=DEBUG

#log4j.logger.com.bigdata.service.jini.master=DEBUG
#log4j.logger.com.bigdata.service.jini.lookup.AbstractCachingServiceClient=DEBUG

# This package is extremely verbose.
log4j.logger.com.bigdata.btree=WARN
#log4j.logger.com.bigdata.btree.IndexMetadata=INFO
#log4j.logger.com.bigdata.counters=DEBUG
#log4j.logger.com.bigdata.journal.IJournal=INFO
#log4j.logger.com.bigdata.resources=INFO
#log4j.logger.com.bigdata.relation.accesspath.BlockingBuffer=INFO
#log4j.logger.com.bigdata.service.ClientIndexView=INFO
#log4j.logger.com.bigdata.service.ndx=INFO
log4j.logger.com.bigdata.service.AbstractServer=INFO
#log4j.logger.com.bigdata.service.LoadBalancerService=WARN
#log4j.logger.com.bigdata.journal.AbstractTask=INFO
#log4j.logger.com.bigdata.journal.WriteExecutorService=INFO
#log4j.logger.com.bigdata.resources.ResourceManager=INFO, Console, A2
#log4j.logger.com.bigdata.resources.StoreManager=INFO
#log4j.logger.com.bigdata.resources.IndexManager=INFO
#log4j.logger.com.bigdata.rdf.store.ITripleStore=INFO
#log4j.logger.com.bigdata.rdf.store.ConcurrentDataLoader=INFO
#log4j.logger.com.bigdata.rdf.store.DataLoader=INFO
log4j.logger.com.bigdata.rdf.rio.AsynchronousStatementBufferWithoutSids=INFO
log4j.logger.com.bigdata.rdf.load.RDFFileLoadTask=INFO
#log4j.logger.com.bigdata.rdf.spo.SPOIterator=WARN
#log4j.logger.com.bigdata.rdf.inf.InferenceEngine=INFO
log4j.logger.junit.framework.Test=INFO

# Lehigh benchmark integration
log4j.logger.edu.lehigh.swat.bench.ubt.bigdata=INFO,Console
#log4j.logger.edu.lehigh.swat.bench.ubt.bigdata.LubmGeneratorMaster=INFO,Console
#
#log4j.logger.com.bigdata.rdf.store.ITripleStore=INFO,Console
#log4j.logger.com.bigdata.rdf.spo.SPORelation=INFO,Console
#log4j.logger.com.bigdata.rdf.lexicon.LexiconRelation=INFO,Console
#
log4j.logger.com.bigdata.rdf.load.RDFDataLoadMaster=INFO,Console

# Query execution.
log4j.logger.com.bigdata.relation.rule.eval.ProgramTask=INFO,Console

log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
#log4j.appender.Console.layout.ConversionPattern=%-5p: %m%n
#log4j.appender.Console.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n
#log4j.appender.Console.layout.ConversionPattern=%-4r(%d) [%t] %-5p %c(%l:%M) %x - %m%n
#log4j.appender.Console.layout.ConversionPattern=%-5p: %r %X{trial} %X{depth} [%t] %l: %m%n
log4j.appender.Console.layout.ConversionPattern=%-5p: %r %X{clientname} %X{hostname} %X{serviceName} %t %l: %m%n

# A2 is set to be a FileAppender which logs ERROR at above on a shared volume.
log4j.appender.A2=org.apache.log4j.FileAppender
log4j.appender.A2.Threshold=ERROR
log4j.appender.A2.File=@ERROR_LOG@
log4j.appender.A2.Append=true
log4j.appender.A2.layout=org.apache.log4j.PatternLayout
log4j.appender.A2.layout.ConversionPattern=%5p [%t] %l %d - %m%n

# A3 is set to be a FileAppender which logs INFO at above on a shared volume.
log4j.appender.A3=org.apache.log4j.FileAppender
log4j.appender.A3.Threshold=INFO
log4j.appender.A3.File=@DETAIL_LOG@
log4j.appender.A3.Append=true
log4j.appender.A3.layout=org.apache.log4j.PatternLayout
log4j.appender.A3.layout.ConversionPattern=%5p [%t] %l %d - %m%n

log4j.appender.SYSLOG=org.apache.log4j.net.SyslogAppender
log4j.appender.SYSLOG.SyslogHost=@MASTER@
log4j.appender.SYSLOG.Header=true
log4j.appender.SYSLOG.layout=org.apache.log4j.PatternLayout
log4j.appender.SYSLOG.layout.ConversionPattern=%-5p: %r %X{clientname} %X{hostname} %X{serviceName} %t %l: %m%n
log4j.appender.SYSLOG.Facility=LOCAL1

# BEGIN APPENDER: SOCKET APPENDER (socketLogger)
# Note: if you don't have anything configured to accept the events
# from the socketLogger appender, you'll see an exception on program
# startup (to console), and occasional status messages (to console)
# on if the log4j system has managed to connect to the specified
# socket..
log4j.appender.socketLogger=org.apache.log4j.net.SocketAppender
log4j.appender.socketLogger.RemoteHost=@MASTER@
log4j.appender.socketLogger.Port=4445
log4j.appender.socketLogger.LocationInfo=true
# END APPENDER: SOCKET APPENDER (socketLogger)

##
# Event logger.
##
# @todo setup as rolling file appender.
log4j.logger.com.bigdata.service.EventReceiver=INFO,EventAppender
log4j.additivity.com.bigdata.service.EventReceiver=false
#log4j.appender.EventAppender=org.apache.log4j.ConsoleAppender
log4j.appender.EventAppender=org.apache.log4j.FileAppender
log4j.appender.EventAppender.Threshold=INFO
log4j.appender.EventAppender.File=@EVENT_LOG@
log4j.appender.EventAppender.Append=true
log4j.appender.EventAppender.BufferedIO=false
log4j.appender.EventAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.EventAppender.layout.ConversionPattern=%m
