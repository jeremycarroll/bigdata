# log4j client configuration.
#
# Note: This is the configuration that the application should use.  It
# is considered a "client" configuration because it will ship the log
# events to a log4j server using the [socketLogger].  This lets you
# aggregate log events across a cluster.
#
# Note: If the link to the log4j server goes down, then the
# application will block.  This makes that link a single point of
# failure.
#
# Note: If the log4j server goes down, then a warning will be logged
# on stderr for the application.
#
# Note: The application will proceed no faster than the TCP packets
# containing the log events that are being sent to the server. This
# should not be a problem unless very detailed logging is turned on.
#
# Note: The layout is NOT used by the SocketAppender.  The layout is
# decided on the other end by the log4j server's configuration file.
#
# You can also enable local logging.  You will have to choose a well
# known location for the log file since the same log4j configuration
# is used by all of the services (at least, by all of the same service
# type since you can not have a per-service instance override) in the
# federation.

##
# Configure appenders to be used.
##

# Setup relays log messages to a remote socket logger. The remote socket
# logger is then configured in [log4jServer.properties].  It will log ALL
# on the detailLog, ERROR+ on the errorLog and events on the eventLog. 
# However, it will ONLY log those messages which are logged here onto the
# [socketLogger].
# 
# Note: ERROR+ is also logged onto a local console so you can see any problems
# during startup when the socket logger might not be running.
#
# Note: You can control many of the logger levels using remote JMX MBeans.
#
log4j.rootCategory=WARN, socketLogger, errorConsole

# Loggers.
log4j.logger.com.bigdata=WARN
log4j.logger.com.bigdata.jini.start=INFO
log4j.logger.com.bigdata.jini.start.MonitorConfigZNodeTask=WARN
#log4j.logger.com.bigdata.jini.start.ManageLogicalServiceTask=WARN
log4j.logger.com.bigdata.jini.start.ServiceConfigurationZNodeMonitorTask=WARN
log4j.logger.com.bigdata.jini.start.MonitorCreatePhysicalServiceLocksTask=WARN
log4j.logger.com.bigdata.jini.start.config=WARN

# To debug the counter collection.
#log4j.logger.com.bigdata.counters=INFO

# To see the httpd log.
log4j.logger.com.bigdata.util.httpd.NanoHTTPD=INFO

# This logs the bigdata events, which are things like index partition splits,
# joins, moves, synchronous and asynchronous overflow, as well as index segment
# builds, etc.
log4j.logger.com.bigdata.service.EventReceiver=INFO

# This logs the output of the ServicesManagerServer's child processes. You may
# need to raise this to INFO to figure out what is going wrong with a child
# process start.
log4j.logger.com.bigdata.jini.start.process=INFO

# The zookeeper integration package.
log4j.logger.com.bigdata.zookeeper=WARN

# This class is way too verbose (SendThread @ WARN)
log4j.logger.org.apache.zookeeper.ClientCnxn=ERROR

# If trying to debug zookeeper problems.
#log4j.logger.org.apache.zookeeper=DEBUG

# This package is extremely verbose.
log4j.logger.com.bigdata.btree=WARN
log4j.logger.com.bigdata.service.AbstractServer=INFO
log4j.logger.com.bigdata.rdf.rio.AsynchronousStatementBufferWithoutSids=INFO
log4j.logger.com.bigdata.rdf.load.RDFFileLoadTask=INFO
log4j.logger.com.bigdata.rdf.load.RDFDataLoadMaster=INFO

# Lehigh benchmark integration
log4j.logger.edu.lehigh.swat.bench.ubt.bigdata=INFO

# Query execution.
log4j.logger.com.bigdata.relation.rule.eval.ProgramTask=INFO



##
# Setup the possible appenders (log destinations and layouts).
##

# errorConsole : logs ERROR+ onto the console.  This is redundant
# with the socketLogger, but it is nice to see the errors locally
# as well during startup or if the socketLogger is down.
#
log4j.appender.errorConsole=org.apache.log4j.ConsoleAppender
log4j.appender.errorConsole.Threshold=ERROR
log4j.appender.errorConsole.layout=org.apache.log4j.PatternLayout
log4j.appender.errorConsole.layout.ConversionPattern=%-5p: %r %X{clientname} %X{hostname} %X{serviceName} %t %l: %m%n

# socketLogger : logs onto a remote logging service.
#
# Note: This is a good way to aggregate your log across a cluster.
# The remote service is configured to log messages onto the different
# files (eventLog, errorLog, and detailLog).  Since there is only one
# process writing on those log files, there is no risk of log messages
# overwrites.
#
# Note: if you don't have anything configured to accept the events
# from the socketLogger appender, you'll see an exception on program
# startup (to console), and occasional status messages (to console)
# on if the log4j system has managed to connect to the specified
# socket.
#
# Note: One annoying feature of using this logger is that it DOES NOT
# use a layout.  This means that the MDC variables such as the hostname
# and serviceName ARE NOT available when the messages get logged.
#
log4j.appender.socketLogger=org.apache.log4j.net.SocketAppender
log4j.appender.socketLogger.RemoteHost=@LOG4J_SOCKET_LOGGER_HOST@
log4j.appender.socketLogger.Port=@LOG4J_SOCKET_LOGGER_PORT@
log4j.appender.socketLogger.LocationInfo=true

# SYSLOG : logs onto a remote syslogd service.
#
# Personally, I've never setup SYSLOG based logging, so you will
# have to do some legwork to set this up.
#
#log4j.appender.SYSLOG=org.apache.log4j.net.SyslogAppender
#log4j.appender.SYSLOG.SyslogHost=@SYSLOG_HOST@
#log4j.appender.SYSLOG.Header=true
#log4j.appender.SYSLOG.layout=org.apache.log4j.PatternLayout
#log4j.appender.SYSLOG.layout.ConversionPattern=%-5p: %r %X{clientname} %X{hostname} %X{serviceName} %t %l: %m%n
#log4j.appender.SYSLOG.Facility=LOCAL1

# A2 : logs at ERROR+ on a shared volume.
#
# Note: logging @ ERROR+ onto a shared volume can work since the volume of
# the logged messages is not so high, but concurrent messages can cause 
# overwrites or other oddness in the log file.
#
#log4j.appender.A2=org.apache.log4j.FileAppender
#log4j.appender.A2.Threshold=ERROR
#log4j.appender.A2.File=@ERROR_LOG@
#log4j.appender.A2.Append=true
#log4j.appender.A2.layout=org.apache.log4j.PatternLayout
#log4j.appender.A2.layout.ConversionPattern=%5p [%t] %l %d - %m%n

# A3 : logs INFO at above on a shared volume.
#
# Note: This approach does not work so well.  The log message volume is
# high enough that the log message overwrites and other weirdness are 
# common in the log files.
#log4j.appender.A3=org.apache.log4j.FileAppender
#log4j.appender.A3.Threshold=INFO
#log4j.appender.A3.File=@DETAIL_LOG@
#log4j.appender.A3.Append=true
#log4j.appender.A3.layout=org.apache.log4j.PatternLayout
#log4j.appender.A3.layout.ConversionPattern=%5p [%t] %l %d - %m%n

##
# EventAppender : this is the sink for bigdata events, which describe
# things such as index partition operations.  The events are written
# using a tab-delimited format.  The logger layout should not add 
# anything or it can cause problems when reading the events back into
# a worksheet or the like.
##
# @todo setup as rolling file appender.
#log4j.logger.com.bigdata.service.EventReceiver=INFO,EventAppender
#log4j.additivity.com.bigdata.service.EventReceiver=false
##log4j.appender.EventAppender=org.apache.log4j.ConsoleAppender
#log4j.appender.EventAppender=org.apache.log4j.FileAppender
#log4j.appender.EventAppender.Threshold=INFO
#log4j.appender.EventAppender.File=@EVENT_LOG@
#log4j.appender.EventAppender.Append=true
#log4j.appender.EventAppender.BufferedIO=false
#log4j.appender.EventAppender.layout=org.apache.log4j.PatternLayout
#log4j.appender.EventAppender.layout.ConversionPattern=%m
