
/* Configuration to supply to the Jini ServiceStarter.
 * This file provides information the ServiceStarter
 * needs to start any of the Bigdata services, as
 * well as the Jini lookup service and browser.
 */
import com.bigdata.util.config.ConfigurationUtil;

import com.sun.jini.config.ConfigUtil;
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import net.jini.core.discovery.LookupLocator;

com.sun.jini.start {

    private static jskCodebase = 
        ConfigurationUtil.computeCodebase
            ( "${bigdata.codebase.host}",
              "jsk-dl.jar", Integer.parseInt("${bigdata.codebase.port}"),
              "${bigdata.codebase.rootDir}", "none" );

    private static servicePolicyFile =
        "${appHome}${/}var${/}config${/}policy${/}service.policy";


    // For starting HTTP codebase class server
    private static httpdCodebase   = "";
    private static httpdPolicyFile = servicePolicyFile;
    private static httpdClasspath  = "${appHome}${/}lib${/}classserver.jar";
    private static httpdImplName   = "com.sun.jini.tool.ClassServer";
    private static httpdArgsArray  = new String[] {
        "-port", "${bigdata.codebase.port}",
        "-dir",  "${bigdata.codebase.rootDir}",
        //"-verbose",
        "-stoppable"
    };

    private static httpdDescriptor = new NonActivatableServiceDescriptor(
        httpdCodebase, httpdPolicyFile, httpdClasspath,
        httpdImplName, httpdArgsArray);

    // It is expected that all service-specific code will be
    // included in the classpath of the services being started
    // (for example, bigdata.jar and zookeeper.jar), as part of 
    // the service platform, rather than being downloaded. Instead,
    // because bigdata is run with a class server serving the
    // downloadable jini classes, the service codebases set below
    // are defined to include only the jini-specific downloaded
    // classes.

    // For starting a load balancer service

    private static loadbalancerCodebase = jskCodebase;

    private static loadbalancerClasspath = "${appHome}${/}lib${/}bigdata.jar";
    private static loadbalancerImplName  = "com.bigdata.loadbalancer.ServiceImpl";
    private static loadbalancerConfig    = "${appHome}${/}var${/}config${/}jini${/}loadbalancer.config";

    private static loadbalancerArgs0 =
        "com.bigdata.loadbalancer.groupsToJoin=new String[]${federation.name}";
    private static loadbalancerArgs1 =
        "com.bigdata.loadbalancer.locatorsToJoin=new LookupLocator[]${locsToJoin}";
    private static loadbalancerArgsArray = 
        ConfigurationUtil.createArgList
            ( new String[] { loadbalancerConfig, loadbalancerArgs0, loadbalancerArgs1 },
                             "${entityExtraArgs}");

    private static loadbalancerDescriptor = new NonActivatableServiceDescriptor(
        loadbalancerCodebase, servicePolicyFile, loadbalancerClasspath,
        loadbalancerImplName, loadbalancerArgsArray);

    // For starting a shard locator (metadata) service

    private static shardlocatorCodebase = jskCodebase;

    private static shardlocatorClasspath = "${appHome}${/}lib${/}bigdata.jar";
    private static shardlocatorImplName  = "com.bigdata.metadata.ServiceImpl";
    private static shardlocatorConfig    = "${appHome}${/}var${/}config${/}jini${/}shardlocator.config";

    private static shardlocatorArgs0 =
        "com.bigdata.metadata.groupsToJoin=new String[]${federation.name}";
    private static shardlocatorArgs1 =
        "com.bigdata.metadata.locatorsToJoin=new LookupLocator[]${locsToJoin}";
    private static shardlocatorArgsArray = 
        ConfigurationUtil.createArgList
            ( new String[] { shardlocatorConfig, shardlocatorArgs0, shardlocatorArgs1 },
                             "${entityExtraArgs}");

    private static shardlocatorDescriptor = new NonActivatableServiceDescriptor(
        shardlocatorCodebase, servicePolicyFile, shardlocatorClasspath,
        shardlocatorImplName, shardlocatorArgsArray);

    // For starting a shard (data) service

    private static shardCodebase = jskCodebase;

    private static shardClasspath = "${appHome}${/}lib${/}bigdata.jar";
    private static shardImplName  = "com.bigdata.shard.ServiceImpl";
    private static shardConfig    = "${appHome}${/}var${/}config${/}jini${/}shard.config";

    private static shardArgs0 =
        "com.bigdata.shard.groupsToJoin=new String[]${federation.name}";
    private static shardArgs1 =
        "com.bigdata.shard.locatorsToJoin=new LookupLocator[]${locsToJoin}";
    private static shardArgsArray = 
        ConfigurationUtil.createArgList
            ( new String[] { shardConfig, shardArgs0, shardArgs1 },
                             "${entityExtraArgs}");

    private static shardDescriptor = new NonActivatableServiceDescriptor(
        shardCodebase, servicePolicyFile, shardClasspath,
        shardImplName, shardArgsArray);

    // For starting a callable task executor service

    private static executorCodebase = jskCodebase;

    private static executorClasspath = "${appHome}${/}lib${/}bigdata.jar";
    private static executorImplName  = "com.bigdata.executor.ServiceImpl";
    private static executorConfig    = "${appHome}${/}var${/}config${/}jini${/}executor.config";

    private static executorArgs0 =
        "com.bigdata.executor.groupsToJoin=new String[]${federation.name}";
    private static executorArgs1 =
        "com.bigdata.executor.locatorsToJoin=new LookupLocator[]${locsToJoin}";
    private static executorArgsArray = 
        ConfigurationUtil.createArgList
            ( new String[] { executorConfig, executorArgs0, executorArgs1 },
                             "${entityExtraArgs}");

    private static executorDescriptor = new NonActivatableServiceDescriptor(
        executorCodebase, servicePolicyFile, executorClasspath,
        executorImplName, executorArgsArray);

    // For starting a transaction service

    private static transactionCodebase = jskCodebase;

    private static transactionClasspath = "${appHome}${/}lib${/}bigdata.jar";
    private static transactionImplName  = "com.bigdata.transaction.ServiceImpl";
    private static transactionConfig    = "${appHome}${/}var${/}config${/}jini${/}transaction.config";

    private static transactionArgs0 =
        "com.bigdata.transaction.groupsToJoin=new String[]${federation.name}";
    private static transactionArgs1 =
        "com.bigdata.transaction.locatorsToJoin=new LookupLocator[]${locsToJoin}";
    private static transactionArgsArray = 
        ConfigurationUtil.createArgList
            ( new String[] { transactionConfig, transactionArgs0, transactionArgs1 },
                             "${entityExtraArgs}");

    private static transactionDescriptor = new NonActivatableServiceDescriptor(
        transactionCodebase, servicePolicyFile, transactionClasspath,
        transactionImplName, transactionArgsArray);

    // For starting a quorum peer (zookeeper) service from the bigdata codebase

    private static quorumCodebase = jskCodebase;

    private static quorumClasspath = "${appHome}${/}lib${/}bigdata.jar";
    private static quorumImplName  = "com.bigdata.quorum.ServiceImpl";
    private static quorumConfig    = "${appHome}${/}var${/}config${/}jini${/}quorum.config";

    private static quorumArgs0 =
        "com.bigdata.quorum.groupsToJoin=new String[]${federation.name}";
    private static quorumArgs1 =
        "com.bigdata.quorum.locatorsToJoin=new LookupLocator[]${locsToJoin}";
    private static quorumArgsArray = 
        ConfigurationUtil.createArgList
            ( new String[] { quorumConfig, quorumArgs0, quorumArgs1 },
                             "${entityExtraArgs}");

    private static quorumDescriptor = new NonActivatableServiceDescriptor(
        quorumCodebase, servicePolicyFile, quorumClasspath,
        quorumImplName, quorumArgsArray);

    // For starting a zookeeper server (from the zookeeper codebase)

    private static zookeeperCodebase = jskCodebase;

    private static zookeeperClasspath = "${appHome}${/}lib${/}zookeeper.jar";
    private static zookeeperImplName  = "org.apache.zookeeper.server.quorum.QuorumPeerImpl";
    private static zookeeperConfig    = "${appHome}${/}var${/}config${/}jini${/}zookeeper.config";

    private static zookeeperArgs0 =
        "org.apache.zookeeper.server.quorum.groupsToJoin=new String[]${federation.name}";
    private static zookeeperArgs1 =
        "org.apache.zookeeper.server.quorum.locatorsToJoin=new LookupLocator[]${locsToJoin}";
    private static zookeeperArgsArray = 
        ConfigurationUtil.createArgList( new String[] { zookeeperConfig, zookeeperArgs0, zookeeperArgs1 },
                                          "${entityExtraArgs}");

    private static zookeeperDescriptor = new NonActivatableServiceDescriptor(
        zookeeperCodebase, servicePolicyFile, zookeeperClasspath,
        zookeeperImplName, zookeeperArgsArray);


    // For starting a lookup service
    private static reggieServerCodebase = 
        ConfigurationUtil.computeCodebase
            ( "${bigdata.codebase.host}",
              "reggie-dl.jar", Integer.parseInt("${bigdata.codebase.port}"),
              "${bigdata.codebase.rootDir}", "none" );
    private static reggieCodebase = 
        ConfigUtil.concat( new String[] { reggieServerCodebase, " ", jskCodebase } );

    private static reggieClasspath = "${appHome}${/}lib${/}reggie.jar";
    private static reggieImplName  = "com.sun.jini.reggie.TransientRegistrarImpl";
    private static reggieConfig    = "${appHome}${/}var${/}config${/}jini${/}reggie.config";

    private static reggieArgs0 =
        "com.sun.jini.reggie.initialLookupGroups=new String[]${federation.name}";
    private static reggieArgs1 =
        "com.sun.jini.reggie.initialLookupLocators=new LookupLocator[]${locsToJoin}";
    private static reggieArgs2 =
        "com.sun.jini.reggie.initialMemberGroups=new String[]${memberGroups}";
    private static reggieArgsArray = 
        ConfigurationUtil.createArgList( new String[] { reggieConfig, reggieArgs0, reggieArgs1, reggieArgs2 },
                                          "${entityExtraArgs}");

    private static reggieDescriptor = new NonActivatableServiceDescriptor(
        reggieCodebase, servicePolicyFile, reggieClasspath,
        reggieImplName, reggieArgsArray);


    // For starting a Jini browser
    private static browserServerCodebase =
        ConfigurationUtil.computeCodebase
            ( "${bigdata.codebase.host}",
              "browser-dl.jar", Integer.parseInt("${bigdata.codebase.port}"),
              "${bigdata.codebase.rootDir}", "none" );
    private static browserCodebase = 
        ConfigUtil.concat( new String[] { browserServerCodebase, " ", jskCodebase } );

    private static browserClasspath = 
        "${appHome}${/}lib${/}browser.jar${path.separator}${appHome}${/}lib${/}jsk-lib.jar${path.separator}${appHome}${/}lib${/}log4j.jar${path.separator}${appHome}${/}lib${/}bigdata.jar${path.separator}${appHome}${/}lib${/}zookeeper.jar";
    private static browserImplName = "com.sun.jini.example.browser.Browser";
    private static browserConfig   = "${appHome}${/}bin${/}config${/}browser.config";

    private static browserArgs0 =
        "com.sun.jini.example.browser.initialLookupGroups=new String[]${federation.name}";
    private static browserArgs1 =
        "com.sun.jini.example.browser.initialLookupLocators=new LookupLocator[]${locsToJoin}";
    private static browserArgsArray = 
        ConfigurationUtil.createArgList( new String[] { browserConfig, browserArgs0, browserArgs1 },
                                          "${entityExtraArgs}");

    private static browserDescriptor = 
        new NonActivatableServiceDescriptor( browserCodebase, servicePolicyFile,
                                             browserClasspath, browserImplName,
                                             browserArgsArray);

    // Scripts (ex. pstart) can override this entry 
    serviceDescriptors = new ServiceDescriptor[] {
        //httpdDescriptor,
        //reggieDescriptor,
        //quorumDescriptor,
        //loadbalancerDescriptor,
        //shardlocatorDescriptor,
        //shardDescriptor,
        //executorDescriptor,
        //transactionDescriptor,
        //zookeeperDescriptor,
        //browserDescriptor
    };

}