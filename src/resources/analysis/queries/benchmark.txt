# Standard query set for benchmark run analysis.
#
# This file contains a list of URLs of interest when doing a post-mortem
# investigation.  The file is basically a list of URLs which could be used
# to demand the corresponding counters from the httpd service.  It can be
# submitted to a Java class that will extract the necessary performance
# counters from a directory containing counter set XML files.  This is done
# relatively efficiently - in a single pass over the XML files.
#
# In addition to the normal URL, you will typically want to specify the
# "file=" URL query parameter to name the output file.  You can also specify
# the desired MIME type using the "-mimeType=" URL query parameter.
#
# The output files are grouped according to the following file system
# hierarchy.
#
# cpu		    (per host CPU)
# disk		    (per host DISK)
# memory	    (per host RAM mixed with some per-service memory stuff)
# indices
# indices/sync  (synchronous index RPC)
# indices/async (asynchronous index writes)
# service
# service/cs    (counters specific to client servers)
# service/ds    (counters specific to data servers)
# service/lbs   (counters specific to the load balancer)
# service/mds   (counters specific to the metadata server)
# service/txs   (counters specific to the transaction server)

##
# Asynchronous index write API
##
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/chunksIn&depth=14&period=Minutes&report=correlated&file=indices/async/chunksIn
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/chunksTransferred&depth=14&period=Minutes&report=correlated&file=indices/async/chunksTransferred
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageTransferChunkSize&depth=14&period=Minutes&report=correlated&file=indices/async/averageTransferChunkSize
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/chunksOut&depth=14&period=Minutes&report=correlated&file=indices/async/chunksOut
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageMillisPerWait&correlated=true&depth=14&period=Minutes&file=indices/async/averageMillisPerWait
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageMillisPerWrite&correlated=true&depth=14&period=Minutes&file=indices/async/averageMillisPerWrite
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageElementsPerWrite&correlated=true&depth=14&period=Minutes&file=indices/async/averageElementsPerWrite

http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageMasterQueueSize&depth=14&period=Minutes&report=correlated&file=indices/async/averageMasterQueueSize
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageMasterRedirectQueueSize&depth=14&period=Minutes&report=correlated&file=indices/async/averageMasterRedirectQueueSize
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageSinkQueueSize&depth=14&period=Minutes&report=correlated&file=indices/async/averageSinkQueueSize
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageSinkQueueSizeStdev&depth=14&period=Minutes&report=correlated&file=indices/async/averageSinkQueueSizeStdev
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageMaximumSinkQueueSize&depth=14&period=Minutes&report=correlated&file=indices/async/averageMaximumSinkQueueSize
# Note: changed averageHandleChunkNanos to averageHandleChunkMillis on 6/7/09.  This is just a name change.  The historical values were reported in milliseconds. 
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageHandleChunkMillis&depth=14&period=Minutes&report=correlated&file=indices/async/averageHandleChunkMillis
# Note: changed averageSplitChunkNanos to averageSplitChunkMillis on 6/7/09.  This is just a name change.  The historical values were reported in milliseconds. 
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageSplitChunkMillis&depth=14&period=Minutes&report=correlated&file=indices/async/averageSplitChunkMillis
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/asynchronous/averageSinkOfferMillis&depth=14&period=Minutes&report=correlated&file=indices/async/averageSinkOfferMillis

##
# Synchronous index RPC API.
##
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/synchronous/averageMillisPerRequest&correlated=true&depth=14&period=Minutes&file=indices/sync/averageMillisPerRequest
http://localhost:8080/?regex=/([^/]*)/.*(IClientService|IDataService)/.*/Indices/(.*)/synchronous/averageElementsPerRequest&correlated=true&depth=14&period=Minutes&file=indices/sync/averageElementsPerRequest

##
# CPU
##
http://localhost:8080/?regex=/([^/]*)/.*Processor%20Time&depth=4&correlated=true&period=Minutes&file=cpu/ProcessorTime
http://localhost:8080/?regex=/([^/]*)/.*IO%20Wait&depth=4&correlated=true&period=Minutes&file=cpu/IOWait

##
# Memory (per host and per CS/DS process)
##
http://localhost:8080/?regex=/([^/]*)/.*Memory/Bytes%20Free&correlated=true&depth=3&file=memory/BytesFree
http://localhost:8080/?regex=/([^/]*)/.*Memory/Swap%20Bytes%20Used&correlated=true&depth=3&period=Minutes&file=memory/SwapBytesUsed
http://localhost:8080/?regex=/([^/]*)/.*Memory/Major%20Page%20Faults%20Per%20Second&correlated=true&depth=3&period=Minutes&file=memory/MajorPageFaultsPerSecond
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*/Memory/DirectBufferPool/poolSize&correlated=true&depth=12&file=memory/directBufferPool/poolSize
http://localhost:8080/?regex=/([^/]*)/.*(IDataService|IClientService)/.*/Memory/Virtual%20Size&correlated=true&depth=12&file=memory/VirtualSize
http://localhost:8080/?regex=/([^/]*)/.*(IDataService|IClientService)/.*/Memory/Resident%20Set%20Size&correlated=true&depth=12&file=memory/ResidentSetSize
http://localhost:8080/?regex=/([^/]*)/.*(IDataService|IClientService)/.*/Memory/Runtime%20Total%20Memory&correlated=true&depth=12&file=memory/RuntimeTotalMemory
http://localhost:8080/?regex=/([^/]*)/.*(IDataService|IClientService)/.*/Memory/Runtime%20Free%20Memory&correlated=true&depth=12&file=memory/RuntimeFreeMemory
http://localhost:8080/?regex=/([^/]*)/.*(IDataService|IClientService)/.*/Memory/Garbage%20Collectors/([^/]*)/Cumulative%20Collection%20Time&correlated=true&depth=12&file=memory/GC/CumulativeCollectionTime

##
# DISK (per host and some per-DS stuff)
##
http://localhost:8080/?depth=3&correlated=true&regex=/([^/]*)/.*PhysicalDisk/Bytes%20Written%20Per%20Second&period=Minutes&file=disk/BytesWrittenPerSecond
http://localhost:8080/?depth=3&correlated=true&regex=/([^/]*)/.*PhysicalDisk/Bytes%20Read%20Per%20Second&period=Minutes&file=disk/BytesReadPerSecond

##
# LBS
##
http://localhost:8080/?filter=hosts/scores&correlated=true&depth=7&file=service/lbs/hostScores

##
# DS
##

http://localhost:8080/?depth=10&regex=/([^/]*)/.*Overflow%20Manager/Asynchronous%20Overflow%20Count&correlated=true&period=Minutes&file=service/ds/AsynchronousOverflowCount

# Note: You can identify "hot" data services and "hot" indices and index partitions
# by examining the read and write time for the live journal, the index, or the index
# partition.  The per-index partition and the per-index data are extracted in a form 
# suited for a pivot table due to the large #of empty cells.  In general I recommend
# extracting at the per-index partition detail level since you can always use a pivot
# table to aggregate the data to the per-index level.  However, if there is too much
# data you may be forced to extract it at the per-index level instead.  You can also
# identify potential hotspots by considering dumps of the index partition metadata
# and looking for indices whose size on a given host is growing rapidly.  Eventually
# a hotspot is normally handled by splits and a move of a split.  However, that does
# not always occur in a timely manner and some index write patterns require special
# handling, e.g., an index which is tail append and hot for write can not be handled
# by a split and a move.  Instead, you generally need to change the application or
# the schema such that the tail append pattern is distributed across multiple index
# partitions.
#
# per index partition:
#
#http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Index%20Manager/indices/(?=U[^/]*)([^/]*)/([^/]*)/.*(?:writeSecs|readSecs|serializeSecs|deserializeSecs|leafSplit|tailSplit)&depth=12&period=Minutes&report=pivot&category=host&category=indexName&category=indexPartitionName&file=service/ds/indices/IndexPartitionReadWriteTime
#
# per index:
#
#http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Index%20Manager/indices/(?=U[^/]*)([^/]*)/(?:[^/]*)/.*(?:writeSecs|readSecs|serializeSecs|deserializeSecs|leafSplit|tailSplit)&depth=12&period=Minutes&report=pivot&category=host&category=indexName&category=indexPartitionName&file=ds/service/indices/IndexReadWriteTime

# @todo live journal counters are not being carried through past the first overflow.
# http://localhost:8080/?regex=/([^/]*)/.*/Live%20Journal/disk/readSecs&depth=18&correlated=true&period=Minutes&file=service/ds/liveJournal/readSecs
# http://localhost:8080/?regex=/([^/]*)/.*/Live%20Journal/disk/writeSecs&depth=18&correlated=true&period=Minutes&file=service/ds/liveJournal/writeSecs

http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Store%20Manager/Data%20Volume%20Bytes%20Available&depth=12&period=Minutes&correlated=true&file=service/ds/DataVolumeBytesAvailable
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Store%20Manager/Temp%20Volume%20Bytes%20Available&depth=12&period=Minutes&correlated=true&file=service/ds/TempVolumeBytesAvailable
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Store%20Manager/Store%20Cache%20Size&depth=12&period=Minutes&correlated=true&file=service/ds/StoreCacheSize
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Store%20Manager/Maximum%20Journal%20Size%20At%20Overflow&depth=12&period=Minutes&correlated=true&file=service/ds/MaximumJournalSizeAtOverflow
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Store%20Manager/Managed%20Journal%20Count&depth=12&period=Minutes&correlated=true&file=service/ds/ManagedJournalCount
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Store%20Manager/Managed%20Segment%20Store%20Count&depth=12&period=Minutes&correlated=true&file=service/ds/ManagedSegmentStoreCount
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Store%20Manager/Bytes%20Under%20Management&period=Minutes&depth=10&correlated=true&file=service/ds/BytesUnderManagement
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Index%20Manager/Index%20Count&depth=12&period=Minutes&correlated=true&file=service/ds/IndexCount
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Index%20Manager/Index%20Cache%20Size&depth=12&period=Minutes&correlated=true&file=service/ds/IndexCacheSize
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Index%20Manager/Index%20Segment%20Cache%20Size&depth=12&period=Minutes&correlated=true&file=service/ds/IndexSegmentCacheSize
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Index%20Manager/Index%20Segment%20Open%20Leaf%20Count&depth=12&period=Minutes&correlated=true&file=service/ds/OpenLeafCount
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Index%20Manager/Index%20Segment%20Open%20Leaf%20Byte%20Count&depth=12&period=Minutes&correlated=true&file=service/ds/OpenLeafByteCount

http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Unisolated%20Write%20Service/Average%20Arrival%20Rate&depth=9&correlated=true&period=Minutes&file=service/ds/AverageArrivalRate
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Unisolated%20Write%20Service/Average%20Arrival%20Service&depth=9&correlated=true&period=Minutes&file=service/ds/AverageServiceRate
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Unisolated%20Write%20Service/Average%20Queue%20Length&depth=9&correlated=true&period=Minutes&file=service/ds/AverageQueueLength
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Unisolated%20Write%20Service/Average%20Queuing%20Time&depth=9&correlated=true&period=Minutes&file=service/ds/AverageQueuingTime
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Unisolated%20Write%20Service/Average%20Service%20Time&depth=9&correlated=true&period=Minutes&file=service/ds/AverageServiceTime
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Unisolated%20Write%20Service/Average%20Active%20Count%20With%20Locks%20Held&depth=9&correlated=true&period=Minutes&file=service/ds/AverageActiveCountWithLocksHeld
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Unisolated%20Write%20Service/Average%20Commit%20Group%20Size&depth=9&correlated=true&period=Minutes&file=service/ds/AverageCommitGroupSize
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Unisolated%20Write%20Service/Average%20Byte%20Count%20Per%20Commit&depth=9&correlated=true&period=Minutes&file=service/ds/AverageByteCountPerCommit
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Unisolated%20Write%20Service/Average%20Commit%20Service%20Time&depth=9&correlated=true&period=Minutes&file=service/ds/AverageCommitServiceTime

http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Overflow%20Tasks/Move%20Count&depth=8&correlated=true&period=Minutes&file=service/ds/MoveCount
http://localhost:8080/?regex=/([^/]*)/.*IDataService/.*Overflow%20Tasks/Split%20Count&depth=8&correlated=true&period=Minutes&file=service/ds/SplitCount
