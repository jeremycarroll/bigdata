import java.io.File;

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import com.bigdata.util.NV;

import com.bigdata.service.IBigdataClient;
import com.bigdata.service.jini.DataServer;

import org.apache.zookeeper.ZooDefs;
import org.apache.zookeeper.data.ACL;
import org.apache.zookeeper.data.Id;

/*
 * Declares how the service will provision itself.
 */
com.bigdata.service.jini.DataServer {

    /*
     * This object is used to export the service proxy.  The choice
     * here effects the protocol that will be used for communications
     * between the clients and the service.
     *
     * Note: specify the JVM property
     * [-Dcom.sun.jini.jeri.tcp.useNIO=true] to enable NIO.
     */
    exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                     new BasicILFactory()); 
    
    /*
     * The service data directory.
     */
    dataDir = "standalone/DataServer0";
    
	/*                                          
	 * The file on which the serviceID will be written.
	 */
    serviceIdFile = new File(dataDir+"/service.id"); 
    
	/* 
	 * Optional inline properties for the service configuration.
	 * Any values specified here will OVERRIDE any values read
	 * from the optional [propertyFile].
	 */
	properties = new NV[] {

        // Don't collect statistics from the OS.
		new NV(IBigdataClient.Options.COLLECT_PLATFORM_STATISTICS, "false"),

        // Don't sample the various queues.
        //new NV(IBigdataClient.Options.COLLECT_QUEUE_STATISTICS,"false"),

        // Don't run the httpd service.
        new NV(IBigdataClient.Options.HTTPD_PORT, "-1"),

	/*
	 * The data directory (required).  All persistent data is
	 * stored here.
	 */
	new NV(DataServer.Options.DATA_DIR,dataDir)
		
	};

}

/*
 * Declares how the service will advertise itself.
 */
com.bigdata.service.jini.JiniClient {

	/*
	 * Entry attributes used to describe the service.
	 */
    entries = new Entry[] {
                new Name("DataService0"), // human facing name.
                new ServiceInfo("bigdata", // product or package name
                        "SYSTAP,LLC", // manufacturer
                        "SYSTAP,LLC", // vendor
                        "0.1-beta", // version
                        "DataService", // model
                        "serial#" // serialNumber
                ) };

	/*
	 * Note: multicast discovery is always used if LookupDiscovery.ALL_GROUPS is
	 * specified.
	 */
//    groups = LookupDiscovery.ALL_GROUPS;
    groups = new String[]{"bigdata"};

	/*
	 * One or more unicast URIs of the form jini://host/ or jini://host:port/.
	 * This MAY be an empty array if you want to use multicast discovery _and_
	 * you have specified LookupDiscovery.ALL_GROUPS above.
	 */
	locators = new LookupLocator[] {
    	new LookupLocator("jini://localhost/")
	};    

}

/*
 * Zookeeper client configuration.
 */
org.apache.zookeeper.ZooKeeper {

    /* Root znode for the federation instance. */
    zroot = "/test";

    /* A comma separated list of host:port pairs, where the port is
     * the CLIENT port for the zookeeper server instance.
     */
    servers = "localhost:2181";

    /* 
     * ACLs for the federation zroot.
     *
     * Note: zookeeper ACLs are not transmitted over secure channels
     * and are placed into plain text Configuration files by the
     * ServicesManagerServer.
     */
    acl = new ACL[] {

	new ACL(ZooDefs.Perms.ALL, new Id("world", "anyone"))

    };

}
