Issues to be resolved in this branch.

1. Re-design of the node/leaf API to support processing of serialized
   nodes and leaves without materializing their contents as java
   objects.  Nodes and leaves are now expanded into Java objects iff a
   mutation needs to be performed on the node or leaf. 

   Note: Since search may have more overhead, operations per second
   (lookup, insert, etc) may actually be slower until caching effects
   trump IO Wait.

2. Global record or B+Tree node/leaf record buffering for a DS.  This
   allows us to efficiently use all available RAM to buffer the
   indices.

3. Store level record compression.

4. Dependency refactor (fastutil, dsiutils, lgpl-utils).

--------------------

Query optimization

x. B+Tree optimization (at least with respect to performance tuning
   for the B+Tree refactor change set).

x. Parallel range iterator flag.

x. Resolve RDF Values using JOINs.

x. Distributed join optimization (performance tuning, hot spot
   elimination, configuration parameter tuning, etc).

--------------------

Index partition splits.

   - Proactive scheduling

   - Faster (possible dependency on deleted tuple count, but actually
     I think that is a dead end).

   - More robust (transactional)

   - Based on #of bytes in post-merge file (no need to tweak).

------------------------------------------------------------
-------------- Store level record compression --------------
------------------------------------------------------------

- Support gzip, zip, bmz and other compression protocols in the store
  at the record level.

       - bmz implementation in C available from hypertable at
         http://www.hypertable.org/doxygen/dir_636d9f0bc773a215f705e2de9f182c4e.html
         (GPL).  The author was Luke Lu.  I don't know if there is a
         JNI wrapper for it or not.  Luke Lu <hypertable@vicaya.com>
         and probably Luke (vicaya@gmail.com).

	 There is a open source implementation of bmdiff/zippy like
         library in Hypertable, called bmz. It’s written in pure ANSI
         C, and can be easily embedded in any project (that was a goal
         I had in mind, so it’s written in C instead of C++ like the
         rest of the Hypertable). The performance is similar to
         google’s published numbers for small blocks (the size of
         sstable block from 64KB-128KB. The speed to will go down
         dramatically (to about 40MB/s), when the block size is big
         enough to thrash the processor cache, as the algorithm uses a
         hashtable.)  I wrote it (the bmdiff part, lzo is used for the
         optional final pass) mostly for experiments without much
         optimization (so there are rooms for improvement). The
         Rabin-Karp like hash functions can be easily plugged in for
         experiments. Feel free to give it try and ping me on how to
         use the library (documentation is in bmz.h.)

Goals:

  - Compression: two-level compression.

    1. Record compression (e.g., deflate)

       Store as record header + compressed (deflate) record body.

       Using deflate (record level compression) is new.  The thing
       which makes it difficult is the double-linked leaves in the
       index segment.  The record size must be known when we obtain
       the address of the record from the store.  This means that the
       priorAddr/nextAddr are outside of the compressed region.  Thus
       generalized record compression at the store level requires us
       to mark the #of header bytes.  Otherwise we can handle record
       compression at the B+Tree level.

    2.

     Header:

	  -- header --
	  headerDataLength(byte) // node=1;leaf=1;linkedLeaf=17(1+sizeof(long)*2)) 
	  [ // This field exists iff compression was used.
	   bodyDataLength(int)
	  ]

       The [headerDataLength] gives the #of bytes of application data
       in the header exclusive of the header metadata. If there is no
       application header data then this field is zero.  The header
       data is intended used to represent data which can not be
       compressed.  For example, the priorAddr and nextAddr fields of
       an IndexSegment leaf can not be compressed because we need to
       know the total size of the record before they can be
       assigned. If the byte count is negative, then it is interpreted
       as the #of 32-bit words containing (uncompressed) header data.

       Either all records in the store are compressed by a common
       technique or none are.  This is indicated when the store is
       created.  The compression method should be something fast for
       the journal when used to absorb writes for a data service and
       could even be "none".  The compression method can also be set
       for each index and will be applied to all IndexSegmentStore
       files generated for that scale-out index.

       When the records for a store are compressed, [bodyDataLength]
       gives the #of bytes in the decompressed record body and is used
       to pre-allocate a right sized ByteBuffer when compressing the
       record.  The actual size of that ByteBuffer is the decoded
       headerDataLength plus the bodyDataLength.

       IRawStore#write(ByteBuffer) always writes a record with zero
       header data bytes.  IRawStore#write(int,ByteBuffer) writes a
       record whose first N bytes are stored in the header data
       section (outside of the compressed record body).  On read,
       the returned ByteBuffer always has exactly the same data.

       There will need to be alternative IRawStore#write() methods
       which accept the #of header data bytes.  The header data itself
       appears in the ByteBuffer to be written just as it would appear
       when the record was deserialized.  Compression may be applied
       to all records on the store.  The root blocks are fixed length
       regions which lie outside of the user space for the store and
       are not compressed. 

       Compression and decompression will need to pay attention to the
       header.  When we ready from the backing file we will get a
       ByteBuffer.  If the record in that ByteBuffer is compressed,
       then we automatically decompress the record.  The origin of the
       ByteBuffer is automatically adjusted to the start of the header
       data area.  The body data bytes follow the header data bytes so
       the ByteBuffer provides an uninterrupted view of the header
       data + body data to the application.

	    @todo Write a compression service.  It can have a queue
		  and use a small thread pool to (de-)compress
		  records.  Each worker thread will have its own
		  compression buffer, which should grow until "right
		  sized".

            FIXME review the use of byteCount as decoded from the addr
            in application level data structures.  If we allow
            optional compression then this will break code which
            assumes that the byteCount reflects the pre-compression
            record size. 
	    
	    @todo The IndexSegmentBuilder will have to explicitly
	          apply the selected record compression and we will
	          then have to patch the priorAddr and nextAddr on the
	          record.

       Checksums are a store-level option.  The checksum is computed
       for the entire record, including the record header and any
       application data stored in the header data bytes.  If both
       compression and checksums are enabled, then the checksum is
       taken of the compressed record.  When enabled, the checksum is
       written into the last 4 bytes of the record, and the size of
       the record is automatically adjusted to store those additional
       bytes.  The checksum itself is be visible at the {@link
       IRawStore} API layer (the ByteBuffer view is adjusted so as to
       hide the checksum).

	    @todo Write a checksum service.  It can have a queue and
		  use a small thread pool to compute or verify
		  checksums for records.  Notification should be
		  synchronous to avoid use of records whose checksums
		  indicate a media error.  This could be layered over
		  the compression service or the same worker thread
		  could be assigned both tasks.  Each worker thread
		  should have a thread local
		  com.bigdata.util.ChecksumUtility instance.

	    @todo The key and value compression APIs may need to be
		  changed since they were written with the assumption
		  that we were encoding onto an OutputStream.  

		  Can we apply record level compression to keys and
		  values serialized for RMI?

		  Can we serialize key/value data as ByteBuffer's
		  wrapped as INodeData for RMI?

	    @todo Move various interfaces and tests related to the
	          node and leaf data records into their own package.

       Node:

	  -- header data --
          type(byte) // 0=node
	  -- body (compressed) --
	  version(short)
	  flags(short) // unused.
    	  nkeys(int)
	  nentries(int)
	  keysSize(int)
	  childAddr[]:long[]
	  childEntryCounts:int[]
	  keys:byte[][] // encoded as dictionary plus byte aligned code strings.

       new Node(ByteBuffer) // wrap ByteBuffer as NodeData, initialize
			    // nkeys and nentries from the ByteBuffer
			    // and set a ref to the NodeData

       ReadOnlyNodeData(ByteBuffer) // wrap and decode.

       ReadOnlyNodeData(INodeData) // allocate ByteBuffer, encode on
				   // ByteBuffer as [header+body], and
				   // wrap.

       Leaf:

	  -- header data --
          type(byte) // 1=leaf; 2=linkedLeaf
	  [ // iff linked leaf.
	   priorAddr(long)
	   nextAddr(long)
	  ]
	  -- body (compressed) --
	  version(short)
	  flags(short) // VERSION_TIMESTAMPS | DELETE_MARKERS
    	  nkeys(int)
	  keysSize(int)
	  valuesSize(int)
	  timestamp:long[] // optional, based on B+Tree provisioning.
	  deleteMarker:bit[] // optional, based on B+Tree provisioning.
	  keys:byte[][] // encoded as dictionary plus byte aligned code strings.
	  values:byte[][] // encoded as dictionary plus byte aligned code strings.

       new Leaf(ByteBuffer) // wrap ByteBuffer as LeafData, initialize
			    // nkeys from the ByteBuffer and set a ref
			    // to the LeafData.  priorAddr and nextAddr
			    // are available iff type==2.

       ReadOnlyLeafData(ByteBuffer) // wrap and decode.

       ReadOnlyLeafData(ILeafData) // allocate ByteBuffer, encode on
				   // ByteBuffer as [header+body], and
				   // wrap.

       These record layouts order the fixed length fields and arrays
       with known dimensions to the front of the record.  The keys and
       values are ordered to the back of the record.

       The node/leaf type byte is in the header because we must
       inspect it before we can interpret the bytes which could
       correspond to the priorAddr and nextAddr fields and those
       fields can not be compressed, which is why they are stored in
       the header data.  This means that the type field itself must be
       in the header data as well.  This means that writing a B+Tree
       node or leaf will always use IRawStore#write(int,ByteBuffer).

       The keys and values 

       - The key compression and value compression methods are stored
         on the BTree.  So is the branching factor.

	 Serialize the HuTucker coder, decoder and the codewords,
	 which is a bit string.  Do search by projecting the probe key
	 using the coder and then do use linear scan of the code words
	 stopping at the first code work GTE the key.
	 
	 The HuTucker decoder (TreeDecoder) can be built from the
	 codeWords:BitVector and the symbol:int[].  So we only need to
	 store those two things.  We can then rewind the bit stream to
	 decode the code words.
	 
	 The HuTucker coder (CodeWordCoder) can be built from the
	 codeWords:BitVector.

	 - Could bit flag nulls explicitly rather than mussing with
           the huffman encoding.  When scanning the code words to
           decode a value we would have to skip an imaginary code word
           if the corresponding tuple index was null or deleted.

	 ? Why not a ctor for TreeDecoder which accepts a BIS?

       - Done. IAbstractNodeData#getBranchingFactor() is deprecated
         (the field is not stored in node/leaf data record and the
         branchingFactor field is on the AbstractBTree and should be
         accessed there).

       - The priorAddr and nextAddr fields need to be exposed by the
         ILeafData API.

	 The getter methods should throw an exception if the fields
         are not present in the data record (e.g., for a BTree vs an
         IndexSegment).

	 On write, these fields are set in the buffer _after_ the
         record is serialized and we have the address of the _next_
         record from the store.

       - Done. Create mutable INodeData and ILeafData implementations
         based on the existing code in AbstractNode, Node, Leaf, and
         MutableKeys.

       - Refactor Node and Leaf to delegate to the INodeData or
         ILeafData implementation.
	 
	 (***) ILeafData#getValue(int) and possibly some other methods
	       must also test whether or not the tuple has been
	       deleted.

       - Persistence of a mutable node should always produce the same
	 binary image as an immutable node.  If the immutable node
	 needs to be modified, then explode it into java objects.

       - Add global read retention queue and weak value hash map based
         lookup per store of the retained nodes.
         
       - INodeFactory must be replaced or modified such that it
         creates a Node or Leaf from a ByteBuffer or allocates and
         writes the representation of a Node or Leaf on a ByteBuffer,
         which is more or less the role of the NodeSerializer.  The
         INodeFactory passes all of the arguments, including the
         byte[][]s, int[]s, and long[]s which will not work when we
         have a AbstractBTree and a ByteBuffer.

       - The IndexSegment's Node and Leaf instances must remain
         immutable (various methods are overriden to throw
         exceptions for unsupported operations).

       - I may need to converge on a common interface for RMI and
         B+Tree nodes and leaves which is different from IKeyBuffer or
         IRandomAccessByteArray.  If so, then IndexMetadata will need
         to be updated to reflect the codec interface change.

       - Done. Converge on the standard fastutil and dsi dependencies,
         removing their variants from the lgpl-utils module and move
         the lgpl-utils module into the bigdata project.

	 - added dsiutils-1.0.10 (369k), replacing lgpl-utils.

	 - updated fastutils-5.1.4 to fastutils-5.1.5.

	 - colt-1.2.0 is unchanged.

	 - Package change for InputBitStream and OutputBitStream from
	   it.unimi.dsi.mg4j.io to it.unimi.dsi.io.

	 - Package change for Coder, Decoder, and HuffmanCodec from
           it.unimi.dsi.mg4j.compression to it.unimi.dsi.compression.

	 - Method change for Codec.getDecoder() to Codec.decoder().

	 - Method change for PrefixCodec.getCoder() to
           PrefixCodec.coder().

	 - (*) Verify use of the correct (new) ctor for
           OutputBitStream.

	   Verify new uses of FastByteArrayOutputStream in compression
	   code and of the OutputBitStream.  Make sure that we are not
	   allocating huge buffers when compared to the actual
	   requirements.

	 - (*) Verify requirement for additional dsiutil dependencies.

	 - Feedback to dsiutils on changes introduced in the
           CustomByteArrayFrontCodedList.  These changes are probably
           too far reaching to expect that they will make it back into
           dsiutils.

	 - (*) Replace it.unimi.dsi.mg4j.util.BloomFilter2 with
	   it.unimi.dsi.util.BloomFilter?

	   Request changes in dsi-utils so we can use that BloomFilter
	   class directly.

	 - Delete FastRDFKeyCompression (broken and Huffman or
           Hu-Tucker key compression should be just as good).

         - (*) Use autojar to extract only the necessary classes from
           fastutils.  Possibly do this as part of the lgpl-utils
           build.

    x. huffman (or extensible?) coding for the values.

    x. The spanned entry counts, the child addresses, and the
       timestamps are all fixed length int32 or int64 fields.  These
       can be compressed by a huffman coding on their byte values if
       we want to keep the in-memory representation down more or they
       could be stored "as is" in serialized record and deflate could
       then compress them for the disk.

    x. Bit flags for the delete markers.  Set aside (nentries/8)+1
       bytes for this.

  - Fixed or variable sized "page?"

     - Unless record size is variable we need to control the #of
       tuples in a "page" which would require new logic in Node, Leaf
       and IndexSegmentBuilder/Plan.

     - However, if record size is variable, then we need to manage the
       "heap" on a native direct buffer or use byte[]s (or a
       ByteBuffer backed by a byte[]).

Access:

  - Efficient search on compressed keys (prefix or hu-tucker).

  - Random access to tuples in a leaf (for keyAt(), etc).  This does
    not have to be as efficient as the key search which is much more
    heavily used.

  - Fast extraction of the value, timestamp, and delete marker for a
    tuple.

  - Fast scan of tuples in either direction, materializing keys,
    values, timestamps, and/or delete flags.

  - Efficient merged iterator on two or more leaves with optional
    filter (used for storing asynchronous writes in a compressed
    form).

  - Fast index partition splits.  Record #of spanned tuples (already
    done) and the #of spanned undeleted tuples.  The latter will be
    used for fast index partition splits, fast exact range counts,
    etc.  (I wonder if I really need to know the total #of tuples
    spanned or just the #of undeleted tuples spanned.) 

    The split can be identified by a search for keys whose undeleted
    tuple count equally partitions the view.  For a split into two
    index partitions, the search identifies a key such that the
    undeleted tuple range counts are for the left and right sibling
    are approximately equal.  [In fact, I am not sure if this is
    possible since whether a tuple is deleted or not is only decidable
    in two cases: (a) when the view is compact; and (b) when an
    undeleted tuple scan reports the tuple.  So the fast split might
    only be possible as part of a compacting merge when we have a view
    without deleted tuples.  It is probably Ok if there are deleted
    tuples on the mutable B+Tree if we track the deleted tuple count
    there and know that the sole index segment in the view does not
    have any deleted tuples.]

  - Parallel iterator scan at the ClientIndexView level (process the
    index partitions in parallel).  This should be implemented using a
    BlockingBuffer on the client.  The iterator is distributed in
    parallel to the DS.  Chunks are added to the client's blocking
    buffer as they arrive.  The max parallelism of the client index
    view should be respected for this operation.  The only real catch
    will be handling redirects for the unisolated index view.
    
    This flag should be used in the high-level query and turned on
    only for purposes where we can tolerate the partial delivery order
    of the parallel iterator.  In fact, we can probably tolerate that
    form most use cases but some care still needs to be excercised
    when enabling this.

    Compare performance with this flag against performance without the
    flag and against differing degrees of limited parallelism.

  - Fix the sparse row store splitter (must respect the logical row
    boundaries).

  - Raise AbstractBTreeTupleCursor::rangeCheck(final L leaf, final int
    index) into the ILeafData API?  The method signature would have to
    be changed to accept the optional fromKey and toKey constraints
    and the test would then be answered by the ILeafData
    implementation.

  - Strongly type the AbstractBTree's IAutoBox interface for the
    key/value types and link that with the ITupleSerializer types.
    

API: 

    Use the same API for mutable nodes and leaves and immutable nodes
    and leaves, but the latter use a de-compressed record.

Questions:

    Will the data rest in a direct ByteBuffer or a byte[]?

    Do we need to code "null" as well as variable length byte[] and
    allow values[] itself to be null?

B+Tree node buffering.

       - set of large native buffers.

       - hash map <UUID,addr> : <buffer#,offset>

       - strict unbounded LRU for eviction.

       - guard for node/leaf data access (latch) protect critical
         regions using a nested inc/dec approach and ensures that the
         data mapped to a given buffer and offset is neither moved nor
         evicted during access.  avoid guards across recursive methods
         since that can lead to deadlock with compact.

       - compact buffers - must not deadlock with record access as
         mediated by guards.

       - bitmap might help to write compact logic.

       - use an allocation unit for the slots in the buffer which is a
         multiple of some power of two, e.g., 128 or 256 bytes per
         slot.  all slots for a given record are contiguous.

       - Could use the same buffers for the index segment nodes
         region, but this raises the opportunity for fragmentation
         significantly.  This is a kind of double-buffering.  If the
         nodes region is not compressed but only the individual nodes,
         then the uncompressed nodes would also be buffered on a
         strict LRU basis.

       - Compact should maintain a free region at the end of each
         buffer, prefer to fill a buffer to capacity, and perform the
         minimum movement possible to fill gaps (incremental) or
         simply compact onto a different buffer (batch).  With buffer
         and buffer to buffer copy should be DMA.  The challenge is to
         hold all necessary locks so that we can relocate the records
         within or across buffers.

	 You know, this variable length record compacting thing is
	 exactly the problem that Java memory management is already
	 solving.  What I need to do is use normal java memory (since
	 it leaks native byte buffers) and impose a soft maximum on
	 the desired #of bytes allocated to B+Tree nodes, clear
	 references for nodes in an LRU pattern until the weakly
	 referenced byte count is LTE the soft maximum, and also track
	 the bytes recovered when weak references are cleared so I
	 know the min/max allocation.  There is some overhead for both
	 byte[] and a ByteBuffer, but not that much when compared to
	 the overhead of the byte[][] keys and values and the other
	 node/leaf metadata.

       - Reading from the store already returns a ByteBuffer on the
         heap.

       - The DiskOnlyStrategy already defines a read cache.  That
         could be refactored as an IIndexStore scope B+Tree node
         cache.  The records would be read from the underlying store
         and the obtained ByteBuffer would be entered into the cache.
         Since the cache is global, the key would have to be
         <UUID,addr> or <File,addr>.  The records should remain
         available until purged by the LRU policy even if the backing
         store is closed (in order words, do not attempt to remove
         records from the cache when the store is closed).  Purging
         records on delete of the backing store could be considered,
         but it is unlikely to be much benefit.  One way to do that is
         to scan from the LRU position backwards an arbitrary distance
         clearing references for any nodes associated with a deleted
         store.
	 
         The cache could also support write through so an newly
         persisted B+Tree node would either be buffered (if write
         through was enabled) or discarded (if it was not enabled).
	 
         While newly persisted nodes are unlikely to be re-read within
         the context of an ACID operation, they are relatively likely
         to be re-read within the context of following operation.

	 We could also install records into the cache when building an
	 index segment, but again that might not be a benefit.

 * <pre>

   version:uint6     The version identifier for this record format (6 bits,
		     which allows for 64 format revisions).

   bitCodedSymbols:1 A bit flag whose value is 1 iff the symbols are given as
		     a packed symbol[] and 0 if they are given as a 256 bit
		     vector (32 bytes).

   nsymbols:uint9    There are at most 256 distinct symbols, which are the
                     distinct possible byte values (9 bits, which allows
                     for an empty leaf or node with no byte values used as
		     well as a leaf or node with all 256 byte values used).

   -- note: at this point the record is byte aligned --

   symbol:byte[]     The packed symbol array -or- an alternative coding which
   symbol:bit[256]   is used if there are GT 32 distinct symbols to be coded
                     since it a more compact representation.

		     O_symbols := 16 bits.

   -- note: at this point the record is byte aligned --

   bitLengthBits:uint8
		     The width in bits of the integers used to code the 
		     bitLength[].

		     The bit offset to this field is either ((2+nsymbols)*8) (if
		     the symbols are coded as a packed byte[]) or ((2+32)*8) (if
		     the symbols are coded as a 256 bit vector).

   codeOffsetBits:uint8
	             The width in bits of the integers used to code the
	             codeOffset[].  If this is ZERO (0), then the codeOffset[]
		     was not stored and the coded values must be decoded with
		     a sequential scan of the codeWord[].

		     O_codeOffsetBits := O_bitLengths + 8;

   sumCodedValueBitLengths:uint32
		     The sum of the bit lengths of the coded values.  This is
		     a 32bit unsigned integer, which is sufficient to code up
		     bit lengths of up to 512MB.  This field IS NOT present 
		     if the codeOffsetBits is ZERO (0) since the field is only
		     used to compute the bit offset of the codeOffset[].

		     O_sumCodedValueBitLengths := O_bitLengths + 16;

   -- note: at this point the record is byte aligned --
   
   nulls[]	     A vector of [nvalues] bit flags.  A flag is a ONE (1) iff
		     the corresponding byte[] in the logical byte[][] was a 
		     null.  A null is coded as a sequence of ZERO (0) code 
		     words.  However, empty byte[]s are also permitted for
		     B+Tree values (but not for B+Tree keys).  Therefore you
		     MUST test the nulls[] to distinguish between a null byte[]
		     and an empty byte[].

		     O_nulls :=  O_bitLengthBits + 8 + 8 + (codeOffsetBits==0?0:32);
  
   bitLength[]	     The delta in the bit length of each code word from the
		     previous code word.  There is one code word pre symbol.  
		     The code words MUST be a canonical huffman code, which
		     implies that the code words are arranged in a
		     non-decreasing order.  This is used to reconstruct the
		     decoder when processing the record.  The combination of
		     a canonical huffman code and the bitLength[] allows us 
		     to generate the decoder without any additional information.

		     O_bitLength[] := O_nulls + nvalues

   codedValue:bit[]  The coded values given as a sequence of code words.  The
		     offsets of each coded value in this array are given
		     directly by the codeOffset[].

		     O_codedValue[] := O_bitLength[] + (nsymbols*bitLengthBits)

   codeOffset[]      Offset to the start of each code from the start of the
                     codedValue[].  While the delta in the offsets could be
		     represented more efficiently, the offsets are represented
		     directly so that we may avoid reading the entire codeOffset[]
		     into memory.  This array is present iff codeOffsetBits is GT 
		     ZERO.

		     O_codeOffset[] := O_codedValue[] + sumCodedValueBitLengths

 </pre>

codeWord[]=[1101, 000, 001, 010, 1110, 1111, 011, 100, 101, 1100]
longCodeWord[]=[13, 0, 1, 2, 14, 15, 3, 4, 5, 12] (base10 version of the codeWords)

length[]=[3, 3, 3, 3, 3, 3, 4, 4, 4, 4]
symbol[]=[1, 2, 3, 6, 7, 8, 9, 0, 4, 5]

Reordering of the symbol2byte[] to match the code book:
      0    1    2    3    4    5    6    7    8    9
in: [99, 101, 105, 107, 109, 110, 111, 112, 114, 115]
out:[101, 105, 107, 111, 112, 114, 115, 99, 109, 110]

codeWord: 000, symbol=0, value=99 (c)
codeWord: 001, symbol=1, value=101 (e)
codeWord: 010, symbol=2, value=105 (i)
codeWord: 011, symbol=3, value=107 (k)
codeWord: 100, symbol=4, value=109 (m)
codeWord: 101, symbol=5, value=110 (n)
codeWord: 1101, symbol=6, value=111 (o)
codeWord: 1110, symbol=7, value=112 (p)
codeWord: 1111, symbol=8, value=114 (r)
codeWord: 1100, symbol=9, value=115 (s)


Note: When sending this record format, you must also transmit both the
#of values in the logical byte[][] coded by the record and the #of
bits in the record itself.

- The Huffman decoder ctor requires the code words arranged into a
  non-decreasing order by code length paired with the symbols arranged
  in a correlated order.  This can be done either in the serialized
  format or when read build the decoder from the record.  We do this
  when we build the decoder because that allows us to use a more
  compact representation of the symbols in the serialized record and
  because the code word lengths are implicit in the code words due to
  the prefix property.

  - The codeWordLength[] might be more compact with run length
    encoding.  The article suggests [min, max, #of codes having each
    length between min and max].  E.g., a variant of runLength
    encoding.

    Try fibonacci codes for the dictionary entries when N LT 64?

  - dsiutils

    1. Modified HuffmanCodec to expose the symbol[].
    
    2. HuffmanCodec will fail if it is given a zero length
       frequency[].  The exception is thrown out of the
       CanonicalFast64CodeWordDecoder ctor.

    3. Done. The ByteArrayFrontCodedList can not directly use the data
       in place in a ByteBuffer or IBS.  Its serialization will have
       to be modified to support that application.

    4. Build lgpl-utils as a separate JAR and link it as a dependency.

  - Implement at least:

    None w/ search.  The byte[][] is written out w/o coding.

       Write and test.  We should be able to do search() on this as
       well as random lookup.  [This could be implemented using
       FrontCodedCoder if it were modified such that the ratio is
       dynamically set to the #of items in the record.]

    Prefix coding w/ search

       Done.  Continue the refactor so we can use search() on a raba
       and test it in this context.  See if I can make some progress.

       Still need to reconcile PrefixSerializer (IDataSerializer,
       streams) with FrontCodedDataCoder (IDataCoder, records).

    Canonical huffman coding w/ search.

       This requires us to code zero frequency count byte values are
       used so any byte[] may be coded.

    Canonical huffman coding w/o search.

       Only the byte values having non-zero frequency counts are
       coded.
    
	Note: I am still having troubles with the canonical huffman
	code.  It is possible to rebuild the Decoder from the
	frequency[].  While that is quite a hack, it might be better
	than banging my head on the wall further.  One problem with
	that approach (at least as taken by MikeP) is it is NOT a
	canonical code which results.  Another is that different data
	are written onto the persistent record so the serialized
	formats would not be compatible after a fix.

    Hu-Tucker w/ search.

        I am disincluded to implement this coding since the algorithm
	implemented to find the code is quadratic in the size of the
	code space and we would need to code all 256 byte values each
	time in order to use this for search.

    FastRDFValueCompression

	Modify implement IDataCoder so as to permit in place access to
	the coded values.

  - Try patch to HuffmanSerializer in the trunk w/o StringBuilder and
    w/o freq[].  Instead, send the code word bit lengths and either
    use canonical huffman codes or also send the symbols/symbol
    indices.

- extend IRandomAccessByteArray interface for keys, adding a search()
  method.  

  Refactor to declare optional operations which throw an
  UnsupportedOperationException and then clean up the interface
  hierarchy.

- Both Leaf and Node should provide access methods to wrap their keys
  as a Raba and their values as a Raba.  We may want caching for those
  wrapped views.

  - Implement MutableLeafData by refactoring Leaf.

  - Implement MutableNodeData by refactoring Node.

- Align IDataSerializer with IRabaEncoder and IRabaDecoder.  Modify
  various things to take advantage of random access to the coded
  byte[]s rather than decoding everything first.

- IBS over ByteBufferInputStream might be slow.  Look into that.

------------------------------------------------------------
-- Global B+Tree node/leaf buffering, or maybe record ------
-- buffer across all stores for a DS instance --------------
------------------------------------------------------------

Paul,

We are looking to tune the use of RAM to buffer B+Tree nodes and
leaves for the scale-out database.  I would expect that at least 50%
of the RAM should be dedicated to this task on each JVM instance.  I
am trying to decide on the approach to managing this memory.  I am
considering either (A) a large ByteBuffer on the native heap and
managing the memory myself; or (B) allocating a large number of
perfect fit ByteBuffers on the Java heap and letting the JVM manage
them.

As someone with roots in C, my first inclination is to allocate a
large ByteBuffer on the native heap and then manage the memory within
that buffer myself.  We made the decision to impose a constraint only
on the B+Tree branching factor, but not on the size of the B+Tree node
or leaf representation on the disk. This gives us perfect fit records
on the disk so the on disk image corresponds to perfect utilization
within the B+Tree even if nodes and leaves are not 100% full. As a
consequence, the B+Tree nodes and leaves use variable length records
rather than fixed size pages.  Given that, the buffer memory
management problem would probably rely on mechanisms such as those
already used by the JVM to handle Java allocations.  However, Java
already has great garbage collectors.

So it occurs to me that we might be better off allocating ByteBuffer's
on the Java heap and then letting the JVM manage the memory on our
behalf.  I believe that we could achieve the desired degree of
buffering using a hash map with weak reference values combined with a
hard reference retention cache using an LRU eviction policy.  If we
cleared hard references from the LRU position whenever the total of
the buffered byte[]s exceeded the desired percentage of the JVM heap,
then those byte[]s would be automatically discarded once they were
only weakly reachable.

While I would like to use native ByteBuffers for these data, but it is
my understanding that Java "leaks" ByteBuffer's whose backing storage
is on the native heap.  Also, it is my expectation that a large part
of the memory savings will come from operating on a binary image of
the B+Tree node/leaf rather than de-serializing the (de-compressed)
image read from the disk.  This will allow us to get rid of the
(de-)serialization time and the entailed memory demand on the Java
data structures used to model the nodes and leaves.  Running with the
expanded (deserialized Java objects) version of the B+Tree nodes and
leaves we typically buffer .3G of data on disk in RAM on a server with
a 12G JVM process.  I expect that we could increase that to 6G with
either of the proposed approaches, which would of course drammatically
improve the database performance by reducing IO Wait and
(de-)serialization costs.

I would appreciate it if you have any insight on this question which
you could share.

Thanks,

-bryan
