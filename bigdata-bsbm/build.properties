# ant build properties.

# the base directory
bsbm.dir=.

# Where the generated files will be written.
build.dir=ant-build

##
# javac options
##

# debug=on|off
javac.debug=on
# debuglevel=lines,vars,source (or any combination thereof).
javac.debuglevel=lines,vars,source
javac.verbose=off
#javac.target=1.6
#javac.source=1.6
javac.encoding=Cp1252

# bsbm properties.
#
# Note: By default, the files will wind up in ./ant-build/bin
#
# Note: By degault, the server jvm will optimize for throughput and can have
# high variation in throughput due to long GC pauses for larger heaps. You can
# use the CMS-I GC mode to minimize latency at the expense of some throughput.

# The maximum size of the java heap for the BSBM test runs.
bsbm.maxMem=1g

# The #of products, which implies the #of triples.  The relationship is linear.
# E.g.: 10=5k; 2785=1M; 70812=25M; 284826=100M; 566496=200M; 1132992=400M, etc.
bsbm.pc=10

bsbm.baseDir=d:/bigdata-perf-analysis/bsbm_${bsbm.pc}

# The directory in which the generator writes its data.
bsbm.dataDir=${bsbm.baseDir}/td_data

# Generate ntriples.
bsbm.outputType=nt

# The name of the file containing the generated RDF data without the filename extension.
bsbm.outputFile=${bsbm.baseDir}/dataset

# The name of the file used for the BSBM journal.
bsbm.journalFile=${bsbm.baseDir}/bigdata-bsbm.jnl

#
# Qualification of the system under test.
#
bsbm.qualDataDir=d:/bigdata-perf-analysis/bsbm-qual
bsbm.qualJournal=d:/bigdata-perf-analysis/bsbm-qual/bigdata-bsbm.jnl

#
# Query parameters.
#

# The #of warmup query mixes to present.
bsbm.w=50

# The #of query mixes to present once the database has been warmed up.
bsbm.runs=500

# The #of concurrent clients for query.
bsbm.mt=1

#
# Profiler parameters.
#

# No profiler.
profilerAgent=
# linux-64
#profilerAgent=-agentpath:/nas/install/yjp-8.0.20/bin/linux-x86-64/libyjpagent.so

# No profiler.
profilerAgentOptions=
# all profiling initially disabled.
#profilerAgentOptions=-agentlib:yjpagent=disableexceptiontelemetry,disablestacktelemetry

profiler=${profilerAgent} ${profilerAgentOptions}

# Configure GC for higher throughput.  Together these options request
# parallel old generation collection using N threads.  The application
# will be paused when this occurs, but GC will be faster.  Hence
# throughput will be higher.  However, be sure to use JDK 6u10+ (6676016
# : ParallelOldGC leaks memory).
#
# http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6676016

gcopts=-XX:+UseParallelOldGC -XX:ParallelGCThreads=4

# Generates detailed logging on the JVM GC behavior.  The service will
# start in the configured service directory, so the log file will be in
# that directory as well.  The service directory is typically on local
# disk, so that is where you need to look for this file.

gcdebug=-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:jvm_gc.log

# all jvm args for query.
queryJvmArgs=${gcopts} ${gcdebug} ${profiler}
