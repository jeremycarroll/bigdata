
<!-- $Id: build.xml 2266 2009-10-26 18:21:50Z mrpersonick $ -->
<!--                                                        -->
<!-- do "ant bundle-jar" in the parent directory first.     -->
<!--                                                        -->
<project name="bsbm" default="compile" basedir=".">

	<property file="build.properties" />

	<!-- build-time classpath. -->
	<path id="build.classpath">
		<fileset dir="${bsbm.dir}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- runtime classpath w/o install. -->
	<path id="runtime.classpath">
		<!-- The compiled BSBM classes. -->
		<pathelement location="${build.dir}/classes" />
		<!-- The BSBM dependencies. -->
		<fileset dir="${bsbm.dir}/lib">
			<include name="**/*.jar" />
		</fileset>
		<!-- The bigdata dependencies (for the nano-server). -->
		<fileset dir="${bigdata.build.dir}/lib">
			<include name="**/*.jar" />
		</fileset>
		<path refid="build.classpath" />
	</path>

	<target name="clean" description="cleans everything in [build.dir]">
		<delete dir="${build.dir}" />
	</target>

	<target name="prepare">
		<!-- create directories. -->
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/classes" />
		<mkdir dir="${build.dir}/bin" />
	</target>

	<target name="compile" depends="prepare" description="Compile the benchmark.">
		<javac destdir="${build.dir}/classes" classpathref="build.classpath" debug="${javac.debug}" debuglevel="${javac.debuglevel}" verbose="${javac.verbose}" encoding="${javac.encoding}">
			<src path="${bsbm.dir}/src/java" />
			<compilerarg value="-version" />
		</javac>
		<!-- copy resources. -->
		<copy toDir="${build.dir}/classes">
			<fileset dir="${bsbm.dir}/src/java">
				<exclude name="**/*.java" />
				<exclude name="**/package.html" />
			</fileset>
		</copy>
		<copy toDir="${build.dir}/bin">
			<!-- copy benchmark data and queries. -->
			<fileset dir="${bsbm.dir}/src/resources/bsbm-data" />
			<!-- copy the journal configuration file. -->
			<fileset file="${bsbm.dir}/*.properties" />
			<!-- copy log4j configuration file. -->
			<fileset dir="${bsbm.dir}/src/resources/logging" />
		</copy>
	</target>

	<!--
	Here is how to qualify the system.

	You have to download the qualification dataset [1] (it's 20M, unzip it as 
	dataset_1m.ttl), its test driver data [2] (unzip this), and the correct
	results [3], and put them in the ${bsbm.qualDataDir}.  Then follow the
	instructions in [4], which boils down to three ant tasks:

	ant run-load-qualification (loads the dataset)
	ant run-qualification-1 (runs the queries)
	ant run-qualification-2 (compares the actual query results to the correct query results)

    Also, note that src/resources/bsbm-data/ignoreQueries.txt file MUST be empty
    when you run the qualifications queries.

	[1] http://www4.wiwiss.fu-berlin.de/bizer/BerlinSPARQLBenchmark/datasets/qualification.ttl.gz
	[2] http://www4.wiwiss.fu-berlin.de/bizer/BerlinSPARQLBenchmark/datasets/td_data_q.zip
	[3] http://www4.wiwiss.fu-berlin.de/bizer/BerlinSPARQLBenchmark/code/correct.qual
	[3] http://www4.wiwiss.fu-berlin.de/bizer/BerlinSPARQLBenchmark/spec/index.html#qualification

	-->

	<target name="run-load-qualification" depends="compile" description="Load the qualification data set.">
		<delete file="${bsbm.qualJournal}" />
		<java classname="com.bigdata.rdf.store.DataLoader" fork="true" failonerror="true" dir="${build.dir}/bin">
			<arg line="-namespace ${bsbm.qualNamespace} ${bsbm.journalPropertyFile} ${bsbm.qualDataDir}/dataset_1m.ttl" />
			<!-- specify/override the journal file name. -->
			<jvmarg line="${queryJvmArgs} -Dcom.bigdata.journal.AbstractJournal.file=${bsbm.qualJournal}" />
			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>
	
	<target name="run-qualification-1" depends="compile" description="Run the qualification queries.">
		<java classname="benchmark.testdriver.TestDriver" fork="true" failonerror="true" dir="${build.dir}/bin">
			<arg line="-idir ${bsbm.qualDataDir}/td_data -q http://localhost:${bsbm.nanoServerPort}/" />
			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>

	<target name="run-qualification-2" depends="compile" description="Compare qualification query run against ground truth.">
		<java classname="benchmark.qualification.Qualification" fork="true" failonerror="true" dir="${build.dir}/bin">
			<arg line="${bsbm.qualDataDir}/correct.qual run.qual" />
			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>

	<!-- @todo modify to support gzip and split output files for large runs. -->
	<target name="run-generator" depends="compile">
		<mkdir dir="${bsbm.baseDir}" />
		<java classname="benchmark.generator.Generator" fork="true" failonerror="true" dir="${build.dir}/bin">
			<!-- -fc causes the generator to forward chain the test data. -->
			<!-- -pc # specifies the #of products. -->
			<!-- -s specifies the output type, generally 'nt' for ntriples. -->
			<!-- -fn specifies the output file w/o the .nt extension. -->
			<arg value="-fc" />
			<arg value="-pc" />
			<arg value="${bsbm.pc}" />
			<arg value="-dir" />
			<arg value="${bsbm.dataDir}" />
			<arg value="-s" />
			<arg value="${bsbm.outputType}" />
			<arg value="-fn" />
			<arg value="${bsbm.outputFile}" />
			<jvmarg value="-Xmx${bsbm.maxMem}" />
			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>

	<!-- Note: split data files and use RDFDataLoadMaster for scale-out. -->
	<target name="run-load" depends="compile">
		<!-- delete file if it exists so we load into a new journal. -->
		<delete file="${bsbm.journalFile}" />
		<java classname="com.bigdata.rdf.store.DataLoader" fork="true" failonerror="true" dir="${build.dir}/bin">
			<arg line="-verbose -namespace ${bsbm.namespace} ${bsbm.journalPropertyFile} ${bsbm.outputFile}.${bsbm.outputType}${bsbm.compressType}" />
			<!-- specify/override the journal file name. -->
			<jvmarg line="${queryJvmArgs} -Dcom.bigdata.journal.AbstractJournal.file=${bsbm.journalFile}
				-Dcom.bigdata.rdf.store.DataLoader.bufferCapacity=1000000
				-Dcom.bigdata.io.DirectBufferPool.bufferCapacity=10485760
				" />
			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>

	<target name="start-nano-qual-server" depends="compile" description="Start a small http server for the qualification data set.">
		<java classname="com.bigdata.rdf.sail.webapp.NanoSparqlServer" fork="true" failonerror="true" dir="${build.dir}/bin">
			<arg line="${bsbm.nanoServerPort} ${bsbm.qualNamespace} ${bsbm.journalPropertyFile}" />
			<!-- specify/override the journal file name. -->
			<jvmarg line="${queryJvmArgs} -Dcom.bigdata.journal.AbstractJournal.file=${bsbm.qualJournal}" />
			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>

	<target name="start-nano-server" depends="compile" description="Start a small http server fronting for a bigdata database instance.">
		<java classname="com.bigdata.rdf.sail.webapp.NanoSparqlServer" fork="true" failonerror="true" dir="${build.dir}/bin">
			<arg line="${bsbm.nanoServerPort} ${bsbm.namespace} ${bsbm.journalPropertyFile}" />
			<!-- specify/override the journal file name. -->
			<jvmarg line="${queryJvmArgs} -Dcom.bigdata.journal.AbstractJournal.file=${bsbm.journalFile}" />
			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>

	<target name="rampup" depends="compile" description="Runs the benchmark queries against the loaded data until system performance reaches a steady state as defined by the benchmark.">
		<java classname="benchmark.testdriver.TestDriver" fork="true" failonerror="true" dir="${build.dir}/bin">

			<arg value="-rampup" />

			<!-- -idir dir is the test data directory (default td_data). -->
			<arg value="-idir" />
			<arg value="${bsbm.dataDir}" />

			<!-- The randomizer seed. -->
			<arg value="-seed" />
			<arg value="random" />
			<!--<arg value="${bsbm.seed}"/>-->

			<!-- -o file is the name of the xml output file. -->
			<arg value="-o" />
			<arg value="${bsbm.resultsDir}/benchmark_result_pc${bsbm.pc}_runs${bsbm.runs}_mt${bsbm.mt}.xml" />

			<!-- The SPARQL endpoint. -->
			<arg value="http://localhost:${bsbm.nanoServerPort}/sparql/" />

			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>

	<target name="run-query" depends="compile" description="Runs the benchmark queries against the loaded data.">
		<java classname="benchmark.testdriver.TestDriver" fork="true" failonerror="true" dir="${build.dir}/bin">
			<!-- -runs # is the #of query mix runs (default is 500). -->
			<arg value="-runs" />
			<arg value="${bsbm.runs}" />

			<!-- -w # is the #of warmup query mixes (default is 50). -->
			<arg value="-w" />
			<arg value="${bsbm.w}" />

			<!-- -mt # is the #of concurrent clients. -->
			<arg value="-mt" />
			<arg value="${bsbm.mt}" />

			<!-- -qdir dir is the query directory (default is queries). -->
			<!--<arg value="-qdir"/><arg value="src/resources/bsbm_data"/>-->

			<!-- -idir dir is the test data directory (default td_data). -->
			<arg value="-idir" />
			<arg value="${bsbm.dataDir}" />

			<!-- The randomizer seed. -->
			<arg value="-seed" />
			<arg value="${bsbm.seed}" />

			<!-- -o file is the name of the xml output file. -->
			<arg value="-o" />
			<arg value="${bsbm.resultsDir}/benchmark_result_pc${bsbm.pc}_runs${bsbm.runs}_mt${bsbm.mt}.xml" />

			<!-- The SPARQL endpoint. -->
			<arg value="http://localhost:${bsbm.nanoServerPort}/" />

			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>
	
    <target name="run-print-queries" depends="compile" description="Prints some sample benchmark queries to be run against the loaded data.">
        <java classname="benchmark.bigdata.TestDriver" fork="true" failonerror="true" dir="${build.dir}/bin">
            <!-- -runs # is the #of query mix runs (default is 500). -->
            <arg value="-runs" />
            <arg value="${bsbm.runs}" />

            <!-- -w # is the #of warmup query mixes (default is 50). -->
            <arg value="-w" />
            <arg value="${bsbm.w}" />

            <!-- -mt # is the #of concurrent clients. -->
            <arg value="-mt" />
            <arg value="${bsbm.mt}" />

            <!-- -qdir dir is the query directory (default is queries). -->
            <!--<arg value="-qdir"/><arg value="src/resources/bsbm_data"/>-->

            <!-- -idir dir is the test data directory (default td_data). -->
            <arg value="-idir" />
            <arg value="${bsbm.dataDir}" />

            <!-- The randomizer seed. -->
            <arg value="-seed" />
            <arg value="${bsbm.seed}" />

            <!-- -o file is the name of the xml output file. -->
            <arg value="-o" />
            <arg value="${bsbm.resultsDir}/benchmark_result_pc${bsbm.pc}_runs${bsbm.runs}_mt${bsbm.mt}.xml" />

            <!-- The SPARQL endpoint. -->
            <arg value="http://localhost:${bsbm.nanoServerPort}/" />

            <classpath>
                <path refid="runtime.classpath" />
            </classpath>
        </java>
    </target>
	

	<target name="set-properties" depends="compile" description="Set or change properties for a kb instance. The new values are read from stdin.">
		<java classname="com.bigdata.rdf.sail.BigdataSailHelper" fork="true" failonerror="true">
			<!--
Note: You can't change the writeRetentionQueue capacity here.  It is propagated to the IndexMetadata records
for the BTree instances and needs to be updated in place for each index.

inputstring="com.bigdata.btree.writeRetentionQueue.capacity=8000"

inputstring="com.bigdata.rdf.sail.starJoins=false"

inputstring="com.bigdata.rdf.sail.starJoins=true\ncom.bigdata.relation.rule.eval.ProgramTask.maxParallelSubqueries=10"
-->
			<!-- dir="${build.dir}/bin" -->
			<arg line="${bsbm.journalFile} LTS kb" />
			<jvmarg value="-Dlog4j.configuration=log4j.properties" />
			<classpath>
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>

</project>
